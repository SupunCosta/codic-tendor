using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Dapper;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using ServiceStack;
using UPrinceV4.Shared;
using UPrinceV4.Web.Data;
using UPrinceV4.Web.Data.BOR;
using UPrinceV4.Web.Data.CAB;
using UPrinceV4.Web.Data.CPC;
using UPrinceV4.Web.Data.HR;
using UPrinceV4.Web.Data.PBS_;
using UPrinceV4.Web.Data.PMOL;
using UPrinceV4.Web.Data.PO;
using UPrinceV4.Web.Data.ProjectLocationDetails;
using UPrinceV4.Web.Data.Stock;
using UPrinceV4.Web.Data.VisualPlaane;
using UPrinceV4.Web.Data.VisualPlan;
using UPrinceV4.Web.Repositories.Interfaces;
using UPrinceV4.Web.Repositories.Interfaces.BOR;
using UPrinceV4.Web.Repositories.Interfaces.CPC;
using UPrinceV4.Web.Repositories.Interfaces.PBS;
using UPrinceV4.Web.Util;
using Z.Dapper.Plus;
using Databases = UPrinceV4.Web.Data.Stock.Databases;
using Properties = UPrinceV4.Web.Data.Properties;

namespace UPrinceV4.Web.Repositories.VP;

public class VPRepository : IVPRepository
{
    public async Task<VPShortCutPaneCommon> GetShortcutpaneData(VPParameter VPParameter)
    {
        var query =
            @"SELECT * FROM dbo.OrganizationTaxonomyLevel WHERE (LanguageCode = @lang AND LevelId NOT IN ('yr10e768-3e06-po02-b337-ee367a82adjh')) order by DisplayOrder";

        var VPShortCutPaneCommon = new VPShortCutPaneCommon();

        var parameters = new { lang = VPParameter.Lang };
        using (var connection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
        {
            var data = connection.QueryMultiple(query, parameters);
            VPShortCutPaneCommon.Organisation = data.Read<OrganizationTaxonomyLevel>();

            return VPShortCutPaneCommon;
        }
    }

    public async Task<IEnumerable<GetVpPo>> AllVpPo(VPParameter VPParameter)
    {
        try
        {
            // var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            //     VPParameter.ProjectSequenceId, VPParameter.TenantProvider);
            // var cuconnectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            //     null, VPParameter.TenantProvider);

            var result = await GetPO(VPParameter);

            var groupProject = result.OrderByDescending(x => x.ProjectSequenceCode).ToList()
                .GroupBy(r => r.ProjectSequenceCode);

            // DapperPlusManager.Entity<VpPo>()
            //     .Table("VpPo")
            //     .Map(m => m.Id, nameof(VpPo.Id))
            //     .Map(m => m.ParentId, nameof(VpPo.ParentId))
            //     .Map(m => m.EndDate, nameof(VpPo.EndDate))
            //     .Map(m => m.StartDate, nameof(VpPo.StartDate))
            //     .Map(m => m.Status, nameof(VpPo.Status))
            //     .Map(m => m.Type, nameof(VpPo.Type))
            //     .Map(m => m.Title, nameof(VpPo.Title))
            //     .Map(m => m.LinkId, nameof(VpPo.LinkId))
            //     .Map(m => m.Project, nameof(VpPo.Project))
            //     .Map(m => m.BorId, nameof(VpPo.BorId))
            //     .Map(m => m.CCPCId, nameof(VpPo.CCPCId))
            //     .Map(m => m.PoId, nameof(VpPo.PoId))
            //     .Key(x => x.Id);

            await using var dbConnection =
                new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);

            var PTimeList = dbConnection.Query<ProjectForVpDto>(
                @"SELECT ProjectTime.StartDate,ProjectTime.EndDate,ProjectDefinition.Id,ProjectDefinition.Title,ProjectDefinition.SequenceCode FROM dbo.ProjectDefinition
                                                                                            LEFT OUTER JOIN ProjectTime 
                                                                                            on ProjectTime.ProjectId = ProjectDefinition.Id");

            var addVP = new List<GetVpPo>();

            Parallel.ForEach(groupProject, r =>
            {
                //foreach (var r in groupProject)
                if (r.Key != null)
                {
                    // var projectqueary =
                    //     @"SELECT ProjectTime.StartDate,ProjectTime.EndDate,ProjectDefinition.Id,ProjectDefinition.Title,ProjectDefinition.SequenceCode FROM dbo.ProjectDefinition
                    //                             LEFT OUTER JOIN ProjectTime 
                    //                             on ProjectTime.ProjectId = ProjectDefinition.Id
                    //                             where ProjectDefinition.SequenceCode = @Id";
                    //var param = new { Id = r.Key };

                    var ProjectTime = PTimeList.FirstOrDefault(x => x.SequenceCode == r.Key);


                    var projectVop = new GetVpPo();
                    projectVop.Id = Guid.NewGuid().ToString();
                    projectVop.Title = ProjectTime.Title;
                    projectVop.StartDate = ProjectTime.StartDate;
                    projectVop.EndDate = ProjectTime.EndDate;
                    projectVop.Type = "Project";
                    projectVop.LinkId = ProjectTime.Id;

                    addVP.Add(projectVop);

                    Parallel.ForEach(r, i =>
                    {
                        // foreach (var i in r)
                        // {
                        var labourTime = new List<GetVpPo>();
                        var toolsTime = new List<GetVpPo>();
                        var materialTime = new List<GetVpPo>();
                        var consumableTime = new List<GetVpPo>();

                        var labourResources = new List<GetVpPo>();
                        var toolsResources = new List<GetVpPo>();
                        var materialResources = new List<GetVpPo>();
                        var consumableResources = new List<GetVpPo>();

                        var poVop = new GetVpPo();
                        poVop.Id = Guid.NewGuid().ToString();
                        poVop.Title = i.Title;
                        poVop.Type = "PO";
                        poVop.StartDate = i.DeliveryDate;
                        poVop.EndDate = i.ExpectedDate ?? i.DeliveryDate.AddDays(7);

                        poVop.ParentId = projectVop.Id;
                        poVop.LinkId = i.SequenceId;
                        poVop.Project = r.Key;
                        poVop.PoId = i.SequenceId;
                        poVop.Teams = i.Teams;
                        poVop.ToolsPool = i.ToolsPool;
                        poVop.RequestTypeId = i.RequestTypeId;
                        poVop.RequestTypeName = i.RequestTypeName;
                        var tt = i.CreatedDate.Value.Date + new TimeSpan(0, 0, 0);
                        poVop.CreatedDate = DateTime.Parse(tt.ToString("MM-dd-yyyy HH:mm:ss tt"));
                        poVop.DeliveryDate = i.DeliveryDate;
                        poVop.RequestedDate = i.RequestedDate;
                        poVop.ExpectedDate = i.ExpectedDate;

                        addVP.Add(poVop);

                        if (i.POResources.labour.FirstOrDefault() != null)
                        {
                            var laburid = Guid.NewGuid().ToString();
                            var poLabourVop = new GetVpPo();
                            poLabourVop.Id = laburid;
                            poLabourVop.Title = "Labours";
                            poLabourVop.Type = "ResourceType";
                            poLabourVop.ParentId = poVop.Id;
                            poLabourVop.Project = r.Key;
                            poLabourVop.PoId = i.SequenceId;
                            poLabourVop.CreatedDate = poVop.CreatedDate;
                            poLabourVop.DeliveryDate = i.DeliveryDate;
                            poLabourVop.RequestedDate = i.RequestedDate;
                            poLabourVop.ExpectedDate = i.ExpectedDate;

                            Parallel.ForEach(i.POResources.labour, k =>
                            {
                                // foreach (var k in i.POResources.labour)
                                // {
                                var poLabourItemVop = new GetVpPo();
                                poLabourItemVop.Id = Guid.NewGuid().ToString();
                                poLabourItemVop.Title = k.CTitle;
                                poLabourItemVop.Type = "ResourceItem";
                                poLabourItemVop.ResourceType = "Labour";
                                var hh = new GetVpPo();

                                poLabourItemVop.StartDate = poVop.StartDate;
                                hh.StartDate = poVop.StartDate;

                                poLabourItemVop.EndDate = poVop.EndDate;
                                hh.EndDate = poVop.EndDate;

                                poLabourItemVop.ParentId = laburid;
                                poLabourItemVop.LinkId = k.Id;
                                poLabourItemVop.Project = r.Key;
                                poLabourItemVop.BorId = k.BorId;
                                poLabourItemVop.CCPCId = k.CCPCId;
                                poLabourItemVop.PoId = i.SequenceId;
                                poLabourItemVop.Quantity = k.CQuantity;
                                poLabourItemVop.Teams = i.Teams;
                                poLabourItemVop.RequestTypeId = i.RequestTypeId;
                                poLabourItemVop.RequestTypeName = i.RequestTypeName;
                                poLabourItemVop.CreatedDate = poVop.CreatedDate;
                                poLabourItemVop.DeliveryDate = i.DeliveryDate;
                                poLabourItemVop.RequestedDate = k.RequestedDeliveryDate;
                                poLabourItemVop.ExpectedDate = k.ExpectedDeliveryDate;
                                labourTime.Add(hh);
                                addVP.Add(poLabourItemVop);
                            });

                            poLabourVop.StartDate = labourTime.Min(r => r.StartDate);
                            poLabourVop.EndDate = labourTime.Max(r => r.EndDate);
                            poLabourVop.Resources = labourResources;
                            poLabourVop.Teams = i.Teams;
                            poLabourVop.RequestTypeId = i.RequestTypeId;
                            poLabourVop.RequestTypeName = i.RequestTypeName;
                            addVP.Add(poLabourVop);
                        }

                        if (i.POResources.consumable.FirstOrDefault() != null)
                        {
                            var consumableid = Guid.NewGuid().ToString();
                            var poconsumableVop = new GetVpPo();
                            poconsumableVop.Id = consumableid;
                            poconsumableVop.Title = "Consumables";
                            poconsumableVop.Type = "ResourceType";
                            poconsumableVop.ParentId = poVop.Id;
                            poconsumableVop.Project = r.Key;
                            poconsumableVop.PoId = i.SequenceId;
                            poconsumableVop.CreatedDate = poVop.CreatedDate;
                            poconsumableVop.DeliveryDate = i.DeliveryDate;
                            poconsumableVop.RequestedDate = i.RequestedDate;
                            poconsumableVop.ExpectedDate = i.ExpectedDate;

                            Parallel.ForEach(i.POResources.consumable, k =>
                            {
                                // foreach (var k in i.POResources.consumable)
                                // {
                                var poconsumableItemVop = new GetVpPo();
                                poconsumableItemVop.Id = Guid.NewGuid().ToString();
                                poconsumableItemVop.Title = k.CTitle;
                                poconsumableItemVop.Type = "ResourceItem";
                                poconsumableItemVop.ResourceType = "Consumable";

                                var hh = new GetVpPo();
                                // if (k.CStartDate == null)
                                // {
                                //     poconsumableItemVop.StartDate = i.DeliveryDate;
                                //     hh.StartDate = i.DeliveryDate;
                                // }
                                // else
                                // {
                                //     poconsumableItemVop.StartDate = k.CStartDate;
                                //     hh.StartDate = k.CStartDate;
                                // }
                                //
                                // if (k.CStopDate == null)
                                // {
                                //     poconsumableItemVop.EndDate = poVop.EndDate;
                                //     hh.EndDate = poVop.EndDate;
                                // }
                                // else
                                // {
                                //     poconsumableItemVop.EndDate = k.CStopDate;
                                //     hh.EndDate = k.CStopDate;
                                // }

                                poconsumableItemVop.StartDate = poVop.StartDate;
                                hh.StartDate = poVop.StartDate;

                                poconsumableItemVop.EndDate = poVop.EndDate;
                                hh.EndDate = poVop.EndDate;

                                //poconsumableItemVop.StartDate = k.RequestedDeliveryDate;
                                //poconsumableItemVop.EndDate = k.ExpectedDeliveryDate;
                                poconsumableItemVop.ParentId = consumableid;
                                poconsumableItemVop.LinkId = k.Id;
                                poconsumableItemVop.Project = r.Key;
                                poconsumableItemVop.BorId = k.BorId;
                                poconsumableItemVop.CCPCId = k.CCPCId;
                                poconsumableItemVop.PoId = i.SequenceId;
                                poconsumableItemVop.Quantity = k.CQuantity;
                                poconsumableItemVop.Teams = i.Teams;
                                poconsumableItemVop.RequestTypeId = i.RequestTypeId;
                                poconsumableItemVop.RequestTypeName = i.RequestTypeName;
                                poconsumableItemVop.CreatedDate = poVop.CreatedDate;
                                poconsumableItemVop.DeliveryDate = i.DeliveryDate;
                                poconsumableItemVop.RequestedDate = k.RequestedDeliveryDate;
                                poconsumableItemVop.ExpectedDate = k.ExpectedDeliveryDate;

                                //var hh = new GetVpPo();
                                //hh.StartDate = k.RequestedDeliveryDate;
                                //hh.EndDate = k.ExpectedDeliveryDate;
                                consumableTime.Add(hh);

                                addVP.Add(poconsumableItemVop);
                            });

                            poconsumableVop.StartDate = consumableTime.Min(r => r.StartDate);
                            poconsumableVop.EndDate = consumableTime.Max(r => r.EndDate);
                            poconsumableVop.Resources = consumableResources;
                            poconsumableVop.Teams = i.Teams;
                            poconsumableVop.RequestTypeId = i.RequestTypeId;
                            poconsumableVop.RequestTypeName = i.RequestTypeName;
                            addVP.Add(poconsumableVop);
                        }

                        if (i.POResources.materials.FirstOrDefault() != null)
                        {
                            var materialid = Guid.NewGuid().ToString();
                            var pomaterialVop = new GetVpPo();
                            pomaterialVop.Id = materialid;
                            pomaterialVop.Title = "Materials";
                            pomaterialVop.Type = "ResourceType";
                            pomaterialVop.ParentId = poVop.Id;
                            pomaterialVop.Project = r.Key;
                            pomaterialVop.PoId = i.SequenceId;
                            pomaterialVop.CreatedDate = poVop.CreatedDate;
                            pomaterialVop.DeliveryDate = i.DeliveryDate;
                            pomaterialVop.RequestedDate = i.RequestedDate;
                            pomaterialVop.ExpectedDate = i.ExpectedDate;

                            Parallel.ForEach(i.POResources.materials, k =>
                            {
                                // foreach (var k in i.POResources.materials)
                                // {
                                var poMaterialItemVop = new GetVpPo();
                                poMaterialItemVop.Id = Guid.NewGuid().ToString();
                                poMaterialItemVop.Title = k.CTitle;
                                poMaterialItemVop.Type = "ResourceItem";
                                poMaterialItemVop.ResourceType = "Materials";

                                var hh = new GetVpPo();
                                // if (k.CStartDate == null)
                                // {
                                //     poMaterialItemVop.StartDate = i.DeliveryDate;
                                //     hh.StartDate = i.DeliveryDate;
                                // }
                                // else
                                // {
                                //     poMaterialItemVop.StartDate = k.CStartDate;
                                //     hh.StartDate = k.CStartDate;
                                // }
                                //
                                // if (k.CStopDate == null)
                                // {
                                //     poMaterialItemVop.EndDate = poVop.EndDate;
                                //     hh.EndDate = poVop.EndDate;
                                // }
                                // else
                                // {
                                //     poMaterialItemVop.EndDate = k.CStopDate;
                                //     hh.EndDate = k.CStopDate;
                                // }

                                poMaterialItemVop.StartDate = poVop.StartDate;
                                hh.StartDate = poVop.StartDate;

                                poMaterialItemVop.EndDate = poVop.EndDate;
                                hh.EndDate = poVop.EndDate;

                                //poMaterialItemVop.StartDate = k.RequestedDeliveryDate;
                                //poMaterialItemVop.EndDate = k.ExpectedDeliveryDate;
                                poMaterialItemVop.ParentId = materialid;
                                poMaterialItemVop.LinkId = k.Id;
                                poMaterialItemVop.Project = r.Key;
                                poMaterialItemVop.BorId = k.BorId;
                                poMaterialItemVop.CCPCId = k.CCPCId;
                                poMaterialItemVop.PoId = i.SequenceId;
                                poMaterialItemVop.Quantity = k.CQuantity;
                                poMaterialItemVop.Teams = i.Teams;
                                poMaterialItemVop.RequestTypeId = i.RequestTypeId;
                                poMaterialItemVop.RequestTypeName = i.RequestTypeName;
                                poMaterialItemVop.CreatedDate = poVop.CreatedDate;
                                poMaterialItemVop.DeliveryDate = i.DeliveryDate;
                                poMaterialItemVop.RequestedDate = k.RequestedDeliveryDate;
                                poMaterialItemVop.ExpectedDate = k.ExpectedDeliveryDate;

                                //var hh = new GetVpPo();
                                //hh.StartDate = k.RequestedDeliveryDate;
                                //hh.EndDate = k.ExpectedDeliveryDate;
                                materialTime.Add(hh);

                                addVP.Add(poMaterialItemVop);
                            });

                            pomaterialVop.StartDate = materialTime.Min(r => r.StartDate);
                            pomaterialVop.EndDate = materialTime.Max(r => r.EndDate);
                            pomaterialVop.Resources = materialResources;
                            pomaterialVop.Teams = i.Teams;
                            pomaterialVop.RequestTypeId = i.RequestTypeId;
                            pomaterialVop.RequestTypeName = i.RequestTypeName;

                            addVP.Add(pomaterialVop);
                        }

                        if (i.POResources.tools.FirstOrDefault() != null)
                        {
                            var toolid = Guid.NewGuid().ToString();
                            var potoolVop = new GetVpPo();
                            potoolVop.Id = toolid;
                            potoolVop.Title = "Tools";
                            potoolVop.Type = "ResourceType";
                            potoolVop.ParentId = poVop.Id;
                            potoolVop.Project = r.Key;
                            potoolVop.PoId = i.SequenceId;
                            potoolVop.ToolsPool = i.ToolsPool;
                            potoolVop.CreatedDate = poVop.CreatedDate;
                            potoolVop.DeliveryDate = i.DeliveryDate;
                            potoolVop.RequestedDate = i.RequestedDate;
                            potoolVop.ExpectedDate = i.ExpectedDate;

                            Parallel.ForEach(i.POResources.tools, k =>
                            {
                                // foreach (var k in i.POResources.tools)
                                // {
                                var potoolItemVop = new GetVpPo();
                                potoolItemVop.Id = Guid.NewGuid().ToString();
                                potoolItemVop.Title = k.CTitle;
                                potoolItemVop.Type = "ResourceItem";
                                potoolItemVop.ResourceType = "Tools";

                                var hh = new GetVpPo();
                                // if (k.CStartDate == null)
                                // {
                                //     potoolItemVop.StartDate = i.DeliveryDate;
                                //     hh.StartDate = i.DeliveryDate;
                                // }
                                // else
                                // {
                                //     potoolItemVop.StartDate = k.CStartDate;
                                //     hh.StartDate = k.CStartDate;
                                // }
                                //
                                // if (k.CStopDate == null)
                                // {
                                //     potoolItemVop.EndDate = poVop.EndDate;
                                //     hh.EndDate = poVop.EndDate;
                                // }
                                // else
                                // {
                                //     potoolItemVop.EndDate = k.CStopDate;
                                //     hh.EndDate = k.CStopDate;
                                // }

                                potoolItemVop.StartDate = poVop.StartDate;
                                hh.StartDate = poVop.StartDate;

                                potoolItemVop.EndDate = poVop.EndDate;
                                hh.EndDate = poVop.EndDate;

                                //potoolItemVop.StartDate = k.RequestedDeliveryDate;
                                //potoolItemVop.EndDate = k.ExpectedDeliveryDate;
                                potoolItemVop.ParentId = toolid;
                                potoolItemVop.LinkId = k.Id;
                                potoolItemVop.Project = r.Key;
                                potoolItemVop.BorId = k.BorId;
                                potoolItemVop.CCPCId = k.CCPCId;
                                potoolItemVop.PoId = i.SequenceId;
                                potoolItemVop.Quantity = k.CQuantity;
                                potoolItemVop.Teams = i.Teams;
                                potoolItemVop.ToolsPool = i.ToolsPool;
                                potoolItemVop.RequestTypeId = i.RequestTypeId;
                                potoolItemVop.RequestTypeName = i.RequestTypeName;
                                potoolItemVop.CreatedDate = poVop.CreatedDate;
                                potoolItemVop.DeliveryDate = i.DeliveryDate;
                                potoolItemVop.RequestedDate = k.RequestedDeliveryDate;
                                potoolItemVop.ExpectedDate = k.ExpectedDeliveryDate;

                                //var hh = new GetVpPo();
                                //hh.StartDate = k.RequestedDeliveryDate;
                                //hh.EndDate = k.ExpectedDeliveryDate;
                                toolsTime.Add(hh);

                                addVP.Add(potoolItemVop);
                            });

                            potoolVop.StartDate = toolsTime.Min(r => r.StartDate);
                            potoolVop.EndDate = toolsTime.Max(r => r.EndDate);
                            potoolVop.Resources = toolsResources;
                            potoolVop.Teams = i.Teams;
                            potoolVop.RequestTypeId = i.RequestTypeId;
                            potoolVop.RequestTypeName = i.RequestTypeName;

                            addVP.Add(potoolVop);
                        }
                    });
                }
            });

            //using (var connection = new SqlConnection(cuconnectionString))
            //{
            //    connection.BulkMerge(addVP);
            //}

            return addVP;
        }
        catch (OperationCanceledException e)
        {
            throw e;
        }
    }

    public async Task<IEnumerable<VpPo>> GetVpPo(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

        var query = @"SELECT * FROM VpPo";

        IEnumerable<VpPo> VpPo;
        var parameters = new { lang = VPParameter.Lang };
        using (var connection = new SqlConnection(connectionString))
        {
            VpPo = await connection.QueryAsync<VpPo>(query, parameters);
        }

        return VpPo;

        //List<VpPo> addVP = new List<VpPo>();

        //var projectVop = new VpPo();
        //projectVop.Id = "P0040";
        //projectVop.Title = "P0040";
        //projectVop.StartDate = DateTime.Now;
        //projectVop.EndDate = DateTime.Now;
        //projectVop.Type = "Project";
        //projectVop.LinkId = null;
        //projectVop.ParentId = null;


        //addVP.Add(projectVop);

        //var projectVop1 = new VpPo();
        //projectVop1.Id = "PBS-0001";
        //projectVop1.Title = "PBS-0001";
        //projectVop1.StartDate = DateTime.Now;
        //projectVop1.EndDate = DateTime.Now;
        //projectVop1.Type = "task";
        //projectVop1.LinkId = "P0040";
        //projectVop1.ParentId = "P0040";

        //addVP.Add(projectVop1);

        //var projectVop2 = new VpPo();
        //projectVop2.Id = "BOR-0001";
        //projectVop2.Title = "BOR-0001";
        //projectVop2.StartDate = DateTime.Now;
        //projectVop2.EndDate = DateTime.Now;
        //projectVop2.Type = "task";
        //projectVop2.LinkId = "PBS-0001";
        //projectVop2.ParentId = "PBS-0001";

        //addVP.Add(projectVop2);

        //var projectVop3 = new VpPo();
        //projectVop3.Id = "ResourceOne";
        //projectVop3.Title = "ResourceOne";
        //projectVop3.StartDate = DateTime.Now;
        //projectVop3.EndDate = DateTime.Now;
        //projectVop3.Type = "task";
        //projectVop3.LinkId = "BOR-0001";
        //projectVop3.ParentId = "BOR-0001";

        //addVP.Add(projectVop3);

        //var projectVop4 = new VpPo();
        //projectVop4.Id = "Review";
        //projectVop4.Title = "Review";
        //projectVop4.StartDate = DateTime.Now;
        //projectVop4.EndDate = DateTime.Now;
        //projectVop4.Type = "task";
        //projectVop4.LinkId = "ResourceOne";
        //projectVop4.ParentId = "ResourceOne";

        //addVP.Add(projectVop4);

        //var projectVop5 = new VpPo();
        //projectVop5.Id = "Release";
        //projectVop5.Title = "Release";
        //projectVop5.StartDate = DateTime.Now;
        //projectVop5.EndDate = DateTime.Now;
        //projectVop5.Type = "milestone";
        //projectVop5.LinkId = "Review";
        //projectVop5.ParentId = "Review";

        //addVP.Add(projectVop5);


        //return addVP;
    }

    public async Task<VpPo> UpdateVpPo(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

        //DapperPlusManager.Entity<VpPo>()
        //      .Table("VpPo")
        //      .Map(m => m.Id, nameof(VpPo.Id))
        //      .Map(m => m.ParentId, nameof(VpPo.ParentId))
        //      .Map(m => m.EndDate, nameof(VpPo.EndDate))
        //      .Map(m => m.StartDate, nameof(VpPo.StartDate))
        //      .Map(m => m.Status, nameof(VpPo.Status))
        //      .Map(m => m.Type, nameof(VpPo.Type))
        //      .Map(m => m.Title, nameof(VpPo.Title))
        //      .Map(m => m.LinkId, nameof(VpPo.LinkId))
        //      .Map(m => m.Project, nameof(VpPo.Project))
        //      .Key(x => x.Id);

        if (VPParameter.VpPo.PoId != null)
        {
            var updateQuery =
                "UPDATE dbo.POHeader SET [DeliveryDate] = @StartDate, [ExpectedDate] = @EndDate WHERE SequenceId = @Id";

            var param = new
            {
                Id = VPParameter.VpPo.PoId,
                VPParameter.VpPo.StartDate,
                VPParameter.VpPo.EndDate
            };


            using (var connection = new SqlConnection(connectionString))
            {
                //connection.Update(VPParameter.VpPo);
                await connection.QueryAsync(updateQuery, param);
            }
        }

        return null;
    }

    public async Task<IEnumerable<VpPo>> DeleteAllVpPo(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

        IEnumerable<VpPo> VpPo;
        VpPo = null;
        using (var connection = new SqlConnection(connectionString))
        {
            connection.BulkDelete(connection.Query<VpPo>("Select * FROM VpPo").ToList());
        }

        return VpPo;
    }

    public async Task<IEnumerable<VpPo>> GetAll(VPParameter VPParameter)
    {
       // var options = new DbContextOptions<ShanukaDbContext>();
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId, null,
            VPParameter.TenantProvider);

        var query = @"SELECT * FROM [dbo].[VpPo] WHERE ParentId is null";
        IEnumerable<VpPo> VpPo;
        using (var connection = new SqlConnection(connectionString))
        {
            VpPo = connection.Query<VpPo>(query, new { lang = VPParameter.Lang });
        }

        VpPo = (List<VpPo>)Traverse(VpPo, VPParameter);
        return VpPo;
    }

    public async Task<IEnumerable<BorListDto>> BorList(VPParameter VPParameter)
    {
        var query =
            @"SELECT Bor.Id AS Id, Bor.Id AS [Key], Bor.ItemId, Bor.Title AS BorTitle, Bor.Name,dbo.PbsProduct.Id AS PbsId, PbsProduct.ProductId
                                ,PbsProduct.Name Product, PbsProduct_1.Name AS LocationParent, PbsProduct_2.Name AS UtilityParent
                                FROM dbo.Bor
                                LEFT OUTER JOIN dbo.PbsProduct ON Bor.PbsProductId = PbsProduct.Id
                                LEFT OUTER JOIN dbo.PbsProduct PbsProduct_1 ON Bor.LocationParentId = PbsProduct_1.Id
                                LEFT OUTER JOIN dbo.PbsProduct PbsProduct_2 ON Bor.UtilityParentId = PbsProduct_2.Id 
                                WHERE Bor.IsDeleted = 0 AND (BorTypeId != '6610e768-3e06-po02-b337-ee367a82ad66' OR BorTypeId IS NULL) AND Bor.Id NOT in (SELECT POResources.BorId FROM dbo.POResources GROUP BY POResources.BorId) ";

        var sb = new StringBuilder(query);
        if (VPParameter.BorFilter.BorTitle != null)
        {
            VPParameter.BorFilter.BorTitle = VPParameter.BorFilter.BorTitle.Replace("'", "''");
            sb.Append("AND Bor.Title LIKE '%" + VPParameter.BorFilter.BorTitle + "%' ");
  
        }

        if (VPParameter.BorFilter.LocationParent != null)
        {
            VPParameter.BorFilter.LocationParent = VPParameter.BorFilter.LocationParent.Replace("'", "''");
            sb.Append("AND PbsProduct_1.Name LIKE '%" + VPParameter.BorFilter.LocationParent + "%' ");

        }
            
        if (VPParameter.BorFilter.UtilityParent != null)
            sb.Append("AND PbsProduct_2.Name LIKE  '%" + VPParameter.BorFilter.UtilityParent + "%' ");

        if (VPParameter.BorFilter.Product != null)
            sb.Append("AND PbsProduct.Name LIKE  '%" + VPParameter.BorFilter.Product + "%' ");

        if (VPParameter.BorFilter.Sorter.Attribute == null) sb.Append("ORDER BY ItemId DESC ");

        if (VPParameter.BorFilter.Sorter.Attribute != null)
        {
            if (VPParameter.BorFilter.Sorter.Attribute.ToLower().Equals("bortitle"))
                sb.Append("ORDER BY Bor.ItemId " + VPParameter.BorFilter.Sorter.Order);

            if (VPParameter.BorFilter.Sorter.Attribute.ToLower().Equals("locationparent"))
                sb.Append("ORDER BY PbsProduct_1.Name " + VPParameter.BorFilter.Sorter.Order);

            if (VPParameter.BorFilter.Sorter.Attribute.ToLower().Equals("utilityparent"))
                sb.Append("ORDER BY PbsProduct_2.Name " + VPParameter.BorFilter.Sorter.Order);

            if (VPParameter.BorFilter.Sorter.Attribute.ToLower().Equals("product"))
                sb.Append("ORDER BY PbsProduct.Name " + VPParameter.BorFilter.Sorter.Order);
        }

        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);
        using var connection = new SqlConnection(connectionString);
        var result = connection.Query<BorListDto>(sb.ToString());
        return result;
    }


    public async Task<IEnumerable<TeamsWithPmolDto>> Teams(VPParameter VPParameter)
    {
        if (VPParameter.ProjectSequenceId != null)
        {
            var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
                VPParameter.ProjectSequenceId, VPParameter.TenantProvider);
            var query = @"SELECT
                                  PMol.ProjectMoleculeId
                                 ,PmolTeamRole.CabPersonId
                                 ,PMol.Name
                                 ,PMol.Id
                                 ,PMol.ExecutionEndTime
                                 ,PMol.ExecutionStartTime
                                 ,PMol.ExecutionDate
                                 ,PMol.Title
                                 ,PMol.ProjectSequenceCode
                                FROM dbo.PMolPlannedWorkLabour
                                INNER JOIN dbo.PMol
                                  ON PMolPlannedWorkLabour.PmolId = PMol.Id
                                INNER JOIN dbo.PmolTeamRole
                                  ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id
                                WHERE PMolPlannedWorkLabour.IsDeleted = 0
                                AND PmolTeamRole.IsDeleted = 0
                                AND PmolTeamRole.CabPersonId IS NOT NULL
                                AND PMol.ExecutionDate BETWEEN @Startdate AND @Enddate
                                GROUP BY PMol.ProjectMoleculeId
                                        ,PmolTeamRole.CabPersonId
                                        ,PMol.Name
                                        ,PMol.Id
                                        ,PMol.ExecutionEndTime
                                        ,PMol.ExecutionStartTime
                                        ,PMol.ExecutionDate
                                        ,PMol.Title
                                        ,PMol.ProjectSequenceCode
                                ORDER BY PMol.ProjectMoleculeId DESC";

            var query2 = @"SELECT
                                  PMol.ProjectMoleculeId
                                 ,PmolTeamRole.CabPersonId
                                 ,PMol.Name
                                 ,PMol.Id
                                 ,PMol.ExecutionEndTime
                                 ,PMol.ExecutionStartTime
                                 ,PMol.ExecutionDate
                                 ,PMol.Title
                                 ,PMol.ProjectSequenceCode
                                FROM dbo.PMolPlannedWorkLabour
                                INNER JOIN dbo.PMol
                                  ON PMolPlannedWorkLabour.PmolId = PMol.Id
                                INNER JOIN dbo.PmolTeamRole
                                  ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id
                                WHERE PMolPlannedWorkLabour.IsDeleted = 0
                                AND PmolTeamRole.IsDeleted = 0
                                AND PmolTeamRole.CabPersonId IS NOT NULL
                                GROUP BY PMol.ProjectMoleculeId
                                        ,PmolTeamRole.CabPersonId
                                        ,PMol.Name
                                        ,PMol.Id
                                        ,PMol.ExecutionEndTime
                                        ,PMol.ExecutionStartTime
                                        ,PMol.ExecutionDate
                                        ,PMol.Title
                                        ,PMol.ProjectSequenceCode
                                ORDER BY PMol.ProjectMoleculeId DESC";

            IEnumerable<PmolTeam> pmol;

            if (VPParameter.IsLabourHistory)
                await using (var connection = new SqlConnection(connectionString))
                {
                    pmol = connection.Query<PmolTeam>(query2, buffered: false).ToList();
                }
            else
                using (var connection = new SqlConnection(connectionString))
                {
                    pmol = connection.Query<PmolTeam>(query,
                        new
                        {
                            Enddate = VPParameter.GetTeamDto.EndDate, Startdate = VPParameter.GetTeamDto.StartDate
                        }, buffered: false).ToList();
                }

            var equallist = new List<string>();
            var groupteams = pmol.GroupBy(r => r.ProjectMoleculeId);

            var teamsWithPmol = new List<TeamsWithPmolDto>();

            var vehical = @"SELECT
                                      PMolPlannedWorkTools.CoperateProductCatalogId
                                    ,CorporateProductCatalog.Title
                                    ,CorporateProductCatalog.ResourceNumber
                                    FROM dbo.PMolPlannedWorkTools
                                    INNER JOIN dbo.PMol
                                      ON PMolPlannedWorkTools.PmolId = PMol.Id
                                    INNER JOIN dbo.CorporateProductCatalog
                                      ON PMolPlannedWorkTools.CoperateProductCatalogId = CorporateProductCatalog.Id
                                    WHERE CorporateProductCatalog.ResourceFamilyId = '0c355800-91fd-4d99-8010-921a42f0ba04'
                                    AND PMol.ProjectMoleculeId = @Id AND PMolPlannedWorkTools.IsDeleted = 0";

            IEnumerable<PomlVehicle> vehicals;

            var memberselect =
                @"SELECT Id,FullName As Name FROM [dbo].[CabPerson]";
            IEnumerable<PmolTeamMeber> members;

            await using (var connectionOrg =
                         new SqlConnection(
                             VPParameter.TenantProvider.GetTenant().ConnectionString))
            {
                members = connectionOrg
                    .Query<PmolTeamMeber>(memberselect);
            }

            await using (var connection = new SqlConnection(connectionString))
            {
                foreach (var r in groupteams)
                {
                    var list1 = new List<string>();
                    var teamsWithPmolDto = new TeamsWithPmolDto();
                    var pmolDatalist = new List<PmolData>();
                    var team = new List<PmolTeamMeber>();
                    var pmolData = new PmolData();
                    var equal = equallist.Any(item => item == r.Key);

                    if (equal == false)
                    {
                        foreach (var a in r)
                        {
                            var member = members.FirstOrDefault(m => m.Id == a.CabPersonId);
                            if (member != null)
                            {


                                var m = new PmolTeamMeber
                                {
                                    Id = member.Id,
                                    Name = member.Name
                                };
                                team.Add(m);
                            }

                            list1.Add(a.CabPersonId);
                        }

                        var pmolTeam = r.First();
                        foreach (var b in groupteams)
                        {
                            var first = b.First();
                            var pmolid2 = first.ProjectMoleculeId;
                            var list2 = new List<string>();
                            if (b.Key != r.Key)
                            {
                                list2.AddRange(b.Select(c => c.CabPersonId));

                                var result = list1.OrderBy(e => e).SequenceEqual(list2.OrderBy(e => e));

                                if (result)
                                {
                                    var pmolData1 = new PmolData
                                    {
                                        ProjectMoleculeId = b.Key
                                    };

                                    {
                                        vehicals = connection.Query<PomlVehicle>(vehical, new { Id = b.Key }).ToList();
                                    }

                                    if (vehicals.Any()) pmolData1.PomlVehical = (List<PomlVehicle>)vehicals;

                                    pmolData1.Id = first.Id;
                                    pmolData1.Name = first.Name;
                                    pmolData1.ExecutionStartTime = first.ExecutionStartTime;
                                    pmolData1.ExecutionEndTime = first.ExecutionEndTime;
                                    pmolData1.ExecutionDate = first.ExecutionDate;
                                    pmolData1.ProjectSequenceCode = pmolTeam.ProjectSequenceCode;
                                    pmolData1.Title = first.Title;
                                    pmolDatalist.Add(pmolData1);
                                    equallist.Add(pmolid2);
                                }
                            }
                        }

                        pmolData.ProjectMoleculeId = r.Key;

                        vehicals = connection.Query<PomlVehicle>(vehical, new { Id = r.Key }).ToList();
                        var count = vehicals.Count();
                        if (count > 0) pmolData.PomlVehical = (List<PomlVehicle>)vehicals;
                        pmolData.Id = pmolTeam.Id;
                        pmolData.Name = pmolTeam.Name;
                        pmolData.ExecutionDate = pmolTeam.ExecutionDate;
                        pmolData.ExecutionStartTime = pmolTeam.ExecutionStartTime;
                        pmolData.ExecutionEndTime = pmolTeam.ExecutionEndTime;
                        pmolData.ProjectSequenceCode = pmolTeam.ProjectSequenceCode;
                        pmolData.Title = pmolTeam.Title;
                        pmolDatalist.Add(pmolData);
                        teamsWithPmolDto.Pmol = pmolDatalist;
                        teamsWithPmolDto.Team = team;
                        teamsWithPmol.Add(teamsWithPmolDto);
                    }
                }

                return teamsWithPmol;
            }
        }
        else
        {
            var db = new List<Databases>();
            var teamsWithPmol = new List<TeamsWithPmolDto>();
            string env = null;

            var exceptionLst = new List<DatabasesException>();
            using (var dbconnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
            {
                db = dbconnection
                    .Query<Databases>(
                        @"SELECT SequenceCode AS DatabaseName, ProjectConnectionString  FROM dbo.ProjectDefinition WHERE IsDeleted = 0;")
                    .ToList();

                var memberselect = @"SELECT Id,FullName As Name FROM [dbo].[CabPerson]";
                IEnumerable<PmolTeamMeber> members;
                members = dbconnection.Query<PmolTeamMeber>(memberselect);

                var jsonupload =
                    @"INSERT INTO dbo.TeamsWithPmol ( Id ,ProjectSequenceId ,Json ) VALUES ( @Id ,@ProjectSequenceId ,@Json );";

                var vehical =
                    @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber,PMolPlannedWorkTools.PmolId FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id INNER JOIN dbo.CorporateProductCatalog ON PMolPlannedWorkTools.CoperateProductCatalogId = CorporateProductCatalog.Id WHERE CorporateProductCatalog.ResourceFamilyId = '0c355800-91fd-4d99-8010-921a42f0ba04' AND PMolPlannedWorkTools.IsDeleted = 0";


                foreach (var project in db)
                    try
                    {
                        var query = @"SELECT
                                  PMol.ProjectMoleculeId
                                 ,PmolTeamRole.CabPersonId
                                 ,PMol.Name
                                 ,PMol.Id
                                 ,PMol.ExecutionEndTime
                                 ,PMol.ExecutionStartTime
                                 ,PMol.ExecutionDate
                                 ,PMol.Title
                                 ,PMol.ProjectSequenceCode
                                FROM dbo.PMolPlannedWorkLabour
                                INNER JOIN dbo.PMol
                                  ON PMolPlannedWorkLabour.PmolId = PMol.Id
                                INNER JOIN dbo.PmolTeamRole
                                  ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id
                                WHERE PMolPlannedWorkLabour.IsDeleted = 0
                                AND PmolTeamRole.IsDeleted = 0
                                AND PmolTeamRole.CabPersonId IS NOT NULL
                                AND PMol.ExecutionDate BETWEEN @Startdate AND @Enddate
                                GROUP BY PMol.ProjectMoleculeId
                                        ,PmolTeamRole.CabPersonId
                                        ,PMol.Name
                                        ,PMol.Id
                                        ,PMol.ExecutionEndTime
                                        ,PMol.ExecutionStartTime
                                        ,PMol.ExecutionDate
                                        ,PMol.Title
                                        ,PMol.ProjectSequenceCode
                                ORDER BY PMol.ProjectMoleculeId DESC";

                        var query2 = @"SELECT
                                  PMol.ProjectMoleculeId
                                 ,PmolTeamRole.CabPersonId
                                 ,PMol.Name
                                 ,PMol.Id
                                 ,PMol.ExecutionEndTime
                                 ,PMol.ExecutionStartTime
                                 ,PMol.ExecutionDate
                                 ,PMol.Title
                                 ,PMol.ProjectSequenceCode
                                FROM dbo.PMolPlannedWorkLabour
                                INNER JOIN dbo.PMol
                                  ON PMolPlannedWorkLabour.PmolId = PMol.Id
                                INNER JOIN dbo.PmolTeamRole
                                  ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id
                                WHERE PMolPlannedWorkLabour.IsDeleted = 0
                                AND PmolTeamRole.IsDeleted = 0
                                AND PmolTeamRole.CabPersonId IS NOT NULL
                                GROUP BY PMol.ProjectMoleculeId
                                        ,PmolTeamRole.CabPersonId
                                        ,PMol.Name
                                        ,PMol.Id
                                        ,PMol.ExecutionEndTime
                                        ,PMol.ExecutionStartTime
                                        ,PMol.ExecutionDate
                                        ,PMol.Title
                                        ,PMol.ProjectSequenceCode
                                ORDER BY PMol.ProjectMoleculeId DESC";

                        IEnumerable<PmolTeam> pmol;
                        await using (var connection = new SqlConnection(project.ProjectConnectionString))
                        {
                            if (VPParameter.IsLabourHistory)
                                pmol = connection.Query<PmolTeam>(query2).ToList();
                            else
                                pmol = connection.Query<PmolTeam>(query,
                                    new
                                    {
                                        Enddate = VPParameter.GetTeamDto.EndDate,
                                        Startdate = VPParameter.GetTeamDto.StartDate
                                    }).ToList();

                            var equallist = new List<string>();
                            var groupteams = pmol.GroupBy(r => r.ProjectMoleculeId);

                            IEnumerable<PomlVehicle> vehicals;
                            IEnumerable<PomlVehicle> vehicals1;
                            vehicals1 = connection.Query<PomlVehicle>(vehical)
                                .ToList();
                            foreach (var r in groupteams)
                            {
                                var list1 = new List<string>();
                                PomlList pomlList = null;
                                var teamsWithPmolDto = new TeamsWithPmolDto();
                                var pmolDatalist = new List<PmolData>();
                                var team = new List<PmolTeamMeber>();
                                var pmolData = new PmolData();
                                var equal = equallist.Any(item => item == r.Key);

                                if (equal == false)
                                {
                                    foreach (var a in r)
                                    {
                                        var member =
                                            members.Where(m => m.Id == a.CabPersonId).FirstOrDefault();


                                        var m = new PmolTeamMeber();
                                        m.Id = member.Id;
                                        m.Name = member.Name;
                                        team.Add(m);
                                        list1.Add(a.CabPersonId);
                                    }

                                    var first = r.First();
                                    foreach (var b in groupteams)
                                    {
                                        var pmolTeam = b.First();
                                        var pmolid2 = pmolTeam.ProjectMoleculeId;
                                        var list2 = new List<string>();
                                        if (b.Key != r.Key)
                                        {
                                            foreach (var c in b) list2.Add(c.CabPersonId);

                                            var result = list1.OrderBy(e => e).SequenceEqual(list2.OrderBy(e => e));

                                            if (result)
                                            {
                                                var pmolData1 = new PmolData();
                                                pmolData1.ProjectMoleculeId = b.Key;

                                                vehicals = vehicals1.Where(v => v.PmolId == b.Key).ToList();

                                                if (vehicals.Count() > 0)
                                                    pmolData1.PomlVehical = (List<PomlVehicle>)vehicals;

                                                pmolData1.Id = pmolTeam.Id;
                                                pmolData1.Name = pmolTeam.Name;
                                                pmolData1.ExecutionStartTime = pmolTeam.ExecutionStartTime;
                                                pmolData1.ExecutionEndTime = pmolTeam.ExecutionEndTime;
                                                pmolData1.ExecutionDate = pmolTeam.ExecutionDate;
                                                pmolData1.ProjectSequenceCode = first.ProjectSequenceCode;
                                                pmolData1.Title = pmolTeam.Title;
                                                pmolDatalist.Add(pmolData1);
                                                equallist.Add(pmolid2);
                                            }
                                        }
                                    }

                                    pmolData.ProjectMoleculeId = r.Key;
                                    vehicals = vehicals1.Where(v => v.PmolId == r.Key).ToList();
                                    if (vehicals.Count() > 0) pmolData.PomlVehical = (List<PomlVehicle>)vehicals;

                                    pmolData.Id = first.Id;
                                    pmolData.Name = first.Name;
                                    pmolData.ExecutionDate = first.ExecutionDate;
                                    pmolData.ExecutionStartTime = first.ExecutionStartTime;
                                    pmolData.ExecutionEndTime = first.ExecutionEndTime;
                                    pmolData.ProjectSequenceCode = first.ProjectSequenceCode;
                                    pmolData.Title = first.Title;
                                    pmolDatalist.Add(pmolData);
                                    teamsWithPmolDto.Pmol = pmolDatalist;
                                    teamsWithPmolDto.Team = team;
                                    teamsWithPmol.Add(teamsWithPmolDto);
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        var mDatabasesException = new DatabasesException();
                        mDatabasesException.DatabaseName = project.DatabaseName;
                        mDatabasesException.Exception = ex;
                        exceptionLst.Add(mDatabasesException);
                    }
            }

            return teamsWithPmol;
        }
    }


    public async Task<IEnumerable<TeamsWithPmolDto>> TeamsForCu(VPParameter VPParameter)
    {
        var options = new DbContextOptions<ShanukaDbContext>();
        var db = new List<Databases>();
        var teamsWithPmol = new List<TeamsWithPmolDto>();
        string env = null;
        string connectiondb = null;
        if (VPParameter.TenantProvider.GetTenant().ConnectionString.Contains("uprincev4uatdb"))
        {
            env = "uprincev4uatdb";
            connectiondb = "Server=tcp:" + env +
                           ".database.windows.net,1433;Initial Catalog=UPrinceV4UAT;Persist Security Info=False;User ID=uprincedbuser;Password=UPrince2017!;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;";
        }
        else if (VPParameter.TenantProvider.GetTenant().ConnectionString.Contains("uprincev4einstein"))
        {
            env = "uprincev4einstein";
            connectiondb = "Server=tcp:" + env +
                           ".database.windows.net,1433;Initial Catalog=UPrinceV4Einstein;Persist Security Info=False;User ID=uprincedbuser;Password=UPrince2017!;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;";
        }

        var exceptionLst = new List<DatabasesException>();
        using (var dbconnection = new SqlConnection(connectiondb))
        {
            db = dbconnection.Query<Databases>(
                    @"SELECT SequenceCode AS DatabaseName FROM dbo.ProjectDefinition WHERE IsDeleted = 0;")
                .ToList();


            foreach (var project in db)
                try
                {
                    var connectionString = ConnectionString.MapConnectionString(
                        VPParameter.ContractingUnitSequenceId, project.DatabaseName, VPParameter.TenantProvider);
                    var query = @"SELECT
                                  PMol.ProjectMoleculeId
                                 ,PmolTeamRole.CabPersonId
                                 ,PMol.Name
                                 ,PMol.Id
                                 ,PMol.ExecutionEndTime
                                 ,PMol.ExecutionStartTime
                                 ,PMol.ExecutionDate
                                 ,PMol.Title
                                 ,PMol.ProjectSequenceCode
                                FROM dbo.PMolPlannedWorkLabour
                                INNER JOIN dbo.PMol
                                  ON PMolPlannedWorkLabour.PmolId = PMol.Id
                                INNER JOIN dbo.PmolTeamRole
                                  ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id
                                WHERE PMolPlannedWorkLabour.IsDeleted = 0
                                AND PmolTeamRole.CabPersonId IS NOT NULL
                                AND PMol.ExecutionDate BETWEEN @Startdate AND @Enddate
                                GROUP BY PMol.ProjectMoleculeId
                                        ,PmolTeamRole.CabPersonId
                                        ,PMol.Name
                                        ,PMol.Id
                                        ,PMol.ExecutionEndTime
                                        ,PMol.ExecutionStartTime
                                        ,PMol.ExecutionDate
                                        ,PMol.Title
                                        ,PMol.ProjectSequenceCode
                                ORDER BY PMol.ProjectMoleculeId DESC";

                    var query2 = @"SELECT
                                  PMol.ProjectMoleculeId
                                 ,PmolTeamRole.CabPersonId
                                 ,PMol.Name
                                 ,PMol.Id
                                 ,PMol.ExecutionEndTime
                                 ,PMol.ExecutionStartTime
                                 ,PMol.ExecutionDate
                                 ,PMol.Title
                                 ,PMol.ProjectSequenceCode
                                FROM dbo.PMolPlannedWorkLabour
                                INNER JOIN dbo.PMol
                                  ON PMolPlannedWorkLabour.PmolId = PMol.Id
                                INNER JOIN dbo.PmolTeamRole
                                  ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id
                                WHERE PMolPlannedWorkLabour.IsDeleted = 0
                                AND PmolTeamRole.CabPersonId IS NOT NULL
                                GROUP BY PMol.ProjectMoleculeId
                                        ,PmolTeamRole.CabPersonId
                                        ,PMol.Name
                                        ,PMol.Id
                                        ,PMol.ExecutionEndTime
                                        ,PMol.ExecutionStartTime
                                        ,PMol.ExecutionDate
                                        ,PMol.Title
                                        ,PMol.ProjectSequenceCode
                                ORDER BY PMol.ProjectMoleculeId DESC";

                    IEnumerable<PmolTeam> pmol;

                    if (VPParameter.IsLabourHistory)
                        using (var connection = new SqlConnection(connectionString))
                        {
                            pmol = connection.Query<PmolTeam>(query2).ToList();
                        }
                    else
                        using (var connection = new SqlConnection(connectionString))
                        {
                            pmol = connection.Query<PmolTeam>(query,
                                new
                                {
                                    Enddate = VPParameter.GetTeamDto.EndDate,
                                    Startdate = VPParameter.GetTeamDto.StartDate
                                }).ToList();
                        }

                    var equallist = new List<string>();
                    var groupteams = pmol.GroupBy(r => r.ProjectMoleculeId);

                    var vehical = @"SELECT
                                      PMolPlannedWorkTools.CoperateProductCatalogId
                                    ,CorporateProductCatalog.Title
                                    ,CorporateProductCatalog.ResourceNumber
                                    FROM dbo.PMolPlannedWorkTools
                                    INNER JOIN dbo.PMol
                                      ON PMolPlannedWorkTools.PmolId = PMol.Id
                                    INNER JOIN dbo.CorporateProductCatalog
                                      ON PMolPlannedWorkTools.CoperateProductCatalogId = CorporateProductCatalog.Id
                                    WHERE CorporateProductCatalog.ResourceFamilyId = '0c355800-91fd-4d99-8010-921a42f0ba04'
                                    AND PMol.ProjectMoleculeId = @Id";

                    IEnumerable<PomlVehicle> vehicals;


                    foreach (var r in groupteams)
                    {
                        var list1 = new List<string>();
                        PomlList pomlList = null;
                        var teamsWithPmolDto = new TeamsWithPmolDto();
                        var pmolDatalist = new List<PmolData>();
                        var team = new List<PmolTeamMeber>();
                        var pmolData = new PmolData();
                        var equal = equallist.Any(item => item == r.Key);

                        if (equal == false)
                        {
                            foreach (var a in r)
                            {
                                PmolTeamMeber member;
                                var memberselect =
                                    @"SELECT Id,FullName As Name FROM [dbo].[CabPerson] where Id = @Id";

                                using (var connection =
                                       new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
                                {
                                    member = connection.Query<PmolTeamMeber>(memberselect, new { Id = a.CabPersonId })
                                        .FirstOrDefault();
                                }

                                var m = new PmolTeamMeber();
                                m.Id = member.Id;
                                m.Name = member.Name;
                                team.Add(m);
                                list1.Add(a.CabPersonId);
                            }

                            foreach (var b in groupteams)
                            {
                                var pmolid2 = b.First().ProjectMoleculeId;
                                var list2 = new List<string>();
                                if (b.Key != r.Key)
                                {
                                    foreach (var c in b) list2.Add(c.CabPersonId);

                                    var result = list1.OrderBy(e => e).SequenceEqual(list2.OrderBy(e => e));

                                    if (result)
                                    {
                                        var pmolData1 = new PmolData();
                                        pmolData1.ProjectMoleculeId = b.Key;
                                        using (var connection = new SqlConnection(connectionString))
                                        {
                                            vehicals = connection.Query<PomlVehicle>(vehical, new { Id = b.Key })
                                                .ToList();
                                        }

                                        if (vehicals.Count() > 0) pmolData1.PomlVehical = (List<PomlVehicle>)vehicals;

                                        pmolData1.Id = b.First().Id;
                                        pmolData1.Name = b.First().Name;
                                        pmolData1.ExecutionStartTime = b.First().ExecutionStartTime;
                                        pmolData1.ExecutionEndTime = b.First().ExecutionEndTime;
                                        pmolData1.ExecutionDate = b.First().ExecutionDate;
                                        pmolData1.ProjectSequenceCode = r.First().ProjectSequenceCode;
                                        pmolData1.Title = r.First().Title;
                                        pmolDatalist.Add(pmolData1);
                                        equallist.Add(pmolid2);
                                    }
                                }
                            }

                            pmolData.ProjectMoleculeId = r.Key;
                            using (var connection = new SqlConnection(connectionString))
                            {
                                vehicals = connection.Query<PomlVehicle>(vehical, new { Id = r.Key }).ToList();
                            }

                            if (vehicals.Count() > 0) pmolData.PomlVehical = (List<PomlVehicle>)vehicals;

                            pmolData.Id = r.First().Id;
                            pmolData.Name = r.First().Name;
                            pmolData.ExecutionDate = r.First().ExecutionDate;
                            pmolData.ExecutionStartTime = r.First().ExecutionStartTime;
                            pmolData.ExecutionEndTime = r.First().ExecutionEndTime;
                            pmolData.ProjectSequenceCode = r.First().ProjectSequenceCode;
                            pmolData.Title = r.First().Title;
                            pmolDatalist.Add(pmolData);
                            teamsWithPmolDto.Pmol = pmolDatalist;
                            teamsWithPmolDto.Team = team;
                            teamsWithPmol.Add(teamsWithPmolDto);
                        }
                    }
                }
                catch (Exception ex)
                {
                    var mDatabasesException = new DatabasesException();
                    mDatabasesException.DatabaseName = project.DatabaseName;
                    mDatabasesException.Exception = ex;
                    exceptionLst.Add(mDatabasesException);
                }
        }

        return teamsWithPmol;
    }


    //public async Task<AnalyzeResult> TestVpPo(VPParameter VPParameter)
    //{
    //    var license = new License();
    //    try
    //    {
    //        var endpoint = "https://uprincepdfread.cognitiveservices.azure.com/";
    //        var apiKey = "f3b8e73c4f244de4a079c25ce691b01c";
    //        var credential = new AzureKeyCredential(apiKey);
    //        var client = new DocumentAnalysisClient(new Uri(endpoint), credential);

    //        // Uri fileUri = new Uri("https://raw.githubusercontent.com/Azure-Samples/cognitive-services-REST-api-samples/master/curl/form-recognizer/sample-layout.pdf");

    //        //Uri fileUri = new Uri("https://uprincev4dev.blob.core.windows.net/uprincev4dev/PO%20Documents/2/8/2022%206%3A25%3A29%20AMtestttt.pdf");
    //        var fileUri =
    //            new Uri(
    //                VPParameter.TestVp.Link);


    //        var operation =
    //            await client.StartAnalyzeDocumentFromUriAsync("prebuilt-document", fileUri);

    //        await operation.WaitForCompletionAsync();

    //        var result = operation.Value;

    //        return result;
    //    }
    //    catch (Exception e)
    //    {
    //        throw e;
    //    }
    //}

    public async Task<IEnumerable<AvailableLWorkers>> AvailableTeams(VPParameter VPParameter)
    {
        var cuconnectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            null, VPParameter.TenantProvider);
        var availableLWorkers = new List<AvailableLWorkers>();
        if (VPParameter.ProjectSequenceId != null)
        {
            var vehical =
                @"SELECT VpWH.CPCId AS CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber FROM dbo.VpWH LEFT OUTER JOIN dbo.CorporateProductCatalog ON VpWH.CPCId = CorporateProductCatalog.Id WHERE CorporateProductCatalog.ResourceFamilyId = '0c355800-91fd-4d99-8010-921a42f0ba04' and VpWH.ProjectSequenceCode = @ProjectSequenceCode";

            var cabquery =
                @"SELECT DISTINCT VpHR.PersonId AS CabPersonCompanyId ,CabPersonCompany.PersonId AS Id ,CabPerson.FullName AS Name ,VpHR.ProjectSequenceCode ,HRHeader.SequenceId FROM dbo.AbsenceHeader ,dbo.VpHR INNER JOIN dbo.CabPersonCompany ON VpHR.PersonId = CabPersonCompany.Id LEFT OUTER JOIN dbo.CabPerson ON CabPersonCompany.PersonId = CabPerson.Id INNER JOIN dbo.HRHeader ON VpHR.PersonId = HRHeader.PersonId WHERE VpHR.ProjectSequenceCode = @project";
            var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
                VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

            var endDate = VPParameter.GetTeamDto.EndDate;

            var startDate = VPParameter.GetTeamDto.StartDate;

            for (var date = startDate.Date; date <= endDate.Date; date = date.AddDays(1))
            {
                IEnumerable<PomlVehicle> vehicals;
                IEnumerable<HRList> cablist;
                await using (var connection =
                             new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
                {
                    cablist = connection.Query<HRList>(cabquery,
                        new { lang = VPParameter.Lang, project = VPParameter.ProjectSequenceId }).ToList();

                    foreach (var item in cablist)
                    {
                        var absence =
                            @"SELECT AbsenceHeader.Id FROM dbo.AbsenceHeader where AbsenceHeader.Person = @Id AND @date BETWEEN AbsenceHeader.StartDate AND AbsenceHeader.EndDate";

                        HRList absenceId;

                        absenceId = connection.Query<HRList>(absence, new { Id = item.CabPersonCompanyId, date })
                            .FirstOrDefault();


                        if (absenceId != null) item.Absence = true;
                    }
                }

                var labourquery =
                    @"SELECT PmolTeamRole.CabPersonId ,PMol.ExecutionDate FROM dbo.PmolTeamRole INNER JOIN dbo.PMolPlannedWorkLabour ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id INNER JOIN dbo.PMol ON PMolPlannedWorkLabour.PmolId = PMol.Id WHERE PMol.ExecutionDate = @date AND PmolTeamRole.IsDeleted = 0";

                var tools =
                    @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id WHERE PMol.ExecutionDate = @date AND PMolPlannedWorkTools.IsDeleted = 0";

                IEnumerable<AvailableLabour> labour;
                IEnumerable<PomlVehicle> tool;

                await using (var connection = new SqlConnection(connectionString))
                {
                    labour = connection.Query<AvailableLabour>(labourquery, new { date = date.Date }).ToList();
                    tool = connection.Query<PomlVehicle>(tools, new { date = date.Date }).ToList();
                }

                await using (var connection = new SqlConnection(cuconnectionString))
                {
                    vehicals = connection.Query<PomlVehicle>(vehical,
                            new
                            {
                                lang = VPParameter.Lang,
                                date,
                                ProjectSequenceCode = VPParameter.ProjectSequenceId
                            })
                        .ToList();
                }

                if (tool.Any())
                    foreach (var i in tool)
                        vehicals = vehicals.Where(r => r.CoperateProductCatalogId != i.CoperateProductCatalogId)
                            .ToList();
                if (labour.Any())
                {
                    var groupteams = labour.GroupBy(r => r.ExecutionDate);

                    //Parallel.ForEach(groupteams, item =>
                    foreach (var item in groupteams)
                    {
                        var cabpearsonList = new List<HRList>();
                        var availableLWorker = new AvailableLWorkers();
                        foreach (var b in cablist)
                        {
                            var i = 0;
                            foreach (var c in item)
                            {
                                i = i + 1;
                                if (c.CabPersonId == b.Id && b.Absence == false) break;

                                if (i == item.Count()) cabpearsonList.Add(b);
                            }
                        }

                        availableLWorker.day = date;
                        availableLWorker.Workers = cabpearsonList;
                        availableLWorker.Vehicle = vehicals.ToList();
                        availableLWorkers.Add(availableLWorker);
                    }
                }

                else
                {
                    var availableLWorker = new AvailableLWorkers
                    {
                        day = date,
                        Workers = cablist.ToList(),
                        Vehicle = vehicals.ToList()
                    };
                    availableLWorkers.Add(availableLWorker);
                }
            }
        }

        else
        {
            var cabquery =
                @"SELECT DISTINCT VpHR.PersonId AS CabPersonCompanyId,VpHR.ProjectSequenceCode,CabPersonCompany.PersonId AS Id ,CabPerson.FullName AS Name ,HRHeader.SequenceId FROM dbo.VpHR INNER JOIN dbo.CabPersonCompany ON VpHR.PersonId = CabPersonCompany.Id LEFT OUTER JOIN dbo.CabPerson ON CabPersonCompany.PersonId = CabPerson.Id INNER JOIN dbo.HRHeader ON VpHR.PersonId = HRHeader.PersonId";

            var vehical =
                @"SELECT DISTINCT VpWH.CPCId AS CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber FROM dbo.VpWH LEFT OUTER JOIN dbo.CorporateProductCatalog ON VpWH.CPCId = CorporateProductCatalog.Id WHERE CorporateProductCatalog.ResourceFamilyId = '0c355800-91fd-4d99-8010-921a42f0ba04' ";

            var db = new List<Databases>();

            IEnumerable<PomlVehicle> vehicals;

            await using (var connection = new SqlConnection(cuconnectionString))
            {
                vehicals = connection.Query<PomlVehicle>(vehical, new { lang = VPParameter.Lang }).ToList();
            }

            await using (var dbconnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
            {
                db = dbconnection
                    .Query<Databases>(
                        @"SELECT SequenceCode AS DatabaseName, ProjectConnectionString FROM dbo.ProjectDefinition WHERE IsDeleted = 0;")
                    .ToList();

                var endDate = VPParameter.GetTeamDto.EndDate;
                var startDate = VPParameter.GetTeamDto.StartDate;

                for (var date = startDate.Date; date <= endDate.Date; date = date.AddDays(1))
                {
                    IEnumerable<HRList> cablist;
                    cablist = dbconnection.Query<HRList>(cabquery, new { lang = VPParameter.Lang }).ToList();
                    foreach (var item in cablist)
                    {
                        var absence =
                            @"SELECT AbsenceHeader.Id FROM dbo.AbsenceHeader where AbsenceHeader.Person = @Id AND @date BETWEEN AbsenceHeader.StartDate AND AbsenceHeader.EndDate";

                        HRList absenceId;

                        using (var connection =
                               new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
                        {
                            absenceId = connection.Query<HRList>(absence, new { Id = item.CabPersonCompanyId, date })
                                .FirstOrDefault();
                        }

                        if (absenceId != null) item.Absence = true;
                    }


                    var labourquery =
                        @"SELECT PmolTeamRole.CabPersonId ,PMol.ExecutionDate FROM dbo.PmolTeamRole INNER JOIN dbo.PMolPlannedWorkLabour ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id INNER JOIN dbo.PMol ON PMolPlannedWorkLabour.PmolId = PMol.Id WHERE PMol.ExecutionDate = @date AND PmolTeamRole.IsDeleted = 0 AND PMolPlannedWorkLabour.IsDeleted = 0";

                    var tools =
                        @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id WHERE PMol.ExecutionDate = @date AND PMolPlannedWorkTools.IsDeleted = 0 AND RequiredQuantity != 0";

                    IEnumerable<AvailableLabour> labour = null;
                    IEnumerable<PomlVehicle> tool = null;

                    Parallel.ForEach(db, project =>
                    {
                        try
                        {
                            // var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId, project.DatabaseName, VPParameter.TenantProvider);
                            using var connection = new SqlConnection(project.ProjectConnectionString);
                            labour = connection.Query<AvailableLabour>(labourquery, new { date = date.Date })
                                .ToList();
                            tool = connection.Query<PomlVehicle>(tools, new { date = date.Date }).ToList();
                        }
                        catch (Exception ex)
                        {
                            var mDatabasesException = new DatabasesException
                            {
                                DatabaseName = project.DatabaseName,
                                Exception = ex
                            };
                        }
                    });

                    if (tool.Any())
                        Parallel.ForEach(tool, i =>
                        {
                            vehicals = vehicals.Where(r => r.CoperateProductCatalogId != i.CoperateProductCatalogId)
                                .ToList();
                        });

                    if (labour.Any())
                    {
                        var groupteams = labour.GroupBy(r => r.ExecutionDate);

                        foreach (var a in groupteams)
                        {
                            var cabpearsonList = new List<HRList>();
                            var availableLWorker = new AvailableLWorkers();
                            foreach (var b in cablist)
                            {
                                var i = 0;
                                foreach (var c in a)
                                {
                                    i += 1;
                                    if (c.CabPersonId == b.Id && b.Absence == false) break;

                                    if (i == a.Count()) cabpearsonList.Add(b);
                                }
                            }

                            availableLWorker.day = date;
                            availableLWorker.Workers = cabpearsonList;
                            availableLWorker.Vehicle = vehicals.ToList();
                            availableLWorkers.Add(availableLWorker);
                        }
                    }

                    else
                    {
                        var availableLWorker = new AvailableLWorkers
                        {
                            day = date,
                            Workers = cablist.ToList(),
                            Vehicle = vehicals.ToList()
                        };
                        availableLWorkers.Add(availableLWorker);
                    }
                }
            }
        }

        return availableLWorkers;
    }

    public async Task<PomlUpdateDto> UpdatePMOL(VPParameter VPParameter)
    {
        //var options = new DbContextOptions<ShanukaDbContext>();
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

        if (VPParameter.PomlUpdateDto.CabPersonId != null)
        {
            var query =
                @"SELECT PMolPlannedWorkLabour.Id FROM dbo.PMolPlannedWorkLabour WHERE PMolPlannedWorkLabour.PmolId = @Id";

            var parameter = new { Id = VPParameter.PomlUpdateDto.PmolId };
            PmolPlannedWorkLabour data;
            using (var connection = new SqlConnection(connectionString))
            {
                data = connection.Query<PmolPlannedWorkLabour>(query, parameter).FirstOrDefault();
            }

            var update =
                @"INSERT INTO dbo.PmolTeamRole (Id,CabPersonId,RoleId,RequiredQuantity,ConsumedQuantity,Type,PmolLabourId,IsDeleted) VALUES (@Id,@CabPersonId,@RoleId,@RequiredQuantity,@ConsumedQuantity,@Type,@PmolLabourId,@IsDeleted)";

            var parm = new
            {
                Id = Guid.NewGuid().ToString(), PmolLabourId = data.Id,
                VPParameter.PomlUpdateDto.CabPersonId,
                RoleId = "4837043c-119c-47e1-bbf2-1f32557fdf30", RequiredQuantity = 1, ConsumedQuantity = 0,
                Type = "Planned", IsDeleted = false
            };

            using (var connection = new SqlConnection(connectionString))
            {
                await connection.ExecuteAsync(update, parm);
            }
        }

        if (VPParameter.PomlUpdateDto.CoperateProductCatalogId != null)
        {
            var update =
                @"INSERT INTO dbo.PMolPlannedWorkTools (Id,CoperateProductCatalogId,RequiredQuantity,ConsumedQuantity,PmolId,Type,IsDeleted) VALUES (@Id,@CoperateProductCatalogId,@RequiredQuantity,@ConsumedQuantity,@PmolId,@Type,@IsDeleted)";

            var parm = new
            {
                Id = Guid.NewGuid().ToString(),
                VPParameter.PomlUpdateDto.CoperateProductCatalogId,
                RequiredQuantity = 1, ConsumedQuantity = 0,
                VPParameter.PomlUpdateDto.PmolId,
                Type = "Planned", IsDeleted = false
            };

            using (var connection = new SqlConnection(connectionString))
            {
                await connection.ExecuteAsync(update, parm);
            }
        }

        return VPParameter.PomlUpdateDto;
    }

    public async Task<IEnumerable<VpWHTaxonomyListDto>> GetVpWH(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);


        var query =
            @"SELECT WHTaxonomy.Id,WHTaxonomy.WareHouseId,WHTaxonomy.ParentId,WHTaxonomy.WHTaxonomyLevelId,WHTaxonomy.Title,WHTaxonomy.StartDate,WHTaxonomy.EndDate ,WHTaxonomyLevel.DisplayOrder,WHTaxonomyLevel.IsChildren FROM dbo.WHTaxonomy LEFT OUTER JOIN dbo.WHTaxonomyLevel ON WHTaxonomy.WHTaxonomyLevelId = WHTaxonomyLevel.LevelId WHERE (WHTaxonomyLevel.LanguageCode = @lang OR WHTaxonomy.WHTaxonomyLevelId IS NULL)";
        var stockQuery =
            @"SELECT StockHeader.Id ,StockHeader.CPCId AS CPCId ,StockHeader.WareHouseTaxonomyId AS ParentId ,StockHeader.TypeId AS ResourceTypeId ,CorporateProductCatalog.Title AS Title ,WHTaxonomy.WHTaxonomyLevelId ,WHTaxonomy.WareHouseId FROM dbo.StockHeader LEFT OUTER JOIN dbo.CorporateProductCatalog ON StockHeader.CPCId = CorporateProductCatalog.Id LEFT OUTER JOIN dbo.WHTaxonomy ON StockHeader.WareHouseTaxonomyId = WHTaxonomy.Id LEFT OUTER JOIN dbo.CpcResourceFamilyLocalizedData ON CpcResourceFamilyLocalizedData.CpcResourceFamilyId = CorporateProductCatalog.ResourceFamilyId WHERE StockHeader.TypeId = 'c46c3a26-39a5-42cc-n9wn-89655304eh6' AND CpcResourceFamilyId = '0c355800-91fd-4d99-8010-921a42f0ba04' AND CpcResourceFamilyLocalizedData.LanguageCode = @lang";

        var wHQuery = "SELECT  VpWH.*, CONCAT(StartDate,' - ',EndDate) AS Title FROM VpWH";

        var sb = new StringBuilder(query);

        if (VPParameter.WHTaxonomyFilter.WareHouseId != null)
            sb.Append(" AND WHTaxonomy.WareHouseId = '" + VPParameter.WHTaxonomyFilter.WareHouseId + "'");

        var parameters = new { lang = VPParameter.Lang };
        List<VpWHTaxonomyListDto> data;
        List<VpWHTaxonomyListDto> whList;
        using (var connection = new SqlConnection(connectionString))
        {
            await connection.OpenAsync();

            data = connection.Query<VpWHTaxonomyListDto>(sb.ToString(), parameters).ToList();
            data.AddRange(connection.Query<VpWHTaxonomyListDto>(stockQuery, new { lang = VPParameter.Lang }).ToList());
            data.AddRange(connection.Query<VpWHTaxonomyListDto>(wHQuery).ToList());

            whList = connection.Query<VpWHTaxonomyListDto>(wHQuery).ToList();

            var result = whList.GroupBy(r => r.ParentId);
            var percentageResult = whList.GroupBy(r => r.CPCId);

            foreach (var i in result)
            {
                if (i.Key != null)
                {
                    DateTime end;
                    DateTime start;
                    end = (DateTime)i.Max(t => t.EndDate);
                    start = (DateTime)i.Min(t => t.StartDate);

                    var hh = new List<double>();


                    var whData = data.Where(k => k.Id == i.Key).FirstOrDefault();

                    if (whData != null)
                    {
                        whData.StartDate = start;
                        whData.EndDate = end;
                    }
                }
            }

            foreach (var j in percentageResult)
                if (j.Key != null)
                {
                    DateTime end;
                    DateTime start;
                    end = (DateTime)j.Max(t => t.EndDate);
                    start = (DateTime)j.Min(t => t.StartDate);

                    var hh = new List<double>();

                    foreach (var k in j)
                    {
                        DateTime kEndDate;
                        DateTime kStartDate;
                        kEndDate = (DateTime)k.EndDate;
                        kStartDate = (DateTime)k.StartDate;
                        var ff = (kEndDate - kStartDate).TotalDays;

                        hh.Add(ff);
                    }

                    var bb = hh.Sum();

                    var precentage = bb / (end - start).TotalDays * 100;

                    var whData = data.Where(k =>
                        k.CPCId == j.Key && k.ResourceTypeId == "c46c3a26-39a5-42cc-n9wn-89655304eh6");

                    if (whData != null)
                        foreach (var t in whData)
                            t.Percentage = precentage;
                }
        }

        return data;
    }

    public async Task<IEnumerable<VpWHTaxonomyListDto>> GetVpWHTool(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);


        var query =
            @"SELECT WHTaxonomy.Id,WHTaxonomy.WareHouseId,WHTaxonomy.ParentId,WHTaxonomy.WHTaxonomyLevelId,WHTaxonomy.Title,WHTaxonomy.StartDate,WHTaxonomy.EndDate ,WHTaxonomyLevel.DisplayOrder,WHTaxonomyLevel.IsChildren FROM dbo.WHTaxonomy LEFT OUTER JOIN dbo.WHTaxonomyLevel ON WHTaxonomy.WHTaxonomyLevelId = WHTaxonomyLevel.LevelId WHERE (WHTaxonomyLevel.LanguageCode = @lang OR WHTaxonomy.WHTaxonomyLevelId IS NULL)";
        var stockQuery =
            @"SELECT StockHeader.Id ,StockHeader.CPCId AS CPCId ,StockHeader.WareHouseTaxonomyId AS ParentId ,StockHeader.TypeId AS ResourceTypeId ,CorporateProductCatalog.Title AS Title ,WHTaxonomy.WHTaxonomyLevelId ,WHTaxonomy.WareHouseId FROM dbo.StockHeader LEFT OUTER JOIN dbo.CorporateProductCatalog ON StockHeader.CPCId = CorporateProductCatalog.Id LEFT OUTER JOIN dbo.WHTaxonomy ON StockHeader.WareHouseTaxonomyId = WHTaxonomy.Id LEFT OUTER JOIN dbo.CpcResourceFamilyLocalizedData ON CpcResourceFamilyLocalizedData.CpcResourceFamilyId = CorporateProductCatalog.ResourceFamilyId WHERE StockHeader.TypeId = 'c46c3a26-39a5-42cc-n9wn-89655304eh6' AND CpcResourceFamilyId = '58ed2b7d-471a-496b-93bb-450d0c71d029' AND CpcResourceFamilyLocalizedData.LanguageCode = @lang";

        var wHQuery = "SELECT  VpWH.*, CONCAT(StartDate,' - ',EndDate) AS Title FROM VpWH";

        var sb = new StringBuilder(query);

        if (VPParameter.WHTaxonomyFilter.WareHouseId != null)
            sb.Append(" AND WHTaxonomy.WareHouseId = '" + VPParameter.WHTaxonomyFilter.WareHouseId + "'");

        var parameters = new { lang = VPParameter.Lang };
        List<VpWHTaxonomyListDto> data;
        List<VpWHTaxonomyListDto> whList;
        using (var connection = new SqlConnection(connectionString))
        {
            await connection.OpenAsync();

            data = connection.Query<VpWHTaxonomyListDto>(sb.ToString(), parameters).ToList();
            data.AddRange(connection.Query<VpWHTaxonomyListDto>(stockQuery, new { lang = VPParameter.Lang }).ToList());
            data.AddRange(connection.Query<VpWHTaxonomyListDto>(wHQuery).ToList());

            whList = connection.Query<VpWHTaxonomyListDto>(wHQuery).ToList();

            var result = whList.GroupBy(r => r.ParentId);
            var percentageResult = whList.GroupBy(r => r.CPCId);

            foreach (var i in result)
            {
                if (i.Key != null)
                {
                    DateTime end;
                    DateTime start;
                    end = (DateTime)i.Max(t => t.EndDate);
                    start = (DateTime)i.Min(t => t.StartDate);

                    var hh = new List<double>();


                    var whData = data.Where(k => k.Id == i.Key).FirstOrDefault();

                    if (whData != null)
                    {
                        whData.StartDate = start;
                        whData.EndDate = end;
                    }
                }
                
            }

            foreach (var j in percentageResult)
                if (j.Key != null)
                {
                    DateTime end;
                    DateTime start;
                    end = (DateTime)j.Max(t => t.EndDate);
                    start = (DateTime)j.Min(t => t.StartDate);

                    var hh = new List<double>();

                    foreach (var k in j)
                    {
                        DateTime kEndDate;
                        DateTime kStartDate;
                        kEndDate = (DateTime)k.EndDate;
                        kStartDate = (DateTime)k.StartDate;
                        var ff = (kEndDate - kStartDate).TotalDays;

                        hh.Add(ff);
                    }

                    var bb = hh.Sum();

                    var precentage = bb / (end - start).TotalDays * 100;

                    var whData = data.Where(k =>
                        k.CPCId == j.Key && k.ResourceTypeId == "c46c3a26-39a5-42cc-n9wn-89655304eh6");

                    if (whData != null)
                        foreach (var t in whData)
                            t.Percentage = precentage;
                }
        }

        return data;
    }

    public async Task<List<VpOrganizationTaxonomyList>> UpdatePersonDate(VPParameter VPParameter)
    {
        var cuConnectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            null, VPParameter.TenantProvider);


        var query =
            @"UPDATE dbo.OrganizationTaxonomy SET StartDate = @StartDate, EndDate = @EndDate WHERE PersonId = @PersonId ";
        var query2 = @"UPDATE dbo.POLabourTeam SET StartDate = @StartDate, EndDate = @EndDate WHERE Id = @Id ";
        var insertQuery =
            "INSERT INTO VpHR VALUES (@Id, @PoId, @ProjectSequenceCode, @PersonId, @CPCId, @ParentId, @StartDate, @EndDate)";

        var data = new List<VpOrganizationTaxonomyList>();


        if (VPParameter.UpdatePersonsDate.PersonId.FirstOrDefault() != null)
            foreach (var person in VPParameter.UpdatePersonsDate.PersonId)
            {
                var parameters = new VpOrganizationTaxonomyList
                {
                    PersonId = person.PersonId,
                    Id = person.Id,
                    PoId = person.POId,
                    ProjectSequenceCode = person.ProjectSequenceCode,
                    CPCId = person.CPCId,
                    ParentId = person.ParentId,
                    StartDate = VPParameter.UpdatePersonsDate.StartDate,
                    EndDate = VPParameter.UpdatePersonsDate.EndDate,
                    Title = VPParameter.UpdatePersonsDate.StartDate + "-" + VPParameter.UpdatePersonsDate.EndDate
                };

                if (person.PersonId == null) throw new Exception("personId is null");

                using (var connection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
                {
                    await connection.ExecuteAsync(query, parameters);
                    await connection.ExecuteAsync(insertQuery, parameters);
                }

                using (var connection = new SqlConnection(cuConnectionString))
                {
                    await connection.ExecuteAsync(query2, parameters);
                }

                data.Add(parameters);
            }


        return data;
    }

    public async Task<string> UpdateWHTaxonomyDate(VPParameter VPParameter)
    {
        var cuConnectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            null, VPParameter.TenantProvider);


        var query = @"UPDATE dbo.WHTaxonomy SET StartDate = @StartDate, EndDate = @EndDate WHERE Id = @Id ";
        var query2 = @"UPDATE dbo.POToolPool SET StartDate = @StartDate, EndDate = @EndDate WHERE Id = @Id ";
        var insertQuery =
            "INSERT INTO VpWH VALUES (@Id, @PoId, @ProjectSequenceCode, @CPCId, @ParentId, @StartDate, @EndDate)";


        if (VPParameter.UpdatePersonsDate.TaxonomyId != null)
            foreach (var taxonomy in VPParameter.UpdatePersonsDate.TaxonomyId)
            {
                var parameters = new
                {
                    taxonomy.Id,
                    taxonomy.PoId,
                    taxonomy.ProjectSequenceCode,
                    taxonomy.CPCId,
                    taxonomy.ParentId,
                    VPParameter.UpdatePersonsDate.StartDate,
                    VPParameter.UpdatePersonsDate.EndDate
                };

                using (var connection = new SqlConnection(cuConnectionString))
                {
                    await connection.ExecuteAsync(query, parameters);
                    await connection.ExecuteAsync(query2, parameters);

                    await connection.ExecuteAsync(insertQuery, parameters);
                }
            }


        return null;
    }

    public async Task<GetHRByIdDto> VpHRByPersonId(VPParameter VPParameter)
    {
        // var options = new DbContextOptions<ApplicationDbContext>();
        // var applicationDbContext = new ApplicationDbContext(options, VPParameter.TenantProvider);

        var cuconnectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            null, VPParameter.TenantProvider);

        try
        {
            GetHRByIdDto data;
            HRHistoryDto history;
            IEnumerable<GetWorkScheduleDto> workSchedule;

            var sql =
                @"SELECT CabPerson.FullName AS PersonName,CabPerson.Id As CabPersonId,HRHeader.* FROM HRHeader
                                 LEFT OUTER JOIN dbo.CabPersonCompany
                                  ON HRHeader.PersonId = CabPersonCompany.Id
                                LEFT OUTER JOIN dbo.CabPerson
                                  ON CabPersonCompany.PersonId = CabPerson.Id WHERE HRHeader.PersonId = @Id";
            using (var connection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
            {
                data = connection.Query<GetHRByIdDto>(sql, new { VPParameter.Id }).FirstOrDefault();
            }

            if (data != null)
            {
                using (var connection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
                {
                    history = connection
                        .Query<HRHistoryDto>(
                            "SELECT[CreatedDate],[CreatedBy],[ModifiedBy],[ModifiedDate] FROM[dbo].[HRHeader] where [PersonId] = @Id",
                            new { VPParameter.Id }).FirstOrDefault();
                    workSchedule = connection.Query<GetWorkScheduleDto>(
                        "SELECT * FROM WorkSchedule WHERE HRHeaderId = @HRHeaderId", new { HRHeaderId = data.Id });
                }

                using (var connection = new SqlConnection(cuconnectionString))
                {
                    data.CpcLabourItemTitle = connection
                        .Query<string>("SELECT Title FROM dbo.CorporateProductCatalog WHERE Id = @CPCId",
                            new { CPCId = data.CpcLabourItemId }).FirstOrDefault();
                }

                var ModifiedByUserQuery =
                    @"SELECT CONCAT(ApplicationUser.FirstName,' ',ApplicationUser.LastName) AS [ModifiedBy] FROM ApplicationUser WHERE ApplicationUser.Oid = @oid";

                using (var connection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
                {
                    var ModifiedByParameter = new { oid = history.ModifiedBy };
                    history.ModifiedBy = connection.Query<string>(ModifiedByUserQuery, ModifiedByParameter)
                        .FirstOrDefault();

                    var CreatByParam = new { oid = history.CreatedBy };
                    history.CreatedBy =
                        connection.Query<string>(ModifiedByUserQuery, CreatByParam).FirstOrDefault();
                }

                data.History = history;
                data.WorkSchedule = workSchedule;
            }

            return data;
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    public async Task<List<PbsForVPDto>> GetPbsForVP(VPParameter VPParameter, bool isMyEnv)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);
        await using var projectconnection = new SqlConnection(connectionString);

        var cuConnectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            null, VPParameter.TenantProvider);
        await using var cuConnection = new SqlConnection(cuConnectionString);

        try
        {
            if (VPParameter.PbsForVPDtoFilter.Type.FirstOrDefault() == "4")
            {
                var pbsData = await GetPbsForVPWeek(VPParameter, isMyEnv);

                return pbsData;
            }
            else
            {
                string query = null;
                // var all =
                //     @"SELECT PbsProduct.Id,PbsProduct.Title,PbsProduct.ParentId,'PBS' AS Type,PbsProduct.StartDate,PbsProduct.EndDate,PbsProduct.ProductId AS PBSSequenceId,PbsProduct.PbsProductStatusId As PbsStatus , t4.TreeIndex  FROM dbo.PbsProduct LEFT OUTER JOIN PbsTreeIndex t4 ON PbsProduct.ProductId = t4.PbsProductId where NodeType = 'P' AND IsDeleted = '0' 
                //                 ; SELECT
                //                   Bor.Id
                //                  ,Bor.Title
                //                  ,Bor.PbsProductId AS ParentId
                //                  ,'BOR' AS Type
                //                  ,Bor.ItemId AS BORSequenceId
                //                  ,Bor.BorStatusId As BorStatus
                //                  ,PbsProduct.ProductId AS PBSSequenceId
                //                  ,Bor.StartDate
                //                  ,Bor.EndDate
                //                 FROM dbo.Bor
                //                 LEFT OUTER JOIN dbo.PbsProduct
                //                   ON Bor.PbsProductId = PbsProduct.Id
                //                 WHERE Bor.PbsProductId IS NOT NULL;
                //                SELECT
                //                   PMol.Id
                //                  ,PMol.Title
                //                  ,PMol.BorId AS ParentId
                //                  ,'PMOL' AS Type
                //                  ,PMol.ExecutionDate AS StartDate
                //                  ,PMol.ExecutionDate AS EndDate
                //                  ,PMol.ProjectMoleculeId AS PMOLSequenceId
                //                  ,PMol.StatusId AS PmolStatus
                //                  ,Bor.ItemId AS BORSequenceId
                //                  ,PbsProduct.ProductId AS PBSSequenceId
                //                 FROM dbo.PMol
                //                 LEFT OUTER JOIN dbo.Bor
                //                   ON PMol.BorId = Bor.Id
                //                 LEFT OUTER JOIN dbo.PbsProduct
                //                   ON Bor.PbsProductId = PbsProduct.Id
                //                 WHERE PMol.BorId IS NOT NULL;
                //                 SELECT
                //                   MilestoneHeader.SequenceId AS MilestoneSequenceId
                //                  ,MilestoneHeader.Title
                //                  ,MilestoneHeader.ExpectedStartDate AS StartDate
                //                  ,MilestoneHeader.ExpectedEndDate AS EndDate
                //                  ,MilestoneHeader.Id
                //                  ,'Milestone' AS Type
                //                 FROM dbo.MilestoneHeader";
                
                var all = "GetPbsForVPAll";

                // var pbs =
                //     @"SELECT PbsProduct.Id,PbsProduct.Title,PbsProduct.ParentId,'PBS' AS Type,PbsProduct.StartDate,PbsProduct.EndDate,PbsProduct.ProductId AS PBSSequenceId,PbsProduct.PbsProductStatusId As PbsStatus , t4.TreeIndex  FROM dbo.PbsProduct LEFT OUTER JOIN PbsTreeIndex t4 ON PbsProduct.ProductId = t4.PbsProductId where NodeType = 'P' AND IsDeleted = '0'; 
                //                 SELECT
                //                   MilestoneHeader.SequenceId AS MilestoneSequenceId
                //                  ,MilestoneHeader.Title
                //                  ,MilestoneHeader.ExpectedStartDate AS StartDate
                //                  ,MilestoneHeader.ExpectedEndDate AS EndDate
                //                  ,MilestoneHeader.Id
                //                  ,'Milestone' AS Type
                //                 FROM dbo.MilestoneHeader";
                
                var pbs = "GetPbsForVPpbs";

                // var bor = @" SELECT
                //                   Bor.Id
                //                  ,Bor.Title
                //                  ,Null AS ParentId
                //                  ,'BOR' AS Type
                //                  ,Bor.ItemId AS BORSequenceId
                //                  ,PbsProduct.ProductId AS PBSSequenceId
                //                  ,Bor.StartDate
                //                  ,Bor.EndDate
                //                  ,Bor.BorStatusId As BorStatus
                //                 FROM dbo.Bor
                //                 LEFT OUTER JOIN dbo.PbsProduct
                //                   ON Bor.PbsProductId = PbsProduct.Id
                //                 WHERE Bor.PbsProductId IS NOT NULL;
                //                   SELECT
                //                   MilestoneHeader.SequenceId AS MilestoneSequenceId
                //                  ,MilestoneHeader.Title
                //                  ,MilestoneHeader.ExpectedStartDate AS StartDate
                //                  ,MilestoneHeader.ExpectedEndDate AS EndDate
                //                  ,MilestoneHeader.Id
                //                  ,'Milestone' AS Type
                //                 FROM dbo.MilestoneHeader";
                var bor = "GetPbsForVPbor";
                // var pmol = @"SELECT
                //                   PMol.Id
                //                  ,PMol.Title
                //                  ,Null AS ParentId
                //                  ,'PMOL' AS Type
                //                  ,PMol.ExecutionDate AS StartDate
                //                  ,PMol.ExecutionDate AS EndDate
                //                  ,PMol.ProjectMoleculeId AS PMOLSequenceId
                //                  ,PMol.StatusId AS PmolStatus
                //                  ,Bor.ItemId AS BORSequenceId
                //                  ,PbsProduct.ProductId AS PBSSequenceId
                //                 FROM dbo.PMol
                //                 LEFT OUTER JOIN dbo.Bor
                //                   ON PMol.BorId = Bor.Id
                //                 LEFT OUTER JOIN dbo.PbsProduct
                //                   ON Bor.PbsProductId = PbsProduct.Id
                //                 WHERE PMol.BorId IS NOT NULL;
                //                 SELECT
                //                   MilestoneHeader.SequenceId AS MilestoneSequenceId
                //                  ,MilestoneHeader.Title
                //                  ,MilestoneHeader.ExpectedStartDate AS StartDate
                //                  ,MilestoneHeader.ExpectedEndDate AS EndDate
                //                  ,MilestoneHeader.Id
                //                  ,'Milestone' AS Type
                //                 FROM dbo.MilestoneHeader";
                var pmol = "GetPbsForVPpmol";
                List<PbsForVPDto> data = null;
                List<PbsForVPDto> data1 = null;

                if (VPParameter.PbsForVPDtoFilter.Type.FirstOrDefault() == "0" ||
                    VPParameter.PbsForVPDtoFilter.Type.FirstOrDefault() == null)
                    using (var dbConnection = new SqlConnection(connectionString))
                    {
                        using (var multi = await dbConnection.QueryMultipleAsync(all, commandType: CommandType.StoredProcedure))
                        {
                            data = multi.Read<PbsForVPDto>().DistinctBy(x => x.PBSSequenceId).ToList();

                            data.AddRange(multi.Read<PbsForVPDto>().ToList());
                            data.AddRange(multi.Read<PbsForVPDto>().ToList());
                            data.AddRange(multi.Read<PbsForVPDto>().ToList());
                        }
                    }

                if (VPParameter.PbsForVPDtoFilter.Type.FirstOrDefault() == "1")
                    using (var dbConnection = new SqlConnection(connectionString))
                    {
                        using (var multi = await dbConnection.QueryMultipleAsync(pbs, commandType: CommandType.StoredProcedure))
                        {
                            data = multi.Read<PbsForVPDto>().DistinctBy(x => x.PBSSequenceId).ToList();
                            data.AddRange(multi.Read<PbsForVPDto>().ToList());
                        }
                    }

                if (VPParameter.PbsForVPDtoFilter.Type.FirstOrDefault() == "2")
                    using (var dbConnection = new SqlConnection(connectionString))
                    {
                        using (var multi = await dbConnection.QueryMultipleAsync(bor, commandType:CommandType.StoredProcedure))
                        {
                            data = multi.Read<PbsForVPDto>().ToList();
                            data.AddRange(multi.Read<PbsForVPDto>().ToList());
                        }
                    }

                if (VPParameter.PbsForVPDtoFilter.Type.FirstOrDefault() == "3")
                    using (var dbConnection = new SqlConnection(connectionString))
                    {
                        using (var multi = await dbConnection.QueryMultipleAsync(pmol, commandType:CommandType.StoredProcedure))
                        {
                            data = multi.Read<PbsForVPDto>().ToList();
                            data.AddRange(multi.Read<PbsForVPDto>().ToList());
                        }
                    }

           //      var labour = @"SELECT
           //                       PmolTeamRole.Id AS Id
           //                       ,'Labour' AS Title
           //                       ,PMolPlannedWorkLabour.Id AS ParentId
           //                       ,'Labour' AS Type
           //                       ,'CPCId' AS CPCId
           //                       ,PmolTeamRole.CabPersonId
           //                      FROM dbo.PMolPlannedWorkLabour
           //                      INNER JOIN dbo.PMol
           //                        ON PMolPlannedWorkLabour.PmolId = PMol.Id
           //                      INNER JOIN dbo.PmolTeamRole
           //                        ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id
           //                      WHERE PMolPlannedWorkLabour.IsDeleted = 0
           //                      AND PmolTeamRole.CabPersonId IS NOT NULL
           //                      AND dbo.PMolPlannedWorkLabour.PmolId IS NOT NULL
           //                      AND PMol.IsDeleted = '0'
           //                      AND PmolTeamRole.IsDeleted = '0'
           //                      GROUP BY PMol.ProjectMoleculeId
           //                              ,PmolTeamRole.Id
           //                              ,PmolTeamRole.CabPersonId
           //                              ,PMol.Name
           //                              ,PMolPlannedWorkLabour.Id
           //                              ,PMol.ExecutionEndTime
           //                              ,PMol.ExecutionStartTime
           //                              ,PMol.ExecutionDate
           //                              ,PMol.Title
           //                              ,PMol.ProjectSequenceCode
           //                               union
           //                              SELECT
           //                                PMolPlannedWorkTools.Id
           //                               ,CorporateProductCatalog.Title
           //                               ,PMol.Id AS ParentId
           //                               ,'Tools' AS Type
										 // ,PMolPlannedWorkTools.CoperateProductCatalogId AS CPCId
           //                               ,'CabPersonId' as CabPersonId
           //                              FROM dbo.PMolPlannedWorkTools
           //                              LEFT OUTER JOIN dbo.PMol        
           //                                ON PMolPlannedWorkTools.PmolId = PMol.Id
           //                              LEFT OUTER JOIN dbo.CorporateProductCatalog
           //                                ON PMolPlannedWorkTools.CoperateProductCatalogId = CorporateProductCatalog.Id
           //                                where PMolPlannedWorkTools.IsDeleted = 0
           //                                  union
										 //  SELECT
           //                                PMolPlannedWorkLabour.Id
           //                               ,CorporateProductCatalog.Title
           //                               ,PMol.Id AS ParentId
           //                               ,'Labours' AS Type
           //                               ,PMolPlannedWorkLabour.CoperateProductCatalogId AS CPCId
           //                               ,'CabPersonId' as CabPersonId
           //                              FROM dbo.PMolPlannedWorkLabour
           //                              LEFT OUTER JOIN dbo.PMol
           //                                ON PMolPlannedWorkLabour.PmolId = PMol.Id
           //                              LEFT OUTER JOIN dbo.CorporateProductCatalog
           //                                ON PMolPlannedWorkLabour.CoperateProductCatalogId = CorporateProductCatalog.Id
           //                              WHERE PMolPlannedWorkLabour.IsDeleted = '0'";
                var labour = "GetPbsForVPlabour";
                var pbsData = new List<PbsForVPDto>();

                using (var dbConnection = new SqlConnection(connectionString))
                {
                    var labours = await dbConnection.QueryAsync<PbsForVPDto>(labour, commandType:CommandType.StoredProcedure);

                    foreach (var i in data)
                    {
                        if (i.Type == "PBS")
                        {
                            var dataadd = new PbsForVPDto();
                            dataadd.Id = i.Id;
                            dataadd.Title = i.Title;
                            dataadd.Type = i.Type;
                            dataadd.PBSSequenceId = i.PBSSequenceId;
                            dataadd.PbsStatus = i.PbsStatus;
                            dataadd.TreeIndex = i.TreeIndex;
                            if (i.StartDate == null && i.EndDate == null)
                            {
                                dataadd.StartDate = DateTime.UtcNow;
                                dataadd.EndDate = DateTime.UtcNow.AddDays(+1);
                            }

                            else if (i.StartDate != null && i.EndDate == null)
                            {
                                dataadd.StartDate = i.StartDate;
                                dataadd.EndDate = i.StartDate;
                            }
                            else
                            {
                                if (i.StartDate == i.EndDate)
                                {
                                    dataadd.StartDate = i.StartDate;
                                    dataadd.EndDate = i.EndDate.Value.AddDays(+1);
                                }
                                else
                                {
                                    dataadd.StartDate = i.StartDate;
                                    dataadd.EndDate = i.EndDate;
                                }
                            }

                            dataadd.PBSSequenceId = i.PBSSequenceId;
                            if (i.ParentId != null)
                            {
                                if (VPParameter.PbsForVPDtoFilter.Type.FirstOrDefault() == "0" ||
                                    VPParameter.PbsForVPDtoFilter.Type.FirstOrDefault() == "1")
                                    dataadd.ParentId = projectconnection
                                        .Query<string>("SELECT Id  FROM PbsProduct WHERE ProductId = @ProductId ",
                                            new
                                            {
                                                ProductId = i.ParentId, VPParameter.PbsForVPDtoFilter.StartDate,
                                                VPParameter.PbsForVPDtoFilter.EndDate
                                            }).FirstOrDefault();
                            }
                            else if (isMyEnv)
                            {
                                dataadd.ParentId = VPParameter.ProjectSequenceId;
                            }

                            dataadd.Cu = VPParameter.ContractingUnitSequenceId;
                            dataadd.Project = VPParameter.ProjectSequenceId;
                            pbsData.Add(dataadd);
                        }

                        if (i.Type == "BOR")
                        {
                            var dataadd = new PbsForVPDto();
                            dataadd.Id = i.Id;
                            dataadd.Title = i.Title;
                            dataadd.ParentId = i.ParentId;
                            dataadd.Type = i.Type;
                            dataadd.BorStatus = i.BorStatus;
                            if (i.StartDate == null)
                            {
                                dataadd.StartDate = DateTime.UtcNow;
                                dataadd.EndDate = DateTime.UtcNow.AddDays(+1);
                            }
                            else if (i.StartDate != null && i.EndDate == null)
                            {
                                dataadd.StartDate = i.StartDate;
                                dataadd.EndDate = i.StartDate.Value.AddDays(+1);
                            }
                            else
                            {
                                if (i.StartDate == i.EndDate)
                                {
                                    dataadd.StartDate = i.StartDate;
                                    dataadd.EndDate = i.EndDate.Value.AddDays(+1);
                                }
                                else
                                {
                                    dataadd.StartDate = i.StartDate;
                                    dataadd.EndDate = i.EndDate;
                                }
                            }

                            dataadd.BORSequenceId = i.BORSequenceId;
                            dataadd.PBSSequenceId = i.PBSSequenceId;
                            var used = projectconnection
                                .Query<string>("SELECT PurchesOrderId FROM POResources WHERE BorId = @borId",
                                    new { borId = i.Id });
                            dataadd.IsUsed = used.Any();

                            if (!used.Any())
                            {
                                dataadd.OrderStatus = "0"; //not requested 
                            }
                            else
                            {
                                var approved =
                                    projectconnection.Query<string>("SELECT POStatusId FROM POHeader where Id = @Id",
                                        new { Id = used.FirstOrDefault() }).FirstOrDefault();
                                if (approved == "7bcb4e8d-8e8c-487d-8170-6b91c89fc3da")
                                {
                                    dataadd.OrderStatus = "2"; //po is Approved 
                                }
                                else
                                {
                                    var isSend = cuConnection
                                        .Query<string>("SELECT SequenceId FROM POHeader where Id = @Id",
                                            new { Id = used.FirstOrDefault() }).Any();

                                    if (isSend)
                                        dataadd.OrderStatus = "1"; //po is sended to cu 
                                    else
                                        dataadd.OrderStatus = "0"; //po is not sended to cu 
                                }
                            }

                            var borResources = projectconnection.Query<BorMaterial>(
                                @"SELECT * FROM BorMaterial WHERE BorProductId = @borId UNION SELECT * FROM BorConsumable  WHERE BorProductId = @borId  UNION SELECT * FROM BorTools  WHERE BorProductId = @borId",
                                new { borId = i.Id });

                            if (borResources.Count(x => x.Warf == 0) == borResources.Count())
                                dataadd.IsWarfAvailable = "0"; // warf not available
                            else if (borResources.Count(x => x.Warf == 0) == 0)
                                dataadd.IsWarfAvailable = "2"; //warf fully available
                            else
                                dataadd.IsWarfAvailable = "1"; // warf particialy  available
                            dataadd.Cu = VPParameter.ContractingUnitSequenceId;
                            dataadd.Project = VPParameter.ProjectSequenceId;
                            pbsData.Add(dataadd);
                        }

                        if (i.Type == "Milestone")
                        {
                            var dataadd = new PbsForVPDto();
                            dataadd.Id = i.Id;
                            dataadd.Title = i.Title;
                            dataadd.Type = i.Type;
                            if (i.StartDate == null)
                            {
                                dataadd.StartDate = DateTime.UtcNow;
                                dataadd.EndDate = DateTime.UtcNow.AddDays(+1);
                            }
                            else
                            {
                                if (i.StartDate == i.EndDate)
                                {
                                    dataadd.StartDate = i.StartDate;
                                    dataadd.EndDate = i.EndDate.Value.AddDays(+1);
                                }
                                else
                                {
                                    dataadd.StartDate = i.StartDate;
                                    dataadd.EndDate = i.EndDate;
                                }
                            }

                            dataadd.MilestoneSequenceId = i.MilestoneSequenceId;
                            pbsData.Add(dataadd);
                        }

                        if (i.Type == "PMOL")
                        {
                            var dataadd = new PbsForVPDto();
                            dataadd.Id = i.Id;
                            dataadd.Title = i.Title;
                            dataadd.ParentId = i.ParentId;
                            dataadd.Type = i.Type;
                            dataadd.PmolStatus = i.PmolStatus;
                            if (i.StartDate == null)
                            {
                                dataadd.StartDate = DateTime.UtcNow;
                                dataadd.EndDate = DateTime.UtcNow;
                            }
                            else
                            {
                                dataadd.StartDate = i.StartDate;
                                dataadd.EndDate = i.EndDate;
                            }

                            dataadd.PMOLSequenceId = i.PMOLSequenceId;
                            dataadd.BORSequenceId = i.BORSequenceId;
                            dataadd.PBSSequenceId = i.PBSSequenceId;
                            dataadd.Cu = VPParameter.ContractingUnitSequenceId;
                            dataadd.Project = VPParameter.ProjectSequenceId;
                            pbsData.Add(dataadd);

                            List<PbsForVPDto> pmollabouritem;

                            pmollabouritem = labours.Where(lab => lab.Type == "Labours" && lab.ParentId == i.Id)
                                .ToList();

                            if (pmollabouritem.Any())
                            {
                                var lbId = Guid.NewGuid().ToString();
                                var pmolLabour = new PbsForVPDto();
                                pmolLabour.Id = lbId;
                                pmolLabour.Title = "Labours";
                                pmolLabour.ParentId = i.Id;
                                pmolLabour.Type = "Labours";
                                pmolLabour.StartDate = dataadd.StartDate;
                                pmolLabour.EndDate = dataadd.EndDate;
                                pmolLabour.PMOLSequenceId = i.PMOLSequenceId;
                                pmolLabour.PBSSequenceId = i.PBSSequenceId;
                                pmolLabour.BORSequenceId = i.BORSequenceId;
                                pmolLabour.Cu = VPParameter.ContractingUnitSequenceId;
                                pmolLabour.Project = VPParameter.ProjectSequenceId;
                                pbsData.Add(pmolLabour);

                                foreach (var n in pmollabouritem)
                                {
                                    var pLabourItem = new PbsForVPDto();
                                    pLabourItem.Id = n.Id;
                                    pLabourItem.Title = n.Title;
                                    pLabourItem.ParentId = lbId;
                                    pLabourItem.Type = "LabourItem";
                                    pLabourItem.StartDate = dataadd.StartDate;
                                    pLabourItem.EndDate = dataadd.EndDate;
                                    pLabourItem.PMOLSequenceId = i.PMOLSequenceId;
                                    pLabourItem.PBSSequenceId = i.PBSSequenceId;
                                    pLabourItem.BORSequenceId = i.BORSequenceId;
                                    pLabourItem.CPCId = n.CPCId;
                                    pLabourItem.Cu = VPParameter.ContractingUnitSequenceId;
                                    pLabourItem.Project = VPParameter.ProjectSequenceId;
                                    pbsData.Add(pLabourItem);

                                    List<PbsForVPDto> pmollabour;

                                    pmollabour = labours.Where(lab => lab.Type == "Labour" && lab.ParentId == n.Id)
                                        .ToList();

                                    foreach (var j in pmollabour)
                                    {
                                        PmolTeamMeber member;
                                        var memberselect =
                                            @"SELECT Id,FullName As Name FROM [dbo].[CabPerson] where Id = @Id";

                                        using (var connection =
                                               new SqlConnection(
                                                   VPParameter.TenantProvider.GetTenant().ConnectionString))
                                        {
                                            member = connection
                                                .Query<PmolTeamMeber>(memberselect, new { Id = j.CabPersonId })
                                                .FirstOrDefault();
                                        }

                                        var pLabour = new PbsForVPDto();
                                        pLabour.Id = j.Id;
                                        pLabour.Title = member.Name;
                                        pLabour.ParentId = j.ParentId;
                                        pLabour.Type = "Labour";
                                        pLabour.StartDate = dataadd.StartDate;
                                        pLabour.EndDate = dataadd.EndDate;
                                        pLabour.PMOLSequenceId = i.PMOLSequenceId;
                                        pLabour.PBSSequenceId = i.PBSSequenceId;
                                        pLabour.BORSequenceId = i.BORSequenceId;
                                        pLabour.Cu = VPParameter.ContractingUnitSequenceId;
                                        pLabour.Project = VPParameter.ProjectSequenceId;
                                        pbsData.Add(pLabour);
                                    }
                                }
                            }

                            List<PbsForVPDto> pmoltools;

                            pmoltools = labours.Where(lab => lab.Type == "Tools" && lab.ParentId == i.Id).ToList();
                            if (pmoltools.Any())
                            {
                                var tId = Guid.NewGuid().ToString();
                                var pmoltool = new PbsForVPDto();
                                pmoltool.Id = tId;
                                pmoltool.Title = "Tools";
                                pmoltool.ParentId = i.Id;
                                pmoltool.Type = "Tools";
                                pmoltool.StartDate = dataadd.StartDate;
                                pmoltool.EndDate = dataadd.EndDate;
                                pmoltool.PMOLSequenceId = i.PMOLSequenceId;
                                pmoltool.PBSSequenceId = i.PBSSequenceId;
                                pmoltool.BORSequenceId = i.BORSequenceId;
                                pmoltool.Cu = VPParameter.ContractingUnitSequenceId;
                                pmoltool.Project = VPParameter.ProjectSequenceId;
                                pbsData.Add(pmoltool);

                                foreach (var n in pmoltools)
                                {
                                    var pTool = new PbsForVPDto();
                                    pTool.Id = n.Id;
                                    pTool.Title = n.Title;
                                    pTool.ParentId = tId;
                                    pTool.Type = "Tool";
                                    pTool.StartDate = dataadd.StartDate;
                                    pTool.EndDate = dataadd.EndDate;
                                    pTool.PMOLSequenceId = i.PMOLSequenceId;
                                    pTool.PBSSequenceId = i.PBSSequenceId;
                                    pTool.BORSequenceId = i.BORSequenceId;
                                    pTool.CPCId = n.CPCId;
                                    pTool.Cu = VPParameter.ContractingUnitSequenceId;
                                    pTool.Project = VPParameter.ProjectSequenceId;
                                    pbsData.Add(pTool);
                                }
                            }
                        }
                    }
                }

                if (VPParameter.PbsForVPDtoFilter.StartDate != null)
                    pbsData = pbsData.Where(d =>
                        (VPParameter.PbsForVPDtoFilter.StartDate <= d.StartDate &&
                         d.StartDate <= VPParameter.PbsForVPDtoFilter.EndDate) ||
                        (d.EndDate >= VPParameter.PbsForVPDtoFilter.StartDate &&
                         d.EndDate <= VPParameter.PbsForVPDtoFilter.EndDate) ||
                        (d.StartDate <= VPParameter.PbsForVPDtoFilter.StartDate &&
                         d.EndDate >= VPParameter.PbsForVPDtoFilter.EndDate)).ToList();

                if (VPParameter.PbsForVPDtoFilter.Title != null)
                {
                    VPParameter.PbsForVPDtoFilter.Title = VPParameter.PbsForVPDtoFilter.Title.Replace("'", "''");
                    pbsData = pbsData.Where(x => x.Title != null).ToList();

                    pbsData = pbsData
                        .Where(d => d.Title.ToLower().Contains(VPParameter.PbsForVPDtoFilter.Title.ToLower())).ToList();

                    pbsData.ForEach(x => x.ParentId = null);
                }

                return pbsData.OrderByDescending(x => x.TreeIndex).ToList();
            }
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    public async Task<GetByDate> GeTLabourTeamsAndToolsByDate(VPParameter VPParameter)
    {
        // var options = new DbContextOptions<ApplicationDbContext>();
        // var applicationDbContext = new ApplicationDbContext(options, VPParameter.TenantProvider);

        var cuconnectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            null, VPParameter.TenantProvider);
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);


        try
        {
            var data = new GetByDate();


            var labourQuery =
                "SELECT VpHR.Id , VpHR.PoId,VpHR.ProjectSequenceCode,VpHR.PersonId,VpHR.CPCId,VpHR.StartDate,VpHR.EndDate FROM VpHR WHERE PersonId IS NOT NULL AND ProjectSequenceCode = @ProjectSequenceCode";

            var toolsQuery =
                "SELECT VpWH.Id , VpWH.PoId,VpWH.ProjectSequenceCode,VpWH.CPCId,VpWH.StartDate,VpWH.EndDate FROM VpWH WHERE CPCId IS NOT NULL AND ProjectSequenceCode = @ProjectSequenceCode";

            var parameters = new
            {
                ProjectSequenceCode = VPParameter.ProjectSequenceId
            };
            IEnumerable<GetVpWHDto> Tools;
            using (var connection = new SqlConnection(cuconnectionString))
            {
                Tools = connection.Query<GetVpWHDto>(toolsQuery, parameters).ToList();
            }

            IEnumerable<GetVpHR> LabourTeam;
            using (var connection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
            {
                LabourTeam = connection.Query<GetVpHR>(labourQuery, parameters).ToList();
            }

            var result = LabourTeam.GroupBy(r => r.PersonId);

            var ToolsResult = Tools.GroupBy(r => r.CPCId);

            var labourList = new List<GetVpHR>();
            var toolsList = new List<GetVpWHDto>();


            foreach (var i in result)
            {
                var labourItem = new GetVpHR();
                string name = null;
                IEnumerable<GetPmolLabourTeams> labourTeam;
                var labourTime = new List<GetVpHR>();
                if (i.Key != null)
                {
                    using (var connection =
                           new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
                    {
                        name = connection
                            .Query<string>(
                                "SELECT CabPerson.FullName FROM dbo.CabPersonCompany INNER JOIN dbo.CabPerson ON CabPersonCompany.PersonId = CabPerson.Id WHERE CabPersonCompany.Id = @Id",
                                new { Id = i.Key }).FirstOrDefault();
                    }

                    using (var connection = new SqlConnection(connectionString))
                    {
                        labourTeam =
                            connection.Query<GetPmolLabourTeams>(
                                "SELECT * FROM PmolLabourTeams WHERE PersonId = @Id", new { Id = i.Key });
                    }

                    labourItem.Id = Guid.NewGuid().ToString();
                    labourItem.PersonId = i.Key;
                    labourItem.Title = name;
                    labourItem.ParentId = null;
                    labourItem.Type = "labour";


                    foreach (var k in labourTeam)
                    {
                        var labourItemDate = new GetVpHR();
                        labourItemDate.Id = k.Id;
                        labourItemDate.PersonId = k.PersonId;
                        labourItemDate.StartDate = k.StartDate;
                        labourItemDate.EndDate = k.EndDate;
                        labourItemDate.ParentId = labourItem.Id;
                        labourItemDate.Type = "LabourItemDate";
                        labourItemDate.Title = k.PmolId;

                        labourTime.Add(labourItemDate);
                        labourList.Add(labourItemDate);
                    }

                    labourItem.StartDate = labourTime.Min(r => r.StartDate);
                    labourItem.EndDate = labourTime.Max(r => r.EndDate);
                    labourList.Add(labourItem);
                }
            }

            data.LabourTeam = labourList;


            foreach (var i in ToolsResult)
            {
                var toolsItem = new GetVpWHDto();
                IEnumerable<GetPmolToolsPool> toolTeam;
                var toolsTime = new List<GetVpWHDto>();
                string title = null;
                if (i.Key != null)
                {
                    using (var connection = new SqlConnection(cuconnectionString))
                    {
                        title = connection
                            .Query<string>(
                                "SELECT CorporateProductCatalog.Title FROM dbo.CorporateProductCatalog WHERE CorporateProductCatalog.Id = @Id",
                                new { Id = i.Key }).FirstOrDefault();
                    }

                    using (var connection = new SqlConnection(connectionString))
                    {
                        toolTeam = connection.Query<GetPmolToolsPool>(
                            "SELECT * FROM PmolToolsPool WHERE CPCId = @CPCId", new { CPCId = i.Key });
                    }

                    toolsItem.Id = Guid.NewGuid().ToString();
                    toolsItem.CPCId = i.Key;
                    toolsItem.Title = title;
                    toolsItem.ParentId = null;
                    toolsItem.Type = "Tools";


                    foreach (var k in toolTeam)
                    {
                        var toolsItemDate = new GetVpWHDto();
                        toolsItemDate.Id = k.Id;

                        toolsItemDate.CPCId = k.CPCId;
                        toolsItemDate.StartDate = k.StartDate;
                        toolsItemDate.EndDate = k.EndDate;
                        toolsItemDate.ParentId = toolsItem.Id;
                        toolsItemDate.Type = "LabourItemDate";
                        toolsItemDate.Title = k.PmolId;

                        toolsTime.Add(toolsItemDate);
                        toolsList.Add(toolsItemDate);
                    }

                    toolsItem.StartDate = toolsTime.Min(r => r.StartDate);
                    toolsItem.EndDate = toolsTime.Max(r => r.EndDate);
                    toolsList.Add(toolsItem);
                }
            }

            data.Tools = toolsList;


            //data.LabourTeam = LabourTeam;
            //data.Tools = Tools;
            return data;
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    public async Task<string> CreateMilestone(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

        var options = new DbContextOptions<ApplicationDbContext>();
        var applicationDbContext = new ApplicationDbContext(options, VPParameter.TenantProvider);
        string MSSequenceId = null;

        if (VPParameter.MilestoneHeaderCreateDto.Id != null)
        {
            var query1 = @"SELECT
                  MilestoneHeader.Id
                 ,MilestoneHeader.SequenceId
                FROM dbo.MilestoneHeader
                where Id = @Id";

            var parameter = new { VPParameter.MilestoneHeaderCreateDto.Id };
            MilestoneHeader data;
            using (var connection = new SqlConnection(connectionString))
            {
                data = connection.Query<MilestoneHeader>(query1, parameter).FirstOrDefault();
            }

            if (data == null)
            {
                var idGenerator = new IdGenerator();
                MSSequenceId = idGenerator.GenerateId(applicationDbContext, "MS-", "MSSequence");

                var createquery = @"INSERT INTO dbo.MilestoneHeader
                                    (
                                       Id
                                     ,SequenceId
                                     ,Title
                                     ,Name
                                     ,Type
                                     ,Status
                                     ,Abstract
                                     ,FullDescription
                                     ,UtilityTaxonomy
                                     ,LocationTaxonomy
                                     ,MachineTaxonomy
                                     ,AccountableId
                                     ,ResponsibleId
                                     ,RequestedStartDate
                                     ,RequestedEndDate
                                     ,ExpectedStartDate
                                     ,ExpectedEndDate
                                     ,ActualStartDate
                                     ,ActualEndDate
                                     ,ExpectedAmmount
                                     ,ActualAmmount
                                     ,Comments
                                     ,CreatedBy
                                     ,Project
                                     ,CreatedDate
                                    )
                                    VALUES
                                    (
                                      @Id
                                     ,@SequenceId
                                     ,@Title
                                     ,@Name
                                     ,@Type
                                     ,@Status
                                     ,@Abstract
                                     ,@FullDescription
                                     ,@UtilityTaxonomy
                                     ,@LocationTaxonomy
                                     ,@MachineTaxonomy
                                     ,@AccountableId
                                     ,@ResponsibleId
                                     ,@RequestedStartDate
                                     ,@RequestedEndDate
                                     ,@ExpectedStartDate
                                     ,@ExpectedEndDate
                                     ,@ActualStartDate
                                     ,@ActualEndDate
                                     ,@ExpectedAmmount
                                     ,@ActualAmmount
                                     ,@Comments
                                     ,@CreatedBy
                                     ,@Project
                                     ,@CreatedDate
                                    );";

                var parm = new
                {
                    VPParameter.MilestoneHeaderCreateDto.Id,
                    SequenceId = MSSequenceId,
                    Title = MSSequenceId + " " + VPParameter.MilestoneHeaderCreateDto.Name,
                    VPParameter.MilestoneHeaderCreateDto.Name,
                    VPParameter.MilestoneHeaderCreateDto.Type,
                    VPParameter.MilestoneHeaderCreateDto.Status,
                    VPParameter.MilestoneHeaderCreateDto.Abstract,
                    VPParameter.MilestoneHeaderCreateDto.FullDescription,
                    VPParameter.MilestoneHeaderCreateDto.UtilityTaxonomy,
                    VPParameter.MilestoneHeaderCreateDto.LocationTaxonomy,
                    VPParameter.MilestoneHeaderCreateDto.MachineTaxonomy,
                    VPParameter.MilestoneHeaderCreateDto.AccountableId,
                    VPParameter.MilestoneHeaderCreateDto.ResponsibleId,
                    VPParameter.MilestoneHeaderCreateDto.RequestedStartDate,
                    VPParameter.MilestoneHeaderCreateDto.RequestedEndDate,
                    VPParameter.MilestoneHeaderCreateDto.ExpectedStartDate,
                    VPParameter.MilestoneHeaderCreateDto.ExpectedEndDate,
                    ActualStartDate = VPParameter.MilestoneHeaderCreateDto.ExpectedEndDate,
                    ActualEndDate = VPParameter.MilestoneHeaderCreateDto.ActualStartDate,
                    ExpectedAmmount = VPParameter.MilestoneHeaderCreateDto.ExpectedAmount,
                    ActualAmmount = VPParameter.MilestoneHeaderCreateDto.ActualAmount,
                    VPParameter.MilestoneHeaderCreateDto.Comments,
                    CreatedBy = VPParameter.UserId,
                    VPParameter.MilestoneHeaderCreateDto.Project,
                    CreatedDate = DateTime.UtcNow
                };

                using (var connection = new SqlConnection(connectionString))
                {
                    await connection.ExecuteAsync(createquery, parm);
                }

                if (VPParameter.MilestoneHeaderCreateDto.Files != null)
                {
                    var docquery = @"INSERT INTO dbo.MilestoneDocuments
                                                (
                                                  Id
                                                 ,Link
                                                 ,MilestoneHeaderId
                                                )
                                                VALUES
                                                (
                                                  @Id
                                                 ,@Link
                                                 ,@MilestoneHeaderId
                                                );";
                    foreach (var doc in VPParameter.MilestoneHeaderCreateDto.Files)
                        using (var connection = new SqlConnection(connectionString))
                        {
                            await connection.ExecuteAsync(docquery,
                                new
                                {
                                    Id = Guid.NewGuid().ToString(), Link = doc,
                                    MilestoneHeaderId = VPParameter.MilestoneHeaderCreateDto.Id
                                });
                        }
                }
            }

            else
            {
                MSSequenceId = VPParameter.MilestoneHeaderCreateDto.SequenceId;
                var updatequery = @"UPDATE dbo.MilestoneHeader 
                                            SET
                                              Id = @Id
                                             ,SequenceId = @SequenceId 
                                             ,Title = @Title
                                             ,Name = @Name
                                             ,Type = @Type
                                             ,Status = @Status
                                             ,Abstract = @Abstract
                                             ,FullDescription = @FullDescription
                                             ,UtilityTaxonomy = @UtilityTaxonomy
                                             ,LocationTaxonomy = @LocationTaxonomy
                                             ,MachineTaxonomy = @MachineTaxonomy
                                             ,AccountableId = @AccountableId
                                             ,ResponsibleId = @ResponsibleId
                                             ,RequestedStartDate = @RequestedStartDate
                                             ,RequestedEndDate = @RequestedEndDate
                                             ,ExpectedStartDate = @ExpectedStartDate
                                             ,ExpectedEndDate = @ExpectedEndDate
                                             ,ActualStartDate = @ActualStartDate
                                             ,ActualEndDate = @ActualEndDate
                                             ,ExpectedAmmount = @ExpectedAmmount
                                             ,ActualAmmount = @ActualAmmount
                                             ,Comments = @Comments
                                             ,ModifiedBy = @ModifiedBy
                                             ,Project = @Project
                                             ,ModifiedDate = @ModifiedDate
                                            WHERE
                                              Id = @Id
                                            ;";

                var parm = new
                {
                    VPParameter.MilestoneHeaderCreateDto.Id,
                    VPParameter.MilestoneHeaderCreateDto.SequenceId,
                    Title = VPParameter.MilestoneHeaderCreateDto.SequenceId + " " +
                            VPParameter.MilestoneHeaderCreateDto.Name,
                    VPParameter.MilestoneHeaderCreateDto.Name,
                    VPParameter.MilestoneHeaderCreateDto.Type,
                    VPParameter.MilestoneHeaderCreateDto.Status,
                    VPParameter.MilestoneHeaderCreateDto.Abstract,
                    VPParameter.MilestoneHeaderCreateDto.FullDescription,
                    VPParameter.MilestoneHeaderCreateDto.UtilityTaxonomy,
                    VPParameter.MilestoneHeaderCreateDto.LocationTaxonomy,
                    VPParameter.MilestoneHeaderCreateDto.MachineTaxonomy,
                    VPParameter.MilestoneHeaderCreateDto.AccountableId,
                    VPParameter.MilestoneHeaderCreateDto.ResponsibleId,
                    VPParameter.MilestoneHeaderCreateDto.RequestedStartDate,
                    VPParameter.MilestoneHeaderCreateDto.RequestedEndDate,
                    VPParameter.MilestoneHeaderCreateDto.ExpectedStartDate,
                    VPParameter.MilestoneHeaderCreateDto.ExpectedEndDate,
                    ActualStartDate = VPParameter.MilestoneHeaderCreateDto.ExpectedEndDate,
                    ActualEndDate = VPParameter.MilestoneHeaderCreateDto.ActualStartDate,
                    ExpectedAmmount = VPParameter.MilestoneHeaderCreateDto.ExpectedAmount,
                    ActualAmmount = VPParameter.MilestoneHeaderCreateDto.ActualAmount,
                    VPParameter.MilestoneHeaderCreateDto.Comments,
                    VPParameter.MilestoneHeaderCreateDto.Project,
                    ModifiedBy = VPParameter.UserId,
                    ModifiedDate = DateTime.UtcNow
                };

                var docDelete = @"DELETE FROM dbo.MilestoneDocuments WHERE MilestoneHeaderId = @Id;";
                using (var connection = new SqlConnection(connectionString))
                {
                    await connection.ExecuteAsync(updatequery, parm);
                    await connection.ExecuteAsync(docDelete, parm);
                }

                if (VPParameter.MilestoneHeaderCreateDto.Files != null)
                {
                    var docquery = @"INSERT INTO dbo.MilestoneDocuments
                                                (
                                                  Id
                                                 ,Link
                                                 ,MilestoneHeaderId
                                                )
                                                VALUES
                                                (
                                                  @Id
                                                 ,@Link
                                                 ,@MilestoneHeaderId
                                                );";
                    foreach (var doc in VPParameter.MilestoneHeaderCreateDto.Files)
                        using (var connection = new SqlConnection(connectionString))
                        {
                            await connection.ExecuteAsync(docquery,
                                new
                                {
                                    Id = Guid.NewGuid().ToString(), Link = doc,
                                    MilestoneHeaderId = VPParameter.MilestoneHeaderCreateDto.Id
                                });
                        }
                }
            }
        }

        return MSSequenceId;
    }

    public async Task<MilestoneHeaderGetDto> GetMilestoneById(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

        // var options = new DbContextOptions<ApplicationDbContext>();
        // var applicationDbContext = new ApplicationDbContext(options, VPParameter.TenantProvider);

        var historyQuery =
            @"SELECT [CreatedDate],[CreatedBy],[ModifiedBy],[ModifiedDate] FROM [dbo].MilestoneHeader where [SequenceId] =@SequenceId ";
        var parameter = new { SequenceId = VPParameter.Id };
        MilestoneHistoryDto historyLog;

        var query = @"SELECT
                              MilestoneHeader.Id
                             ,MilestoneHeader.SequenceId
                             ,MilestoneHeader.Title
                             ,MilestoneHeader.Name
                             ,MilestoneHeader.Abstract
                             ,MilestoneHeader.FullDescription
                             ,MilestoneHeader.UtilityTaxonomy
                             ,MilestoneHeader.LocationTaxonomy
                             ,MilestoneHeader.MachineTaxonomy
                             ,MilestoneHeader.AccountableId
                             ,MilestoneHeader.ResponsibleId
                             ,MilestoneHeader.RequestedStartDate
                             ,MilestoneHeader.RequestedEndDate
                             ,MilestoneHeader.ExpectedStartDate
                             ,MilestoneHeader.ExpectedEndDate
                             ,MilestoneHeader.ActualStartDate
                             ,MilestoneHeader.ActualEndDate
                             ,MilestoneHeader.ExpectedAmmount as ExpectedAmount
                             ,MilestoneHeader.ActualAmmount as ActualAmount
                             ,MilestoneHeader.Project
                             ,MilestoneHeader.Comments
                             ,MilestoneType.TypeId AS [Key]
                             ,MilestoneType.Name AS [Text]
                             ,MilestoneStatus.StatusId AS [Key]
                             ,MilestoneStatus.Name AS [Text]
                            FROM dbo.MilestoneHeader
                            LEFT OUTER JOIN dbo.MilestoneType
                              ON MilestoneHeader.Type = MilestoneType.TypeId
                            LEFT OUTER JOIN dbo.MilestoneStatus
                              ON MilestoneHeader.Status = MilestoneStatus.StatusId
                            WHERE (MilestoneType.LanguageCode = @lang
                            OR MilestoneHeader.Type IS NULL)
                            AND (MilestoneStatus.LanguageCode = @lang
                            OR MilestoneHeader.Status IS NULL)
                            AND MilestoneHeader.SequenceId = @Id";

        var parameters = new { lang = VPParameter.Lang, VPParameter.Id };

        MilestoneHeaderGetDto milestoneHeaderGetDto = null;

        using (var connection = new SqlConnection(connectionString))
        {
            historyLog = connection.Query<MilestoneHistoryDto>(historyQuery, parameter).FirstOrDefault();


            milestoneHeaderGetDto = connection
                .Query<MilestoneHeaderGetDto, MilestoneTypeDto, MilestoneStatusDto, MilestoneHeaderGetDto>(
                    query,
                    (msHeader, msTypeDto, msStatusDto) =>
                    {
                        msHeader.Type = msTypeDto;
                        msHeader.Status = msStatusDto;
                        return msHeader;
                    }, parameters,
                    splitOn: "Key,Key").FirstOrDefault();
        }

        var ModifiedByUserQuery =
            @"SELECT CONCAT(ApplicationUser.FirstName,' ',ApplicationUser.LastName) AS [ModifiedBy] FROM ApplicationUser WHERE ApplicationUser.Oid = @oid";

        var CabPearsonQuery =
            @"SELECT CabPerson.FullName AS FullName,CabPersonCompany.Id AS PersonCompanyId  FROM dbo.CabPerson LEFT OUTER JOIN dbo.CabPersonCompany ON CabPerson.Id = CabPersonCompany.PersonId WHERE CabPerson.IsDeleted = 0 AND CabPersonCompany.Id = @oid ";


        using (var connection =
               new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
        {
            var ModifiedByParameter = new { oid = historyLog.ModifiedBy };
            historyLog.ModifiedBy =
                connection.Query<string>(ModifiedByUserQuery, ModifiedByParameter).FirstOrDefault();

            var CreatByParam = new { oid = historyLog.CreatedBy };
            historyLog.CreatedBy = connection.Query<string>(ModifiedByUserQuery, CreatByParam).FirstOrDefault();

            var RequesterParam = new { oid = milestoneHeaderGetDto.AccountableId };
            milestoneHeaderGetDto.Accountable =
                connection.Query<string>(CabPearsonQuery, RequesterParam).FirstOrDefault();

            var ExecutorParam = new { oid = milestoneHeaderGetDto.ResponsibleId };
            milestoneHeaderGetDto.Responsible =
                connection.Query<string>(CabPearsonQuery, ExecutorParam).FirstOrDefault();
        }

        milestoneHeaderGetDto.History = historyLog;

        var headerFiles = @"SELECT Link FROM dbo.MilestoneDocuments WHERE MilestoneHeaderId =@Id";

        using (var connection = new SqlConnection(connectionString))
        {
            milestoneHeaderGetDto.Files =
                connection.Query<string>(headerFiles, new { milestoneHeaderGetDto.Id }).ToList();

            
        }

        return milestoneHeaderGetDto;
    }

    public async Task<MilestoneHeaderDropDownData> GetMilestoneDropdown(VPParameter VPParameter)
    {
        var milestoneHeaderDropDownData = new MilestoneHeaderDropDownData();

        var query =
            @"SELECT MilestoneType.TypeId AS [Key],MilestoneType.Name AS [Text] FROM dbo.MilestoneType WHERE MilestoneType.LanguageCode = @lang ORDER BY MilestoneType.DisplayOrder;SELECT MilestoneStatus.StatusId AS [Key],MilestoneStatus.Name AS [Text] FROM MilestoneStatus WHERE MilestoneStatus.LanguageCode = 'en' ORDER BY MilestoneStatus.DisplayOrder";
        var parameters = new { lang = VPParameter.Lang };
        using (var dbConnection =
               new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
        {
            await dbConnection.OpenAsync();
            using (var multi = await dbConnection.QueryMultipleAsync(query, parameters))
            {
                milestoneHeaderDropDownData.Types = multi.Read<MilestoneTypeDto>().ToList();
                milestoneHeaderDropDownData.Status = multi.Read<MilestoneStatusDto>().ToList();
            }

            
        }

        return milestoneHeaderDropDownData;
    }


    public async Task<IEnumerable<VpOrganizationTaxonomyList>> GetVpOrganizationTaxonomyList(
        VPParameter VPParameter)
    {
        //string connectionString = ConnectionString.MapConnectionString(WHParameter.ContractingUnitSequenceId, WHParameter.ProjectSequenceId, WHParameter.TenantProvider);
        
        var query =
            @"SELECT
              OrganizationTaxonomy.Id
             ,OrganizationTaxonomy.OrganizationId
             ,OrganizationTaxonomy.ParentId
             ,OrganizationTaxonomy.OrganizationTaxonomyLevelId
             ,OrganizationTaxonomy.PersonId
             ,OrganizationTaxonomy.StartDate
             ,OrganizationTaxonomy.EndDate
             ,OrganizationTaxonomy.Title
             ,OrganizationTaxonomyLevel.DisplayOrder
             ,OrganizationTaxonomyLevel.IsChildren
            FROM dbo.OrganizationTaxonomy
            LEFT OUTER JOIN dbo.OrganizationTaxonomyLevel
              ON OrganizationTaxonomy.OrganizationTaxonomyLevelId = OrganizationTaxonomyLevel.LevelId
            WHERE (OrganizationTaxonomyLevel.LanguageCode = @lang
            OR OrganizationTaxonomy.OrganizationTaxonomyLevelId IS NULL)
            AND (OrganizationTaxonomy.TemporaryTeamNameId != '7bcb4e8d-8e8c-487d-team-6b91c89fAcce' OR OrganizationTaxonomy.TemporaryTeamNameId IS NULL)";
        
        var query2 = @"WITH ret
                    AS
                    (SELECT
                    *
                    FROM OrganizationTaxonomy
                    WHERE PersonId = @personId                                                               
                    UNION ALL
                    SELECT
                    t.*
                    FROM OrganizationTaxonomy t
                    INNER JOIN ret r
                    ON t.Id = r.ParentId 
                    )
                    SELECT
                    *
                    FROM ret ";

        var sb = VPParameter.OrganizationTaxonomyFilter.PersonId == null
            ? new StringBuilder(query)
            : new StringBuilder(query2);

        try
        {
            if (VPParameter.OrganizationTaxonomyFilter.PersonId == null)
                if (VPParameter.OrganizationTaxonomyFilter.OrganizationTaxonomyLevelId != null)
                {
                    if (VPParameter.OrganizationTaxonomyFilter.OrganizationTaxonomyLevelId ==
                        "2210e768-3e06-po02-b337-ee367a82adjj")
                        //sb.Append(" AND OrganizationTaxonomy.OrganizationTaxonomyLevelId = '" + OSParameter.Filter.OrganizationTaxonomyLevelId + "'");
                        sb.Append(
                            " AND OrganizationTaxonomy.OrganizationTaxonomyLevelId NOT IN ('qq282458-0b40-poa3-b0f9-c2e40344c8kk')");

                    if (VPParameter.OrganizationTaxonomyFilter.OrganizationTaxonomyLevelId ==
                        "oo10e768-3e06-po02-b337-ee367a82admn")
                        //sb.Append(" AND OrganizationTaxonomy.OrganizationTaxonomyLevelId = '" + OSParameter.Filter.OrganizationTaxonomyLevelId + "'");
                        sb.Append(
                            " AND OrganizationTaxonomy.OrganizationTaxonomyLevelId NOT IN ('qq282458-0b40-poa3-b0f9-c2e40344c8kk','2210e768-3e06-po02-b337-ee367a82adjj')");

                    if (VPParameter.OrganizationTaxonomyFilter.OrganizationTaxonomyLevelId ==
                        "1210e768-3e06-po02-b337-ee367a82ad12")
                        //sb.Append(" AND OrganizationTaxonomy.OrganizationTaxonomyLevelId = '" + OSParameter.Filter.OrganizationTaxonomyLevelId + "'");
                        sb.Append(
                            " AND OrganizationTaxonomy.OrganizationTaxonomyLevelId NOT IN ('qq282458-0b40-poa3-b0f9-c2e40344c8kk','2210e768-3e06-po02-b337-ee367a82adjj','oo10e768-3e06-po02-b337-ee367a82admn')");

                    if (VPParameter.OrganizationTaxonomyFilter.OrganizationTaxonomyLevelId ==
                        "fg10e768-3e06-po02-b337-ee367a82adfg")
                        //sb.Append(" AND OrganizationTaxonomy.OrganizationTaxonomyLevelId = '" + OSParameter.Filter.OrganizationTaxonomyLevelId + "'");
                        sb.Append(
                            " AND OrganizationTaxonomy.OrganizationTaxonomyLevelId NOT IN ('qq282458-0b40-poa3-b0f9-c2e40344c8kk','2210e768-3e06-po02-b337-ee367a82adjj','oo10e768-3e06-po02-b337-ee367a82admn','1210e768-3e06-po02-b337-ee367a82ad12')");

                    if (VPParameter.OrganizationTaxonomyFilter.OrganizationTaxonomyLevelId ==
                        "we10e768-3e06-po02-b337-ee367a82adwe")
                        //sb.Append(" AND OrganizationTaxonomy.OrganizationTaxonomyLevelId = '" + OSParameter.Filter.OrganizationTaxonomyLevelId + "'");
                        sb.Append(
                            " AND OrganizationTaxonomy.OrganizationTaxonomyLevelId NOT IN ('qq282458-0b40-poa3-b0f9-c2e40344c8kk','2210e768-3e06-po02-b337-ee367a82adjj','oo10e768-3e06-po02-b337-ee367a82admn','1210e768-3e06-po02-b337-ee367a82ad12','fg10e768-3e06-po02-b337-ee367a82adfg')");
                }


            var hrQuery = "SELECT  VpHR.*, CONCAT(StartDate,' - ',EndDate) AS Title FROM VpHR";
            var parameters = new
                { lang = VPParameter.Lang, personId = VPParameter.OrganizationTaxonomyFilter.PersonId };
            List<VpOrganizationTaxonomyList> data;
            List<VpOrganizationTaxonomyList> hrList;
            using (var connection =
                   new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
            {
                await connection.OpenAsync();

                data = connection.Query<VpOrganizationTaxonomyList>(sb.ToString(), parameters).ToList()
                    .DistinctBy(x => x.Id).ToList();
                data.AddRange(connection.Query<VpOrganizationTaxonomyList>(hrQuery).ToList());

                hrList = connection.Query<VpOrganizationTaxonomyList>(hrQuery).ToList();

                var result = hrList.GroupBy(r => r.PersonId);
                var hrResult = hrList.GroupBy(r => r.ParentId);

                foreach (var i in result)
                {
                    if (i.Key != null)
                    {
                        DateTime end;
                        DateTime start;
                        end = (DateTime)i.Max(t => t.EndDate);
                        start = (DateTime)i.Min(t => t.StartDate);

                        var hh = new List<double>();

                        foreach (var k in i)
                        {
                            DateTime kEndDate;
                            DateTime kStartDate;
                            kEndDate = (DateTime)k.EndDate;
                            kStartDate = (DateTime)k.StartDate;
                            var ff = (kEndDate - kStartDate).TotalDays;

                            hh.Add(ff);
                        }

                        var bb = hh.Sum();

                        var precentage = bb / (end - start).TotalDays * 100;

                        var hrData = data.Where(k =>
                            k.PersonId == i.Key && k.OrganizationTaxonomyLevelId ==
                            "we10e768-3e06-po02-b337-ee367a82adwe");

                        foreach (var t in hrData) t.Percentage = precentage;
                        //hrData.StartDate = start;
                        //hrData.EndDate = end;
                    }

                    //var bb = data.Where(p => p.PersonId == "hhdshbf").FirstOrDefault();
                    //bb.PersonId
                    
                }


                foreach (var i in hrResult)
                {
                    if (i.Key != null)
                    {
                        DateTime end;
                        DateTime start;
                        end = (DateTime)i.Max(t => t.EndDate);
                        start = (DateTime)i.Min(t => t.StartDate);

                        var hh = new List<double>();

                        //foreach (var k in i)
                        //{
                        //    DateTime kEndDate;
                        //    DateTime kStartDate;
                        //    kEndDate = (DateTime)k.EndDate;
                        //    kStartDate = (DateTime)k.StartDate;
                        //    var ff = (kEndDate - kStartDate).TotalDays;

                        //    hh.Add(ff);

                        //}

                        //var bb = hh.Sum();

                        //var precentage = (bb / (end - start).TotalDays) * 100;

                        var hrData = data.Where(k => k.Id == i.Key).FirstOrDefault();

                        if (hrData != null)
                        {
                            hrData.StartDate = start;
                            hrData.EndDate = end;
                        }
                        //hrData.StartDate = start;
                        //hrData.EndDate = end;
                    }


                    
                }

                //foreach (VpOrganizationTaxonomyList mList in data)
                //{
                //    if (mList.OrganizationTaxonomyLevelId == "yr10e768-3e06-po02-b337-ee367a82adjh")
                //    {
                //        using (var connection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
                //        {
                //            mList.Organization = connection.Query<GetOrganization>("SELECT Name, SequenceId, Title  FROM Organization WHERE Id = @Id", new { Id = mList.OrganizationId }).FirstOrDefault();
                //        }
                //    }

                //}

                return data;
            }
        }
        catch (Exception e)
        {
            throw e;
        }
    }
    
    public async Task<IEnumerable<VpOrganizationTaxonomyList>> GetMTPOrganizationTaxonomyList(VPParameter vpParameter)
    {
        var cuConnectionString = ConnectionString.MapConnectionString(vpParameter.ContractingUnitSequenceId, null, vpParameter.TenantProvider);

        await using var cuConnection = new SqlConnection(cuConnectionString);
        
        var pbsLaboursList = cuConnection.Query<VpOrganizationTaxonomyList>(@"SELECT Id,CabPersonId AS PersonId,StartDate,EndDate,CONCAT(Project, ' ', PbsProduct, ' (',CONVERT(VARCHAR(10), CAST(StartDate AS DATE), 103), ' - ', CONVERT(VARCHAR(10), CAST(EndDate AS DATE), 103),')') AS Title,Project AS ProjectSequenceCode,CpcId AS CPCId FROM dbo.PbsAssignedLabour ORDER BY StartDate").ToList();
        var query =
            @"SELECT
              OrganizationTaxonomy.Id
             ,OrganizationTaxonomy.OrganizationId
             ,OrganizationTaxonomy.ParentId
             ,OrganizationTaxonomy.OrganizationTaxonomyLevelId
             ,OrganizationTaxonomy.PersonId
             ,OrganizationTaxonomy.StartDate
             ,OrganizationTaxonomy.EndDate
             ,OrganizationTaxonomy.Title
             ,OrganizationTaxonomyLevel.DisplayOrder
             ,OrganizationTaxonomyLevel.IsChildren
            FROM dbo.OrganizationTaxonomy
            LEFT OUTER JOIN dbo.OrganizationTaxonomyLevel
              ON OrganizationTaxonomy.OrganizationTaxonomyLevelId = OrganizationTaxonomyLevel.LevelId
            WHERE (OrganizationTaxonomyLevel.LanguageCode = @lang
            OR OrganizationTaxonomy.OrganizationTaxonomyLevelId IS NULL)
            AND (OrganizationTaxonomy.TemporaryTeamNameId != '7bcb4e8d-8e8c-487d-team-6b91c89fAcce' OR OrganizationTaxonomy.TemporaryTeamNameId IS NULL)";
        
        var query2 = @"WITH ret
                    AS
                    (SELECT
                    *
                    FROM OrganizationTaxonomy
                    WHERE PersonId = @personId                                                               
                    UNION ALL
                    SELECT
                    t.*
                    FROM OrganizationTaxonomy t
                    INNER JOIN ret r
                    ON t.Id = r.ParentId 
                    )
                    SELECT
                    *
                    FROM ret ";

        var sb = vpParameter.OrganizationTaxonomyFilter.PersonId == null
            ? new StringBuilder(query)
            : new StringBuilder(query2);

        try
        {
            if (vpParameter.OrganizationTaxonomyFilter.PersonId == null)
                if (vpParameter.OrganizationTaxonomyFilter.OrganizationTaxonomyLevelId != null)
                {
                    if (vpParameter.OrganizationTaxonomyFilter.OrganizationTaxonomyLevelId ==
                        "2210e768-3e06-po02-b337-ee367a82adjj")
                        sb.Append(
                            " AND OrganizationTaxonomy.OrganizationTaxonomyLevelId NOT IN ('qq282458-0b40-poa3-b0f9-c2e40344c8kk')");

                    if (vpParameter.OrganizationTaxonomyFilter.OrganizationTaxonomyLevelId ==
                        "oo10e768-3e06-po02-b337-ee367a82admn")
                        sb.Append(
                            " AND OrganizationTaxonomy.OrganizationTaxonomyLevelId NOT IN ('qq282458-0b40-poa3-b0f9-c2e40344c8kk','2210e768-3e06-po02-b337-ee367a82adjj')");

                    if (vpParameter.OrganizationTaxonomyFilter.OrganizationTaxonomyLevelId ==
                        "1210e768-3e06-po02-b337-ee367a82ad12")
                        sb.Append(
                            " AND OrganizationTaxonomy.OrganizationTaxonomyLevelId NOT IN ('qq282458-0b40-poa3-b0f9-c2e40344c8kk','2210e768-3e06-po02-b337-ee367a82adjj','oo10e768-3e06-po02-b337-ee367a82admn')");

                    if (vpParameter.OrganizationTaxonomyFilter.OrganizationTaxonomyLevelId ==
                        "fg10e768-3e06-po02-b337-ee367a82adfg")
                        sb.Append(
                            " AND OrganizationTaxonomy.OrganizationTaxonomyLevelId NOT IN ('qq282458-0b40-poa3-b0f9-c2e40344c8kk','2210e768-3e06-po02-b337-ee367a82adjj','oo10e768-3e06-po02-b337-ee367a82admn','1210e768-3e06-po02-b337-ee367a82ad12')");

                    if (vpParameter.OrganizationTaxonomyFilter.OrganizationTaxonomyLevelId ==
                        "we10e768-3e06-po02-b337-ee367a82adwe")
                        sb.Append(
                            " AND OrganizationTaxonomy.OrganizationTaxonomyLevelId NOT IN ('qq282458-0b40-poa3-b0f9-c2e40344c8kk','2210e768-3e06-po02-b337-ee367a82adjj','oo10e768-3e06-po02-b337-ee367a82admn','1210e768-3e06-po02-b337-ee367a82ad12','fg10e768-3e06-po02-b337-ee367a82adfg')");
                }

            var parameters = new
                { lang = vpParameter.Lang, personId = vpParameter.OrganizationTaxonomyFilter.PersonId };
            List<VpOrganizationTaxonomyList> data;
            var laboursList = new List<VpOrganizationTaxonomyList>();

            await using var connection =
                new SqlConnection(vpParameter.TenantProvider.GetTenant().ConnectionString);
            data = connection.Query<VpOrganizationTaxonomyList>(sb.ToString(), parameters).ToList()
                .DistinctBy(x => x.Id).ToList();
                
            var organization = connection.Query<GetOrganization>("SELECT Id,Name, SequenceId, Title  FROM Organization").ToList();

            var personName = connection
                .Query<CabPerson>(
                    @"SELECT CabPersonCompany.ID,CabPerson.FullName FROM dbo.CabPersonCompany INNER JOIN dbo.CabPerson ON CabPersonCompany.PersonId = CabPerson.Id")
                .ToList();
            var project = connection
                .Query<ProjectDefinition>(
                    @"Select Title,SequenceCode from ProjectDefinition")
                .ToList();
                
            foreach (var mList in data)
            {
                switch (mList.OrganizationTaxonomyLevelId)
                {
                    case "yr10e768-3e06-po02-b337-ee367a82adjh":
                        mList.Organization = organization.FirstOrDefault(e => e.Id == mList.OrganizationId);
                        break;
                    case "oo10e768-3e06-po02-b337-ee367a82admn":
                    {
                        if (mList.PersonId != null)
                        {
                            mList.PersonName = personName?.FirstOrDefault(e => e.Id == mList.PersonId)?.FullName;
                        }

                        break;
                    }
                    // var bu = connection.Query<OrganizationTaxonomy>(selectBu, new { mList.Id }).FirstOrDefault();
                    // if (bu != null) mList.BuId = bu.Id;
                    case "we10e768-3e06-po02-b337-ee367a82adwe":
                    {
                        var pbsLabours = pbsLaboursList.Where(e => e.PersonId == mList.PersonId).Select(e =>
                        {
                            e.ParentId = mList.Id;
                            return e;
                        }).ToList();

                        var labours = pbsLabours.Select(h => new VpOrganizationTaxonomyList()
                            {
                                Id = Guid.NewGuid().ToString(),
                                Title = h.Title,
                                PersonId = h.PersonId,
                                ParentId = mList.Id,
                                OrganizationTaxonomyLevelId = h.OrganizationTaxonomyLevelId,
                                DisplayOrder = h.DisplayOrder,
                                IsChildren = h.IsChildren,
                                StartDate = h.StartDate,
                                EndDate = h.EndDate,
                                Percentage = h.Percentage,
                                ProjectTitle = project.Where(e => e.SequenceCode == h.ProjectSequenceCode).Select(e => e.Title).FirstOrDefault(),
                                ProjectSequenceCode = h.ProjectSequenceCode,
                                CPCId = h.CPCId
                            })
                            .ToList();

                        var groupLabours = labours.GroupBy(e => e.Title).ToList();
                        
                        laboursList.AddRange(groupLabours.Select(i => i.Select(e => e).FirstOrDefault()));
                        break;
                    }
                }
            }
            data.AddRange(laboursList);
            return data;
        }
        catch (Exception e)
        {
            throw e;
        }
    }


    public async Task<string> AddPmolPlannedLabour(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

        var insertQuery =
            "INSERT INTO PmolTeamRole (Id, CabPersonId, RequiredQuantity, RoleId, ConsumedQuantity, PmolLabourId, Type, IsDeleted)" +
            " VALUES (@Id, @CabPersonId, @RequiredQuantity, @RoleId, @ConsumedQuantity, @PmolLabourId, @Type, @IsDeleted)";

        var labourTeamQuery = "INSERT INTO PmolLabourTeams (Id, PmolId , PersonId , StartDate, EndDate)" +
                              " VALUES (@Id, @PmolId , @PersonId , @StartDate, @EndDate)";

        string personid;

        using (var connection =
               new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
        {
            await connection.OpenAsync();

            personid = connection.Query<string>("SELECT PersonId FROM CabPersonCompany WHERE Id = @Id ",
                new { Id = VPParameter.AddPmolPlannedWork.PersonId }).FirstOrDefault();
        }

        try
        {
            var parameters = new
            {
                VPParameter.AddPmolPlannedWork.Id,
                CabPersonId = personid,
                VPParameter.AddPmolPlannedWork.RequiredQuantity,
                VPParameter.AddPmolPlannedWork.ConsumedQuantity,
                VPParameter.AddPmolPlannedWork.PmolLabourId,
                Type = "Planned",
                IsDeleted = false,
                RoleId = "0e06111a-a513-45e0-a431-170dbd4b0d82"
            };

            var parameters2 = new
            {
                VPParameter.AddPmolPlannedWork.Id,
                VPParameter.AddPmolPlannedWork.PersonId,
                VPParameter.AddPmolPlannedWork.PmolId,
                VPParameter.AddPmolPlannedWork.StartDate,
                VPParameter.AddPmolPlannedWork.EndDate
            };

            using (var dbConnection = new SqlConnection(connectionString))
            {
                await dbConnection.OpenAsync();

                await dbConnection.ExecuteAsync(insertQuery, parameters);
                await dbConnection.ExecuteAsync(labourTeamQuery, parameters2);


                
            }

            return VPParameter.AddPmolPlannedWork.Id;
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    public async Task<string> AddPmolPlannedTools(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);
        var cuconnectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            null, VPParameter.TenantProvider);

        var insertQuery =
            "INSERT INTO PMolPlannedWorkTools (Id, CoperateProductCatalogId, RequiredQuantity, ConsumedQuantity, CpcBasicUnitofMeasureId, PmolId, Type, IsDeleted)" +
            " VALUES (@Id, @CoperateProductCatalogId, @RequiredQuantity, @ConsumedQuantity, @CpcBasicUnitofMeasureId, @PmolId, @Type, @IsDeleted)";

        var toolTeamQuery = "INSERT INTO PmolToolsPool (Id, PmolId , CPCId , StartDate, EndDate)" +
                            " VALUES (@Id, @PmolId , @CPCId , @StartDate, @EndDate)";

        try
        {
            CorporateProductCatalog cpc = null;
            string pmolId = null;
            string mouId = null;
            if (VPParameter.AddPmolPlannedWork.CoperateProductCatalogId != null)
                using (var connection = new SqlConnection(connectionString))
                {
                    await connection.OpenAsync();

                    cpc = connection
                        .Query<CorporateProductCatalog>("SELECT * FROM CorporateProductCatalog WHERE Id = @Id",
                            new { Id = VPParameter.AddPmolPlannedWork.CoperateProductCatalogId }).FirstOrDefault();
                    pmolId = connection
                        .Query<string>("SELECT Id FROM PMol WHERE ProjectMoleculeId = @ProjectMoleculeId",
                            new { ProjectMoleculeId = VPParameter.AddPmolPlannedWork.PmolId }).FirstOrDefault();

                    
                }

            if (cpc != null) mouId = cpc.CpcBasicUnitOfMeasureId;

            var parameters = new
            {
                VPParameter.AddPmolPlannedWork.Id,
                VPParameter.AddPmolPlannedWork.CoperateProductCatalogId,
                VPParameter.AddPmolPlannedWork.RequiredQuantity,
                VPParameter.AddPmolPlannedWork.ConsumedQuantity,
                CpcBasicUnitofMeasureId = mouId,
                PmolId = pmolId,
                Type = "Planned",
                IsDeleted = false
            };

            var parameters2 = new
            {
                VPParameter.AddPmolPlannedWork.Id,
                CPCId = VPParameter.AddPmolPlannedWork.CoperateProductCatalogId,
                VPParameter.AddPmolPlannedWork.PmolId,
                VPParameter.AddPmolPlannedWork.StartDate,
                VPParameter.AddPmolPlannedWork.EndDate
            };

            using (var dbConnection = new SqlConnection(connectionString))
            {
                await dbConnection.OpenAsync();

                await dbConnection.ExecuteAsync(insertQuery, parameters);
                await dbConnection.ExecuteAsync(toolTeamQuery, parameters2);


                
            }

            var checkCpcs =
                @"SELECT CorporateProductCatalog.Id FROM dbo.CorporateProductCatalog WHERE CorporateProductCatalog.Id = @Id";

            CorporateProductCatalog checkcpc = null;

            using (var connection = new SqlConnection(connectionString))
            {
                checkcpc = connection.Query<CorporateProductCatalog>(checkCpcs,
                    new { Id = VPParameter.AddPmolPlannedWork.CoperateProductCatalogId }).FirstOrDefault();
            }

            if (checkcpc.Id == null)
            {
                var getcpcId =
                    @"SELECT * FROM dbo.CorporateProductCatalog where CorporateProductCatalog.Id = @Id";

                CorporateProductCatalog getcpc = null;

                using (var connection = new SqlConnection(cuconnectionString))
                {
                    getcpc = connection.Query<CorporateProductCatalog>(getcpcId,
                        new { Id = VPParameter.AddPmolPlannedWork.CoperateProductCatalogId }).FirstOrDefault();
                }

                var insertcpc =
                    @"INSERT INTO dbo.CorporateProductCatalog ( Id,ResourceTitle,ResourceTypeId,ResourceFamilyId,CpcBasicUnitOfMeasureId,CpcMaterialId,CpcPressureClassId,InventoryPrice,CpcUnitOfSizeMeasureId,Size,WallThickness,MinOrderQuantity,MaxOrderQuantity,Weight,Status,ResourceNumber,IsDeleted,CpcBrandId,Title) VALUES (@Id,@ResourceTitle,@ResourceTypeId,@ResourceFamilyId,@CpcBasicUnitOfMeasureId,@CpcMaterialId,@CpcPressureClassId,@InventoryPrice,@CpcUnitOfSizeMeasureId,@Size,@WallThickness,@MinOrderQuantity,@MaxOrderQuantity,@Weight,@Status,@ResourceNumber,@IsDeleted ,@CpcBrandId,@Title)";

                var parameters3 = new
                {
                    getcpc.Id,
                    getcpc.ResourceTitle,
                    getcpc.ResourceTypeId,
                    getcpc.ResourceFamilyId,
                    getcpc.CpcBasicUnitOfMeasureId,
                    getcpc.CpcMaterialId,
                    getcpc.CpcPressureClassId,
                    getcpc.InventoryPrice,
                    getcpc.CpcUnitOfSizeMeasureId,
                    getcpc.Size,
                    getcpc.WallThickness,
                    getcpc.MinOrderQuantity,
                    getcpc.MaxOrderQuantity,
                    getcpc.Weight,
                    getcpc.Status,
                    getcpc.ResourceNumber,
                    IsDeleted = false,
                    getcpc.CpcBrandId,
                    getcpc.Title
                };

                using (var connection = new SqlConnection(connectionString))
                {
                    await connection.ExecuteAsync(insertcpc, parameters3);
                }
            }

            return VPParameter.AddPmolPlannedWork.Id;
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    public async Task<IEnumerable<MilestoneList>> GetMilestoneList(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

        StringBuilder sb;

        var query = @"SELECT
                                  MilestoneHeader.Id
                                 ,MilestoneHeader.SequenceId
                                 ,MilestoneHeader.SequenceId As Title
                                 ,MilestoneHeader.Name
                                 ,MilestoneHeader.Abstract
                                 ,MilestoneHeader.FullDescription
                                 ,MilestoneHeader.UtilityTaxonomy
                                 ,MilestoneHeader.LocationTaxonomy
                                 ,MilestoneHeader.MachineTaxonomy
                                 ,MilestoneHeader.AccountableId
                                 ,MilestoneHeader.ResponsibleId
                                 ,MilestoneHeader.RequestedStartDate
                                 ,MilestoneHeader.RequestedEndDate
                                 ,MilestoneHeader.ExpectedStartDate
                                 ,MilestoneHeader.ExpectedEndDate
                                 ,MilestoneHeader.ActualStartDate
                                 ,MilestoneHeader.ActualEndDate
                                 ,MilestoneHeader.ExpectedAmmount
                                 ,MilestoneHeader.ActualAmmount
                                 ,MilestoneHeader.Project
                                 ,MilestoneHeader.Comments
                                 ,MilestoneHeader.Type AS MsTypeId
                                 ,MilestoneType.Name AS Type
                                 ,MilestoneStatus.Name AS Staus
                                 ,MilestoneHeader.CreatedDate
                                FROM dbo.MilestoneHeader
                                LEFT OUTER JOIN dbo.MilestoneType
                                  ON MilestoneHeader.Type = MilestoneType.TypeId
                                LEFT OUTER JOIN dbo.MilestoneStatus
                                  ON MilestoneHeader.Status = MilestoneStatus.StatusId
                                WHERE (MilestoneType.LanguageCode = @lang
                                OR MilestoneHeader.Type IS NULL)
                                AND (MilestoneStatus.LanguageCode = @lang
                                OR MilestoneHeader.Status IS NULL)";


        sb = new StringBuilder(query);

        if (VPParameter.MSFilter.Title != null)
        {
            var words = VPParameter.MSFilter.Title.Split(" ");
            foreach (var element in words) sb.Append(" AND MilestoneHeader.Title LIKE '%" + element + "%'");
        }

        if (VPParameter.MSFilter.StatusId != null)
            sb.Append(" AND MilestoneHeader.Status = '" + VPParameter.MSFilter.StatusId + "'");

        if (VPParameter.MSFilter.TypeId.FirstOrDefault() != null)
            sb.Append(" AND MilestoneHeader.Type IN @types");

        if (VPParameter.MSFilter.StartDate != null)
            sb.Append(" AND (MilestoneHeader.ExpectedStartDate BETWEEN '" + VPParameter.MSFilter.StartDate +
                      "' AND '" + VPParameter.MSFilter.EndDate + "')");

        if (VPParameter.MSFilter.Sorter.Attribute == null) sb.Append(" ORDER BY MilestoneHeader.expectedStartDate asc");

        if (VPParameter.MSFilter.Sorter.Attribute != null)
        {
            if (VPParameter.MSFilter.Sorter.Attribute.ToLower().Equals("title") ||
                VPParameter.MSFilter.Sorter.Attribute.ToLower().Equals("date"))
                sb.Append("ORDER BY MilestoneHeader.Title " + VPParameter.MSFilter.Sorter.Order);

            if (VPParameter.MSFilter.Sorter.Attribute.ToLower().Equals("type"))
                sb.Append("ORDER BY MilestoneType.Name " + VPParameter.MSFilter.Sorter.Order);

            if (VPParameter.MSFilter.Sorter.Attribute.ToLower().Equals("status"))
                sb.Append("ORDER BY MilestoneStatus.Name " + VPParameter.MSFilter.Sorter.Order);
        }

        sb.Append("");
        IEnumerable<MilestoneList> data;

        using (var connection = new SqlConnection(connectionString))
        {
            await connection.OpenAsync();

            data = await connection.QueryAsync<MilestoneList>(sb.ToString(),
                new { lang = VPParameter.Lang, types = VPParameter.MSFilter.TypeId });

            
        }

        return data;
    }

    public async Task<List<PmolShortcutpaneDataDto>> MilestoneShortcutPaneData(VPParameter VPParameter)
    {
        var data = new List<PmolShortcutpaneDataDto>();

        var header1 = new PmolShortcutpaneDataDto();
        header1.Id = "13";
        header1.Name = "delivery";
        header1.Type = "0";
        header1.Value = 13;

        data.Add(header1);

        var pbs = new PmolShortcutpaneDataDto();
        pbs.Id = "1";
        pbs.Name = "pbs";
        pbs.Type = "0";
        pbs.Value = 1;

        data.Add(pbs);

        var bor = new PmolShortcutpaneDataDto();
        bor.Id = "2";
        bor.Name = "bor";
        bor.Type = "0";
        bor.Value = 2;

        data.Add(bor);

        var pmol = new PmolShortcutpaneDataDto();
        pmol.Id = "3";
        pmol.Name = "pmol";
        pmol.Type = "0";
        pmol.Value = 3;

        data.Add(pmol);

        var header2 = new PmolShortcutpaneDataDto();
        header2.Id = "14";
        header2.Name = "planning";
        header2.Type = "2";
        header2.Value = 14;

        data.Add(header2);

        var ms = new PmolShortcutpaneDataDto();
        ms.Id = "4";
        ms.Name = "milestones";
        ms.Type = "2";
        ms.Value = 4;

        data.Add(ms);

        var productTaxonomy = new PmolShortcutpaneDataDto();
        productTaxonomy.Id = "5";
        productTaxonomy.Name = "productTaxonomy";
        productTaxonomy.Type = "1";
        productTaxonomy.Value = 5;

        data.Add(productTaxonomy);

        var tree = new PmolShortcutpaneDataDto();
        tree.Id = "6";
        tree.Name = "newTree";
        tree.Type = "0";
        tree.Value = 6;

        data.Add(tree);

        var utility = new PmolShortcutpaneDataDto();
        utility.Id = "7";
        utility.Name = "utilityTaxonomy";
        utility.Type = "0";
        utility.Value = 7;

        data.Add(utility);

        var location = new PmolShortcutpaneDataDto();
        location.Id = "8";
        location.Name = "locationTaxonomy";
        location.Type = "0";
        location.Value = 8;

        data.Add(location);

        var machine = new PmolShortcutpaneDataDto();
        machine.Id = "9";
        machine.Name = "machineTaxonomy";
        machine.Type = "0";
        machine.Value = 9;

        data.Add(machine);
        
        var pr = new List<PmolShortcutpaneDataDto>
        {
            new()
            {
                Id = "10",
                Name = "purchase&Delivery",
                Type = "3",
                Value = 10
            },
            new()
            {
                Id = "11",
                Name = "bor",
                Type = "3",
                Value = 11
            },
            new()
            {
                Id = "12",
                Name = "purchaseRequest",
                Type = "3",
                Value = 12
            }
        };

        data.AddRange(pr);

        return data;
    }

    public async Task<List<PmolShortcutpaneDataDto>> MyEnvMilestoneShortcutPaneData(VPParameter VPParameter)
    {
        var data = new List<PmolShortcutpaneDataDto>();

        var productTaxonomy = new PmolShortcutpaneDataDto();
        productTaxonomy.Id = "5";
        productTaxonomy.Name = "productTaxonomy";
        productTaxonomy.Type = "1";
        productTaxonomy.Value = 5;

        data.Add(productTaxonomy);

        var tree = new PmolShortcutpaneDataDto();
        tree.Id = "6";
        tree.Name = "newTree";
        tree.Type = "0";
        tree.Value = 6;

        data.Add(tree);

        return data;
    }
    
    public async Task<List<PmolShortcutpaneDataDto>> CuMilestoneShortcutPaneData(VPParameter VPParameter)
    {
        var data = new List<PmolShortcutpaneDataDto>();

        var productTaxonomy = new PmolShortcutpaneDataDto();
        productTaxonomy.Id = "5";
        productTaxonomy.Name = "productTaxonomy";
        productTaxonomy.Type = "1";
        productTaxonomy.Value = 5;

        data.Add(productTaxonomy);

        var tree = new PmolShortcutpaneDataDto();
        tree.Id = "6";
        tree.Name = "newTree";
        tree.Type = "0";
        tree.Value = 6;

        data.Add(tree);
        
        var midTermPlanning = new PmolShortcutpaneDataDto();
        midTermPlanning.Id = "7";
        midTermPlanning.Name = "midTermPlanning";
        midTermPlanning.Type = "1";
        midTermPlanning.Value = 7;

        data.Add(midTermPlanning);

        return data;
    }

    public async Task<string> MachineTaxonomyCreate(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

        try
        {
            if (VPParameter.MachineTaxonmyDto.Id != null)
            {
                var query =
                    @"MERGE INTO dbo.MachineTaxonmy t1 USING (SELECT 1 id) t2 ON (t1.Id = @Id) WHEN MATCHED THEN UPDATE  SET Title = @Title WHEN NOT MATCHED THEN INSERT (Id,MilestoneId,ParentId,MachineTaxonomyLevelId,Title) VALUES (@Id,@MilestoneId,@ParentId,@MachineTaxonomyLevelId,@Title);";
                var parameters = new
                {
                    VPParameter.MachineTaxonmyDto.Id,
                    VPParameter.MachineTaxonmyDto.Title,
                    VPParameter.MachineTaxonmyDto.MilestoneId,
                    VPParameter.MachineTaxonmyDto.ParentId,
                    VPParameter.MachineTaxonmyDto.MachineTaxonomyLevelId
                };

                using (var connection = new SqlConnection(connectionString))
                {
                    await connection.ExecuteAsync(query, parameters);
                }
            }

            return VPParameter.MachineTaxonmyDto.Id;
        }

        catch (Exception e)
        {
            throw e;
        }
    }

    public async Task<IEnumerable<MilestoneListDto>> GetMilestoneListAsTaxonomy(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

        var query = @"SELECT
  MilestoneHeader.Id
 ,MilestoneHeader.SequenceId
 ,MilestoneHeader.Title
 ,MilestoneHeader.ExpectedStartDate AS StartDate
 ,MilestoneHeader.ExpectedEndDate AS EndDate
FROM dbo.MilestoneHeader ORDER BY SequenceId";

        IEnumerable<MilestoneListDto> data;

        var data1 = new List<MilestoneListDto>();

        using (var connection = new SqlConnection(connectionString))
        {
            await connection.OpenAsync();

            data = await connection.QueryAsync<MilestoneListDto>(query, new { lang = VPParameter.Lang });

            
        }

        var milestone = new MilestoneListDto();
        milestone.Id = Guid.NewGuid().ToString();
        milestone.Title = "Milestone";
        data1.Add(milestone);

        foreach (var n in data)
        {
            var milestone1 = new MilestoneListDto();
            milestone1.Id = n.Id;
            milestone1.SequenceId = n.SequenceId;
            milestone1.Title = n.Title;
            milestone1.StartDate = n.StartDate;
            milestone1.EndDate = n.EndDate;
            milestone1.ParentId = milestone.Id;
            data1.Add(milestone1);
        }

        return data1;
    }

    public async Task<IEnumerable<GetVpPo>> AllVpPoMyEnv(VPParameter VPParameter)
    {
        try
        {
            var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
                VPParameter.ProjectSequenceId, VPParameter.TenantProvider);
            var cuconnectionString =
                ConnectionString.MapConnectionString("COM-0001", null, VPParameter.TenantProvider);

            var result = await GetPOMyEnv(VPParameter);

            var groupProject = result.ToList().GroupBy(r => r.ProjectSequenceCode);

            // DapperPlusManager.Entity<VpPo>()
            //     .Table("VpPo")
            //     .Map(m => m.Id, nameof(VpPo.Id))
            //     .Map(m => m.ParentId, nameof(VpPo.ParentId))
            //     .Map(m => m.EndDate, nameof(VpPo.EndDate))
            //     .Map(m => m.StartDate, nameof(VpPo.StartDate))
            //     .Map(m => m.Status, nameof(VpPo.Status))
            //     .Map(m => m.Type, nameof(VpPo.Type))
            //     .Map(m => m.Title, nameof(VpPo.Title))
            //     .Map(m => m.LinkId, nameof(VpPo.LinkId))
            //     .Map(m => m.Project, nameof(VpPo.Project))
            //     .Map(m => m.BorId, nameof(VpPo.BorId))
            //     .Map(m => m.CCPCId, nameof(VpPo.CCPCId))
            //     .Map(m => m.PoId, nameof(VpPo.PoId))
            //     .Key(x => x.Id);


            var addVP = new List<GetVpPo>();

            foreach (var r in groupProject)
                if (r.Key != null)
                {
                    var projectqueary =
                        @"SELECT ProjectTime.StartDate,ProjectTime.EndDate,ProjectDefinition.Id,ProjectDefinition.Title FROM dbo.ProjectDefinition
                                                LEFT OUTER JOIN ProjectTime 
                                                on ProjectTime.ProjectId = ProjectDefinition.Id
                                                where ProjectDefinition.SequenceCode = @Id";
                    var param = new { Id = r.Key };
                    ProjectForVpDto ProjectTime;
                    using (var connection =
                           new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
                    {
                        ProjectTime = connection.Query<ProjectForVpDto>(projectqueary, param).FirstOrDefault();
                    }

                    var projectVop = new GetVpPo();
                    projectVop.Id = Guid.NewGuid().ToString();
                    projectVop.Title = ProjectTime.Title;
                    projectVop.StartDate = ProjectTime.StartDate;
                    projectVop.EndDate = ProjectTime.EndDate;
                    projectVop.Type = "Project";
                    projectVop.LinkId = ProjectTime.Id;

                    addVP.Add(projectVop);

                    foreach (var i in r)
                    {
                        var labourTime = new List<GetVpPo>();
                        var toolsTime = new List<GetVpPo>();
                        var materialTime = new List<GetVpPo>();
                        var consumableTime = new List<GetVpPo>();

                        var labourResources = new List<GetVpPo>();
                        var toolsResources = new List<GetVpPo>();
                        var materialResources = new List<GetVpPo>();
                        var consumableResources = new List<GetVpPo>();

                        var poVop = new GetVpPo();
                        poVop.Id = Guid.NewGuid().ToString();
                        poVop.Title = i.Title;
                        poVop.Type = "PO";
                        poVop.StartDate = i.DeliveryDate;
                        if (i.ExpectedDate == null)
                            poVop.EndDate = i.DeliveryDate.AddDays(7);
                        else
                            poVop.EndDate = i.ExpectedDate;

                        poVop.ParentId = projectVop.Id;
                        poVop.LinkId = i.SequenceId;
                        poVop.Project = r.Key;
                        poVop.PoId = i.SequenceId;
                        poVop.Teams = i.Teams;
                        poVop.ToolsPool = i.ToolsPool;
                        poVop.RequestTypeId = i.RequestTypeId;
                        poVop.RequestTypeName = i.RequestTypeName;

                        addVP.Add(poVop);

                        if (i.POResources.labour.FirstOrDefault() != null)
                        {
                            var laburid = Guid.NewGuid().ToString();
                            var poLabourVop = new GetVpPo();
                            poLabourVop.Id = laburid;
                            poLabourVop.Title = "Labours";
                            poLabourVop.Type = "ResourceType";
                            poLabourVop.ParentId = poVop.Id;
                            poLabourVop.Project = r.Key;
                            poLabourVop.PoId = i.SequenceId;


                            foreach (var k in i.POResources.labour)
                            {
                                var poLabourItemVop = new GetVpPo();
                                poLabourItemVop.Id = Guid.NewGuid().ToString();
                                poLabourItemVop.Title = k.CTitle;
                                poLabourItemVop.Type = "ResourceItem";
                                poLabourItemVop.ResourceType = "Labour";
                                var hh = new GetVpPo();
                                if (k.CStartDate == null)
                                {
                                    poLabourItemVop.StartDate = i.DeliveryDate;
                                    hh.StartDate = i.DeliveryDate;
                                }
                                else
                                {
                                    poLabourItemVop.StartDate = k.CStartDate;
                                    hh.StartDate = k.CStartDate;
                                }

                                if (k.CStopDate == null)
                                {
                                    poLabourItemVop.EndDate = poVop.EndDate;
                                    hh.EndDate = poVop.EndDate;
                                }
                                else
                                {
                                    poLabourItemVop.EndDate = k.CStopDate;
                                    hh.EndDate = k.CStopDate;
                                }


                                poLabourItemVop.ParentId = laburid;
                                poLabourItemVop.LinkId = k.Id;
                                poLabourItemVop.Project = r.Key;
                                poLabourItemVop.BorId = k.BorId;
                                poLabourItemVop.CCPCId = k.CCPCId;
                                poLabourItemVop.PoId = i.SequenceId;
                                poLabourItemVop.Quantity = k.CQuantity;
                                poLabourItemVop.Teams = i.Teams;
                                poLabourItemVop.RequestTypeId = i.RequestTypeId;
                                poLabourItemVop.RequestTypeName = i.RequestTypeName;


                                labourTime.Add(hh);
                                addVP.Add(poLabourItemVop);
                            }

                            poLabourVop.StartDate = labourTime.Min(r => r.StartDate);
                            poLabourVop.EndDate = labourTime.Max(r => r.EndDate);
                            poLabourVop.Resources = labourResources;
                            poLabourVop.Teams = i.Teams;
                            poLabourVop.RequestTypeId = i.RequestTypeId;
                            poLabourVop.RequestTypeName = i.RequestTypeName;
                            addVP.Add(poLabourVop);
                        }

                        if (i.POResources.consumable.FirstOrDefault() != null)
                        {
                            var consumableid = Guid.NewGuid().ToString();
                            var poconsumableVop = new GetVpPo();
                            poconsumableVop.Id = consumableid;
                            poconsumableVop.Title = "Consumables";
                            poconsumableVop.Type = "ResourceType";
                            poconsumableVop.ParentId = poVop.Id;
                            poconsumableVop.Project = r.Key;
                            poconsumableVop.PoId = i.SequenceId;


                            foreach (var k in i.POResources.consumable)
                            {
                                var poconsumableItemVop = new GetVpPo();
                                poconsumableItemVop.Id = Guid.NewGuid().ToString();
                                poconsumableItemVop.Title = k.CTitle;
                                poconsumableItemVop.Type = "ResourceItem";
                                poconsumableItemVop.ResourceType = "Consumable";

                                var hh = new GetVpPo();
                                if (k.CStartDate == null)
                                {
                                    poconsumableItemVop.StartDate = i.DeliveryDate;
                                    hh.StartDate = i.DeliveryDate;
                                }
                                else
                                {
                                    poconsumableItemVop.StartDate = k.CStartDate;
                                    hh.StartDate = k.CStartDate;
                                }

                                if (k.CStopDate == null)
                                {
                                    poconsumableItemVop.EndDate = poVop.EndDate;
                                    hh.EndDate = poVop.EndDate;
                                }
                                else
                                {
                                    poconsumableItemVop.EndDate = k.CStopDate;
                                    hh.EndDate = k.CStopDate;
                                }

                                //poconsumableItemVop.StartDate = k.RequestedDeliveryDate;
                                //poconsumableItemVop.EndDate = k.ExpectedDeliveryDate;
                                poconsumableItemVop.ParentId = consumableid;
                                poconsumableItemVop.LinkId = k.Id;
                                poconsumableItemVop.Project = r.Key;
                                poconsumableItemVop.BorId = k.BorId;
                                poconsumableItemVop.CCPCId = k.CCPCId;
                                poconsumableItemVop.PoId = i.SequenceId;
                                poconsumableItemVop.Quantity = k.CQuantity;
                                poconsumableItemVop.Teams = i.Teams;
                                poconsumableItemVop.RequestTypeId = i.RequestTypeId;
                                poconsumableItemVop.RequestTypeName = i.RequestTypeName;

                                //var hh = new GetVpPo();
                                //hh.StartDate = k.RequestedDeliveryDate;
                                //hh.EndDate = k.ExpectedDeliveryDate;
                                consumableTime.Add(hh);

                                addVP.Add(poconsumableItemVop);
                            }

                            poconsumableVop.StartDate = consumableTime.Min(r => r.StartDate);
                            poconsumableVop.EndDate = consumableTime.Max(r => r.EndDate);
                            poconsumableVop.Resources = consumableResources;
                            poconsumableVop.Teams = i.Teams;
                            poconsumableVop.RequestTypeId = i.RequestTypeId;
                            poconsumableVop.RequestTypeName = i.RequestTypeName;
                            addVP.Add(poconsumableVop);
                        }

                        if (i.POResources.materials.FirstOrDefault() != null)
                        {
                            var materialid = Guid.NewGuid().ToString();
                            var pomaterialVop = new GetVpPo();
                            pomaterialVop.Id = materialid;
                            pomaterialVop.Title = "Materials";
                            pomaterialVop.Type = "ResourceType";
                            pomaterialVop.ParentId = poVop.Id;
                            pomaterialVop.Project = r.Key;
                            pomaterialVop.PoId = i.SequenceId;


                            foreach (var k in i.POResources.materials)
                            {
                                var poMaterialItemVop = new GetVpPo();
                                poMaterialItemVop.Id = Guid.NewGuid().ToString();
                                poMaterialItemVop.Title = k.CTitle;
                                poMaterialItemVop.Type = "ResourceItem";
                                poMaterialItemVop.ResourceType = "Materials";

                                var hh = new GetVpPo();
                                if (k.CStartDate == null)
                                {
                                    poMaterialItemVop.StartDate = i.DeliveryDate;
                                    hh.StartDate = i.DeliveryDate;
                                }
                                else
                                {
                                    poMaterialItemVop.StartDate = k.CStartDate;
                                    hh.StartDate = k.CStartDate;
                                }

                                if (k.CStopDate == null)
                                {
                                    poMaterialItemVop.EndDate = poVop.EndDate;
                                    hh.EndDate = poVop.EndDate;
                                }
                                else
                                {
                                    poMaterialItemVop.EndDate = k.CStopDate;
                                    hh.EndDate = k.CStopDate;
                                }

                                //poMaterialItemVop.StartDate = k.RequestedDeliveryDate;
                                //poMaterialItemVop.EndDate = k.ExpectedDeliveryDate;
                                poMaterialItemVop.ParentId = materialid;
                                poMaterialItemVop.LinkId = k.Id;
                                poMaterialItemVop.Project = r.Key;
                                poMaterialItemVop.BorId = k.BorId;
                                poMaterialItemVop.CCPCId = k.CCPCId;
                                poMaterialItemVop.PoId = i.SequenceId;
                                poMaterialItemVop.Quantity = k.CQuantity;
                                poMaterialItemVop.Teams = i.Teams;
                                poMaterialItemVop.RequestTypeId = i.RequestTypeId;
                                poMaterialItemVop.RequestTypeName = i.RequestTypeName;

                                //var hh = new GetVpPo();
                                //hh.StartDate = k.RequestedDeliveryDate;
                                //hh.EndDate = k.ExpectedDeliveryDate;
                                materialTime.Add(hh);

                                addVP.Add(poMaterialItemVop);
                            }

                            pomaterialVop.StartDate = materialTime.Min(r => r.StartDate);
                            pomaterialVop.EndDate = materialTime.Max(r => r.EndDate);
                            pomaterialVop.Resources = materialResources;
                            pomaterialVop.Teams = i.Teams;
                            pomaterialVop.RequestTypeId = i.RequestTypeId;
                            pomaterialVop.RequestTypeName = i.RequestTypeName;

                            addVP.Add(pomaterialVop);
                        }

                        if (i.POResources.tools.FirstOrDefault() != null)
                        {
                            var toolid = Guid.NewGuid().ToString();
                            var potoolVop = new GetVpPo();
                            potoolVop.Id = toolid;
                            potoolVop.Title = "Tools";
                            potoolVop.Type = "ResourceType";
                            potoolVop.ParentId = poVop.Id;
                            potoolVop.Project = r.Key;
                            potoolVop.PoId = i.SequenceId;
                            potoolVop.ToolsPool = i.ToolsPool;


                            foreach (var k in i.POResources.tools)
                            {
                                var potoolItemVop = new GetVpPo();
                                potoolItemVop.Id = Guid.NewGuid().ToString();
                                potoolItemVop.Title = k.CTitle;
                                potoolItemVop.Type = "ResourceItem";
                                potoolItemVop.ResourceType = "Tools";

                                var hh = new GetVpPo();
                                if (k.CStartDate == null)
                                {
                                    potoolItemVop.StartDate = i.DeliveryDate;
                                    hh.StartDate = i.DeliveryDate;
                                }
                                else
                                {
                                    potoolItemVop.StartDate = k.CStartDate;
                                    hh.StartDate = k.CStartDate;
                                }

                                if (k.CStopDate == null)
                                {
                                    potoolItemVop.EndDate = poVop.EndDate;
                                    hh.EndDate = poVop.EndDate;
                                }
                                else
                                {
                                    potoolItemVop.EndDate = k.CStopDate;
                                    hh.EndDate = k.CStopDate;
                                }

                                //potoolItemVop.StartDate = k.RequestedDeliveryDate;
                                //potoolItemVop.EndDate = k.ExpectedDeliveryDate;
                                potoolItemVop.ParentId = toolid;
                                potoolItemVop.LinkId = k.Id;
                                potoolItemVop.Project = r.Key;
                                potoolItemVop.BorId = k.BorId;
                                potoolItemVop.CCPCId = k.CCPCId;
                                potoolItemVop.PoId = i.SequenceId;
                                potoolItemVop.Quantity = k.CQuantity;
                                potoolItemVop.Teams = i.Teams;
                                potoolItemVop.ToolsPool = i.ToolsPool;
                                potoolItemVop.RequestTypeId = i.RequestTypeId;
                                potoolItemVop.RequestTypeName = i.RequestTypeName;

                                //var hh = new GetVpPo();
                                //hh.StartDate = k.RequestedDeliveryDate;
                                //hh.EndDate = k.ExpectedDeliveryDate;
                                toolsTime.Add(hh);

                                addVP.Add(potoolItemVop);
                            }

                            potoolVop.StartDate = toolsTime.Min(r => r.StartDate);
                            potoolVop.EndDate = toolsTime.Max(r => r.EndDate);
                            potoolVop.Resources = toolsResources;
                            potoolVop.Teams = i.Teams;
                            potoolVop.RequestTypeId = i.RequestTypeId;
                            potoolVop.RequestTypeName = i.RequestTypeName;

                            addVP.Add(potoolVop);
                        }
                    }
                }

            //using (var connection = new SqlConnection(cuconnectionString))
            //{
            //    connection.BulkMerge(addVP);
            //}

            return addVP;
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    public IEnumerable<VpProjectWithPm> VPProjectPm(string connection)
    {
        var projectWithPm = @"SELECT
                                  ProjectTeam.ProjectId
                                 ,ProjectTeam.ContractingUnitId
                                 ,ProjectTeamRole.CabPersonId
                                 ,ProjectDefinition.SequenceCode
                                 ,ProjectDefinition.Name
                                 ,CabPerson.FullName
                                 ,ProjectDefinition.ProjectConnectionString
                                 ,ProjectDefinition.Title AS ProjectTitle
                                 ,CabPersonCompany.Oid
                                FROM dbo.ProjectTeamRole
                                INNER JOIN dbo.ProjectTeam
                                  ON ProjectTeamRole.ProjectTeamId = ProjectTeam.Id
                                INNER JOIN dbo.ProjectDefinition
                                  ON ProjectTeam.ProjectId = ProjectDefinition.Id
                                INNER JOIN dbo.CabPerson
                                  ON ProjectTeamRole.CabPersonId = CabPerson.Id
                                INNER JOIN dbo.CabPersonCompany
                                  ON CabPersonCompany.PersonId = CabPerson.Id
                                WHERE ProjectDefinition.IsDeleted = 0
                                AND ProjectTeamRole.RoleId IN ('1666e217-2b80-4acd-b48b-b041fe263fb9', '476127cb-62db-4af7-ac8e-d4a722f8e142', '266a5f47-3489-484b-8dae-e4468c5329dn3') AND Oid IS NOT NULL";

        IEnumerable<VpProjectWithPm> projectWithPmList = null;
        using (var connectionDb = new SqlConnection(connection))
        {
            try
            {
                connectionDb.Open();
                projectWithPmList = connectionDb.Query<VpProjectWithPm>(projectWithPm);
            }
            catch (Exception e)
            {
            }
        }

        return projectWithPmList;
    }

    public async Task<List<PbsForVPDto>> GetPbsForVPMyEnv(VPParameter VPParameter, bool isMyEnv)
    {
        try
        {
            await using var connection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);
            
            var db = new List<ProjectDefinition>();

            if (VPParameter.IsCu)
            {
                if (VPParameter.PbsForVPDtoFilter.BusinessUnit.Any())
                {
                    var selectPmProject = @"SELECT
                                      ProjectDefinition.Id
                                     ,ProjectDefinition.Title
                                     ,ProjectDefinition.SequenceCode
                                     ,ProjectDefinition.ProjectConnectionString
                                     ,ProjectDefinition.ProjectManagerId
                                     ,ProjectDefinition.ProjectStatus
                                     ,CabCompany.SequenceCode AS ContractingUnitId
                                     ,ProjectDefinition.ProjectScopeStatusId
                                    FROM dbo.ProjectDefinition
                                    LEFT OUTER JOIN CabCompany
                                      ON ProjectDefinition.ContractingUnitId = CabCompany.Id
                                    LEFT OUTER JOIN dbo.ProjectClassification
                                      ON ProjectDefinition.Id = ProjectClassification.ProjectId
                                    LEFT OUTER JOIN dbo.ProjectTime pt
                                      ON ProjectDefinition.Id = pt.ProjectId
                                    WHERE ProjectDefinition.IsDeleted = 0
                                    AND ProjectClassification.ProjectClassificationBuisnessUnit IN (SELECT Id FROM dbo.OrganizationTaxonomy WHERE BuSequenceId IN @BuId)
                                    AND ProjectDefinition.ProjectScopeStatusId != '7bcb4e8d-8e8c-487d-8170-6b91c89fc3da' ";
                    
                    var sb1 = new StringBuilder(selectPmProject);

                    if (VPParameter.PbsForVPDtoFilter.ProjectTitle != null)
                    {
                        VPParameter.PbsForVPDtoFilter.ProjectTitle =
                            VPParameter.PbsForVPDtoFilter.ProjectTitle.Replace("'", "''");
                        sb1.Append(" AND ProjectDefinition.Title LIKE '%" +
                                   VPParameter.PbsForVPDtoFilter.ProjectTitle + "%'");
                    }
                     
                    sb1.Append(" ORDER BY pt.StartDate");
                
                    var buProject = connection
                        .Query<ProjectDefinition>(sb1.ToString(),new { BuId = VPParameter.PbsForVPDtoFilter.BusinessUnit }).ToList();

                    db.AddRange(buProject);
                }
            }

            else
            {
                // var selectPmProject =
                //     @"SELECT ProjectDefinition.Id,ProjectDefinition.Title, ProjectDefinition.ProjectConnectionString,ProjectDefinition.SequenceCode,CabCompany.SequenceCode AS ContractingUnitId,ProjectDefinition.ProjectScopeStatusId FROM dbo.ProjectDefinition LEFT OUTER JOIN CabCompany ON ProjectDefinition.ContractingUnitId = CabCompany.Id LEFT OUTER JOIN dbo.ProjectTime pt ON ProjectDefinition.Id = pt.ProjectId WHERE  ProjectDefinition.IsDeleted = 0 AND ProjectDefinition.ProjectManagerId = (SELECT PersonId FROM CabPersonCompany LEFT OUTER JOIN CabPerson cp ON CabPersonCompany.PersonId = cp.Id WHERE Oid = @Oid AND cp.IsDeleted = 0 AND CabPersonCompany.IsDeleted = 0) AND ProjectDefinition.ProjectScopeStatusId != '7bcb4e8d-8e8c-487d-8170-6b91c89fc3da' ORDER BY pt.StartDate ";

                var pmProject = connection
                    .Query<ProjectDefinition>(
                        "GetPbsForVPMyEnvSelectPmProjectByOid",
                        param:new
                        {
                            Oid = VPParameter.UserId
                        },commandType:CommandType.StoredProcedure).ToList();

                db.AddRange(pmProject);
            }
            
            db = db.DistinctBy(x => x.SequenceCode).ToList();

            var pbsData = new List<PbsForVPDto>();

            foreach (var project in db)
            {
                var pbs = new List<PbsForVPDto>();
                VPParameter.ContractingUnitSequenceId = project.ContractingUnitId;
                VPParameter.ProjectSequenceId = project.SequenceCode;

                pbs = await GetPbsForVP(VPParameter, isMyEnv);

                var projectTime = connection
                    .Query<ProjectTime>("SELECT * FROM ProjectTime WHERE ProjectId = @ProjectId",
                        new { ProjectId = project.Id }).FirstOrDefault();

                var projectNode = new PbsForVPDto
                {
                    Id = project.SequenceCode,
                    Title = project.Title,
                    Type = "Project",
                    StartDate = projectTime?.StartDate,
                    EndDate = projectTime?.EndDate,
                    TreeIndex = 0,
                    Project = project.SequenceCode,
                    ProjectStatus = project.ProjectStatus,
                    Cu = project.ContractingUnitId,
                    ProjectScopeStatusId = project.ProjectScopeStatusId
                };
                pbsData.Add(projectNode);
                pbsData.AddRange(pbs);
            }

            return pbsData;
        }
        catch (Exception e)
        {
            //Console.WriteLine(e);
            throw;
        }
    }


    public async Task<IEnumerable<TeamsWithPmolDto>> TeamsMyEnv(VPParameter VPParameter)
    {
        var options = new DbContextOptions<ShanukaDbContext>();
        var db = new List<Databases>();
        var teamsWithPmol = new List<TeamsWithPmolDto>();
        var exceptionLst = new List<DatabasesException>();
        var projectList = new List<string>();
        var projectManager = VPProjectPm(VPParameter.TenantProvider.GetTenant().ConnectionString);
        var pp = projectManager.Where(r => r.Oid == VPParameter.UserId);
        using (var dbconnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
        {
            var memberselect = @"SELECT Id,FullName As Name FROM [dbo].[CabPerson]";
            IEnumerable<PmolTeamMeber> members;
            members = dbconnection.Query<PmolTeamMeber>(memberselect);

            var vehical =
                @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber,PMolPlannedWorkTools.PmolId FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id INNER JOIN dbo.CorporateProductCatalog ON PMolPlannedWorkTools.CoperateProductCatalogId = CorporateProductCatalog.Id WHERE CorporateProductCatalog.ResourceFamilyId = '0c355800-91fd-4d99-8010-921a42f0ba04' AND PMolPlannedWorkTools.IsDeleted = 0";

            foreach (var project in pp)
                try
                {
                    // var connectionString = ConnectionString.MapConnectionString("COM-0001", project.SequenceCode,
                    //     VPParameter.TenantProvider);
                    var query = @"SELECT
                                  PMol.ProjectMoleculeId
                                 ,PmolTeamRole.CabPersonId
                                 ,PMol.Name
                                 ,PMol.Id
                                 ,PMol.ExecutionEndTime
                                 ,PMol.ExecutionStartTime
                                 ,PMol.ExecutionDate
                                 ,PMol.Title
                                 ,PMol.ProjectSequenceCode
                                FROM dbo.PMolPlannedWorkLabour
                                INNER JOIN dbo.PMol
                                  ON PMolPlannedWorkLabour.PmolId = PMol.Id
                                INNER JOIN dbo.PmolTeamRole
                                  ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id
                                WHERE PMolPlannedWorkLabour.IsDeleted = 0
                                AND PmolTeamRole.IsDeleted = 0
                                AND PmolTeamRole.CabPersonId IS NOT NULL
                                AND PMol.ExecutionDate BETWEEN @Startdate AND @Enddate
                                GROUP BY PMol.ProjectMoleculeId
                                        ,PmolTeamRole.CabPersonId
                                        ,PMol.Name
                                        ,PMol.Id
                                        ,PMol.ExecutionEndTime
                                        ,PMol.ExecutionStartTime
                                        ,PMol.ExecutionDate
                                        ,PMol.Title
                                        ,PMol.ProjectSequenceCode
                                ORDER BY PMol.ProjectMoleculeId DESC";

                    var query2 = @"SELECT
                                  PMol.ProjectMoleculeId
                                 ,PmolTeamRole.CabPersonId
                                 ,PMol.Name
                                 ,PMol.Id
                                 ,PMol.ExecutionEndTime
                                 ,PMol.ExecutionStartTime
                                 ,PMol.ExecutionDate
                                 ,PMol.Title
                                 ,PMol.ProjectSequenceCode
                                FROM dbo.PMolPlannedWorkLabour
                                INNER JOIN dbo.PMol
                                  ON PMolPlannedWorkLabour.PmolId = PMol.Id
                                INNER JOIN dbo.PmolTeamRole
                                  ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id
                                WHERE PMolPlannedWorkLabour.IsDeleted = 0
                                AND PmolTeamRole.IsDeleted = 0
                                AND PmolTeamRole.CabPersonId IS NOT NULL
                                GROUP BY PMol.ProjectMoleculeId
                                        ,PmolTeamRole.CabPersonId
                                        ,PMol.Name
                                        ,PMol.Id
                                        ,PMol.ExecutionEndTime
                                        ,PMol.ExecutionStartTime
                                        ,PMol.ExecutionDate
                                        ,PMol.Title
                                        ,PMol.ProjectSequenceCode
                                ORDER BY PMol.ProjectMoleculeId DESC";

                    IEnumerable<PmolTeam> pmol;
                    await using (var connection = new SqlConnection(project.ProjectConnectionString))
                    {
                        if (VPParameter.IsLabourHistory)
                            pmol = connection.Query<PmolTeam>(query2).ToList();
                        else
                            pmol = connection.Query<PmolTeam>(query,
                                new
                                {
                                    Enddate = VPParameter.GetTeamDto.EndDate,
                                    Startdate = VPParameter.GetTeamDto.StartDate
                                }).ToList();

                        var equallist = new List<string>();
                        var groupteams = pmol.GroupBy(r => r.ProjectMoleculeId);

                        IEnumerable<PomlVehicle> vehicals;
                        IEnumerable<PomlVehicle> vehicals1;
                        vehicals1 = connection.Query<PomlVehicle>(vehical)
                            .ToList();
                        foreach (var r in groupteams)
                        {
                            var list1 = new List<string>();
                            PomlList pomlList = null;
                            var teamsWithPmolDto = new TeamsWithPmolDto();
                            var pmolDatalist = new List<PmolData>();
                            var team = new List<PmolTeamMeber>();
                            var pmolData = new PmolData();
                            var equal = equallist.Any(item => item == r.Key);

                            if (equal == false)
                            {
                                foreach (var a in r)
                                {
                                    var member =
                                        members.Where(m => m.Id == a.CabPersonId).FirstOrDefault();


                                    var m = new PmolTeamMeber();
                                    m.Id = member.Id;
                                    m.Name = member.Name;
                                    team.Add(m);
                                    list1.Add(a.CabPersonId);
                                }

                                var first = r.First();
                                foreach (var b in groupteams)
                                {
                                    var pmolTeam = b.First();
                                    var pmolid2 = pmolTeam.ProjectMoleculeId;
                                    var list2 = new List<string>();
                                    if (b.Key != r.Key)
                                    {
                                        foreach (var c in b) list2.Add(c.CabPersonId);

                                        var result = list1.OrderBy(e => e).SequenceEqual(list2.OrderBy(e => e));

                                        if (result)
                                        {
                                            var pmolData1 = new PmolData();
                                            pmolData1.ProjectMoleculeId = b.Key;

                                            vehicals = vehicals1.Where(v => v.PmolId == b.Key).ToList();

                                            if (vehicals.Count() > 0)
                                                pmolData1.PomlVehical = (List<PomlVehicle>)vehicals;

                                            pmolData1.Id = pmolTeam.Id;
                                            pmolData1.Name = pmolTeam.Name;
                                            pmolData1.ExecutionStartTime = pmolTeam.ExecutionStartTime;
                                            pmolData1.ExecutionEndTime = pmolTeam.ExecutionEndTime;
                                            pmolData1.ExecutionDate = pmolTeam.ExecutionDate;
                                            pmolData1.ProjectSequenceCode = first.ProjectSequenceCode;
                                            pmolData1.Title = pmolTeam.Title;
                                            pmolDatalist.Add(pmolData1);
                                            equallist.Add(pmolid2);
                                        }
                                    }
                                }

                                pmolData.ProjectMoleculeId = r.Key;
                                vehicals = vehicals1.Where(v => v.PmolId == r.Key).ToList();
                                if (vehicals.Count() > 0) pmolData.PomlVehical = (List<PomlVehicle>)vehicals;

                                pmolData.Id = first.Id;
                                pmolData.Name = first.Name;
                                pmolData.ExecutionDate = first.ExecutionDate;
                                pmolData.ExecutionStartTime = first.ExecutionStartTime;
                                pmolData.ExecutionEndTime = first.ExecutionEndTime;
                                pmolData.ProjectSequenceCode = first.ProjectSequenceCode;
                                pmolData.Title = first.Title;
                                pmolDatalist.Add(pmolData);
                                teamsWithPmolDto.Pmol = pmolDatalist;
                                teamsWithPmolDto.Team = team;
                                teamsWithPmol.Add(teamsWithPmolDto);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    var mDatabasesException = new DatabasesException();
                    mDatabasesException.DatabaseName = project.SequenceCode;
                    mDatabasesException.Exception = ex;
                    exceptionLst.Add(mDatabasesException);
                }
        }

        return teamsWithPmol;
    }


    public async Task<IEnumerable<AvailableLWorkers>> AvailableTeamsMyEnv(VPParameter VPParameter)
    {
        var availableLWorkers = new List<AvailableLWorkers>();
        var projectManager = VPProjectPm(VPParameter.TenantProvider.GetTenant().ConnectionString);
        var pp = projectManager.Where(r => r.Oid == VPParameter.UserId);
        var cuconnectionString =
            ConnectionString.MapConnectionString("COM-0001", null, VPParameter.TenantProvider);

        var cabquery =
            @"SELECT DISTINCT VpHR.PersonId AS CabPersonCompanyId,VpHR.ProjectSequenceCode,CabPersonCompany.PersonId AS Id ,CabPerson.FullName AS Name ,HRHeader.SequenceId FROM dbo.VpHR INNER JOIN dbo.CabPersonCompany ON VpHR.PersonId = CabPersonCompany.Id LEFT OUTER JOIN dbo.CabPerson ON CabPersonCompany.PersonId = CabPerson.Id INNER JOIN dbo.HRHeader ON VpHR.PersonId = HRHeader.PersonId";

        var vehical =
            @"SELECT DISTINCT VpWH.CPCId AS CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber FROM dbo.VpWH LEFT OUTER JOIN dbo.CorporateProductCatalog ON VpWH.CPCId = CorporateProductCatalog.Id WHERE CorporateProductCatalog.ResourceFamilyId = '0c355800-91fd-4d99-8010-921a42f0ba04' ";

        List<PomlVehicle> vehicals;

        await using (var connection = new SqlConnection(cuconnectionString))
        {
            vehicals = connection.Query<PomlVehicle>(vehical, new { lang = VPParameter.Lang }).ToList();
        }

        await using (var dbconnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
        {
            var endDate = VPParameter.GetTeamDto.EndDate;
            var startDate = VPParameter.GetTeamDto.StartDate;

            for (var date = startDate.Date; date <= endDate.Date; date = date.AddDays(1))
            {
                IEnumerable<HRList> cablist;
                cablist = dbconnection.Query<HRList>(cabquery, new { lang = VPParameter.Lang }).ToList();
                foreach (var item in cablist)
                {
                    var absence =
                        @"SELECT AbsenceHeader.Id FROM dbo.AbsenceHeader where AbsenceHeader.Person = @Id AND @date BETWEEN AbsenceHeader.StartDate AND AbsenceHeader.EndDate";

                    HRList absenceId;

                    using (var connection =
                           new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
                    {
                        absenceId = connection.Query<HRList>(absence, new { Id = item.CabPersonCompanyId, date })
                            .FirstOrDefault();
                    }

                    if (absenceId != null) item.Absence = true;
                }


                var labourquery =
                    @"SELECT PmolTeamRole.CabPersonId ,PMol.ExecutionDate FROM dbo.PmolTeamRole INNER JOIN dbo.PMolPlannedWorkLabour ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id INNER JOIN dbo.PMol ON PMolPlannedWorkLabour.PmolId = PMol.Id WHERE PMol.ExecutionDate = @date AND PmolTeamRole.IsDeleted = 0";

                var tools =
                    @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id WHERE PMol.ExecutionDate = @date AND PMolPlannedWorkTools.IsDeleted = 0";

                IEnumerable<AvailableLabour> labour = null;
                IEnumerable<PomlVehicle> tool = null;

                Parallel.ForEach(pp, project =>
                {
                    try
                    {
                        // var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId, project.DatabaseName, VPParameter.TenantProvider);
                        using var connection = new SqlConnection(project.ProjectConnectionString);
                        labour = connection.Query<AvailableLabour>(labourquery, new { date = date.Date })
                            .ToList();
                        tool = connection.Query<PomlVehicle>(tools, new { date = date.Date }).ToList();
                    }
                    catch (Exception ex)
                    {
                        var mDatabasesException = new DatabasesException
                        {
                            DatabaseName = project.ProjectTitle,
                            Exception = ex
                        };
                    }
                });

                if (tool.Any())
                    Parallel.ForEach(tool, i =>
                    {
                        vehicals = vehicals.Where(r => r.CoperateProductCatalogId != i.CoperateProductCatalogId)
                            .ToList();
                    });

                if (labour.Any())
                {
                    var groupteams = labour.GroupBy(r => r.ExecutionDate);

                    Parallel.ForEach(groupteams, a =>
                    {
                        var cabpearsonList = new List<HRList>();
                        var availableLWorker = new AvailableLWorkers();
                        Parallel.ForEach(cablist, b =>
                        {
                            var i = 0;
                            foreach (var c in a)
                            {
                                i += 1;
                                if (c.CabPersonId == b.Id && b.Absence == false) break;

                                if (i == a.Count()) cabpearsonList.Add(b);
                            }
                        });

                        availableLWorker.day = date;
                        availableLWorker.Workers = cabpearsonList;
                        availableLWorker.Vehicle = vehicals.ToList();
                        availableLWorkers.Add(availableLWorker);
                    });
                }

                else
                {
                    var availableLWorker = new AvailableLWorkers
                    {
                        day = date,
                        Workers = cablist.ToList(),
                        Vehicle = vehicals.ToList()
                    };
                    availableLWorkers.Add(availableLWorker);
                }
            }
        }

        return availableLWorkers;
    }


    public async Task<GetByDate> GeTLabourTeamsAndToolsByDateMyEnv(VPParameter VPParameter)
    {
        var cuconnectionString =
            ConnectionString.MapConnectionString("COM-0001", null, VPParameter.TenantProvider);

        var projectList = new List<string>();
        var projectManager = VPProjectPm(VPParameter.TenantProvider.GetTenant().ConnectionString);
        var pp = projectManager.Where(r => r.Oid == VPParameter.UserId);


        try
        {
            var data = new GetByDate();
            var labourList = new List<GetVpHR>();
            var toolsList = new List<GetVpWHDto>();

            var labourQuery =
                "SELECT VpHR.Id , VpHR.PoId,VpHR.ProjectSequenceCode,VpHR.PersonId,VpHR.CPCId,VpHR.StartDate,VpHR.EndDate FROM VpHR WHERE PersonId IS NOT NULL AND ProjectSequenceCode = @ProjectSequenceCode";

            var toolsQuery =
                "SELECT VpWH.Id , VpWH.PoId,VpWH.ProjectSequenceCode,VpWH.CPCId,VpWH.StartDate,VpWH.EndDate FROM VpWH WHERE CPCId IS NOT NULL AND ProjectSequenceCode = @ProjectSequenceCode";

            foreach (var projectSequence in pp)
            {
                var connectionString = ConnectionString.MapConnectionString("COM-0001",
                    projectSequence.SequenceCode, VPParameter.TenantProvider);


                var parameters = new
                {
                    ProjectSequenceCode = projectSequence.SequenceCode
                };
                IEnumerable<GetVpWHDto> Tools;
                using (var connection = new SqlConnection(cuconnectionString))
                {
                    Tools = connection.Query<GetVpWHDto>(toolsQuery, parameters).ToList();
                }

                IEnumerable<GetVpHR> LabourTeam;
                using (var connection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
                {
                    LabourTeam = connection.Query<GetVpHR>(labourQuery, parameters).ToList();
                }

                var result = LabourTeam.GroupBy(r => r.PersonId);

                var ToolsResult = Tools.GroupBy(r => r.CPCId);


                foreach (var i in result)
                {
                    var labourItem = new GetVpHR();
                    string name = null;
                    IEnumerable<GetPmolLabourTeams> labourTeam;
                    var labourTime = new List<GetVpHR>();
                    if (i.Key != null)
                    {
                        using (var connection =
                               new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
                        {
                            name = connection
                                .Query<string>(
                                    "SELECT CabPerson.FullName FROM dbo.CabPersonCompany INNER JOIN dbo.CabPerson ON CabPersonCompany.PersonId = CabPerson.Id WHERE CabPersonCompany.Id = @Id",
                                    new { Id = i.Key }).FirstOrDefault();
                        }

                        using (var connection = new SqlConnection(connectionString))
                        {
                            labourTeam = connection.Query<GetPmolLabourTeams>(
                                "SELECT * FROM PmolLabourTeams WHERE PersonId = @Id", new { Id = i.Key });
                        }

                        labourItem.Id = Guid.NewGuid().ToString();
                        labourItem.PersonId = i.Key;
                        labourItem.Title = name;
                        labourItem.ParentId = null;
                        labourItem.Type = "labour";
                        labourItem.ProjectSequenceCode = projectSequence.SequenceCode;


                        foreach (var k in labourTeam)
                        {
                            var labourItemDate = new GetVpHR();
                            labourItemDate.Id = k.Id;
                            labourItemDate.PersonId = k.PersonId;
                            labourItemDate.StartDate = k.StartDate;
                            labourItemDate.EndDate = k.EndDate;
                            labourItemDate.ParentId = labourItem.Id;
                            labourItemDate.Type = "LabourItemDate";
                            labourItemDate.Title = k.PmolId;
                            labourItemDate.ProjectSequenceCode = projectSequence.SequenceCode;

                            labourTime.Add(labourItemDate);
                            labourList.Add(labourItemDate);
                        }

                        labourItem.StartDate = labourTime.Min(r => r.StartDate);
                        labourItem.EndDate = labourTime.Max(r => r.EndDate);
                        labourList.Add(labourItem);
                    }
                }

                //data.LabourTeam.AddRange(labourList);


                foreach (var i in ToolsResult)
                {
                    var toolsItem = new GetVpWHDto();
                    IEnumerable<GetPmolToolsPool> toolTeam;
                    var toolsTime = new List<GetVpWHDto>();
                    string title = null;
                    if (i.Key != null)
                    {
                        using (var connection = new SqlConnection(cuconnectionString))
                        {
                            title = connection
                                .Query<string>(
                                    "SELECT CorporateProductCatalog.Title FROM dbo.CorporateProductCatalog WHERE CorporateProductCatalog.Id = @Id",
                                    new { Id = i.Key }).FirstOrDefault();
                        }

                        using (var connection = new SqlConnection(connectionString))
                        {
                            toolTeam = connection.Query<GetPmolToolsPool>(
                                "SELECT * FROM PmolToolsPool WHERE CPCId = @CPCId", new { CPCId = i.Key });
                        }

                        toolsItem.Id = Guid.NewGuid().ToString();
                        toolsItem.CPCId = i.Key;
                        toolsItem.Title = title;
                        toolsItem.ParentId = null;
                        toolsItem.Type = "Tools";
                        toolsItem.ProjectSequenceCode = projectSequence.SequenceCode;


                        foreach (var k in toolTeam)
                        {
                            var toolsItemDate = new GetVpWHDto();
                            toolsItemDate.Id = k.Id;

                            toolsItemDate.CPCId = k.CPCId;
                            toolsItemDate.StartDate = k.StartDate;
                            toolsItemDate.EndDate = k.EndDate;
                            toolsItemDate.ParentId = toolsItem.Id;
                            toolsItemDate.Type = "LabourItemDate";
                            toolsItemDate.Title = k.PmolId;
                            toolsItemDate.ProjectSequenceCode = projectSequence.SequenceCode;

                            toolsTime.Add(toolsItemDate);
                            toolsList.Add(toolsItemDate);
                        }

                        toolsItem.StartDate = toolsTime.Min(r => r.StartDate);
                        toolsItem.EndDate = toolsTime.Max(r => r.EndDate);
                        toolsList.Add(toolsItem);
                    }
                }

                // data.Tools.AddRange(toolsList);
            }

            data.LabourTeam = labourList;
            data.Tools = toolsList;
            //data.LabourTeam = LabourTeam;
            //data.Tools = Tools;
            return data;
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    public async Task<IEnumerable<TeamsWithPmolDto>> TeamsForPowerBi(VPParameter VPParameter)
    {
        var sdate = DateTime.UtcNow.AddDays(-30);
        var edate = DateTime.UtcNow;


        var options = new DbContextOptions<ShanukaDbContext>();
        var db = new List<Databases>();
        var teamsWithPmol = new List<TeamsWithPmolDto>();

        string env = null;
        if (VPParameter.TenantProvider.GetTenant().ConnectionString.Contains("uprincev4uatdb"))
        {
            env = "uprincev4uatdb";
        }
        else if (VPParameter.TenantProvider.GetTenant().ConnectionString.Contains("uprincev4einstein"))
        {
            env = "uprincev4einstein";
            ;
        }

        var exceptionLst = new List<DatabasesException>();
        using (var dbconnection = new SqlConnection("Server=tcp:" + env +
                                                    ".database.windows.net,1433;Initial Catalog=master;Persist Security Info=False;User ID=uprincedbuser;Password=UPrince2017!;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"))
        {
            db = dbconnection.Query<Databases>(
                    @"select [name] as DatabaseName from sys.databases WHERE name NOT IN('master', 'MsalTokenCacheDatabase', 'UPrinceV4EinsteinCatelog', 'UPrinceV4UATCatelog','COM0001','COM0002','COM0053','UPrinceV4ProjectTemplate') order by name")
                .ToList();

            var pmData = new List<VpProjectWithPm>();
            var pm = VPProjectPm(VPParameter.TenantProvider.GetTenant().ConnectionString);

            pmData = pm.ToList();

            foreach (var project in db)
                try
                {
                    VpProjectWithPm pms;
                    pms = pmData.Where(i => i.SequenceCode == project.DatabaseName).FirstOrDefault();

                    var connectionString = ConnectionString.MapConnectionString(
                        VPParameter.ContractingUnitSequenceId, project.DatabaseName, VPParameter.TenantProvider);
                    var query = @"SELECT
                                  PMol.ProjectMoleculeId
                                 ,PmolTeamRole.CabPersonId
                                 ,PMol.Name
                                 ,PMol.Id
                                 ,PMol.ExecutionEndTime
                                 ,PMol.ExecutionStartTime
                                 ,PMol.ExecutionDate
                                 ,PMol.Title
                                 ,PMol.ProjectSequenceCode
                                FROM dbo.PMolPlannedWorkLabour
                                INNER JOIN dbo.PMol
                                  ON PMolPlannedWorkLabour.PmolId = PMol.Id
                                INNER JOIN dbo.PmolTeamRole
                                  ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id
                                WHERE PMolPlannedWorkLabour.IsDeleted = 0
                                AND PmolTeamRole.CabPersonId IS NOT NULL
                                AND PMol.ExecutionDate BETWEEN @Startdate AND @Enddate
                                GROUP BY PMol.ProjectMoleculeId
                                        ,PmolTeamRole.CabPersonId
                                        ,PMol.Name
                                        ,PMol.Id
                                        ,PMol.ExecutionEndTime
                                        ,PMol.ExecutionStartTime
                                        ,PMol.ExecutionDate
                                        ,PMol.Title
                                        ,PMol.ProjectSequenceCode
                                ORDER BY PMol.ProjectMoleculeId DESC";

                    var query2 = @"SELECT
                                  PMol.ProjectMoleculeId
                                 ,PmolTeamRole.CabPersonId
                                 ,PMol.Name
                                 ,PMol.Id
                                 ,PMol.ExecutionEndTime
                                 ,PMol.ExecutionStartTime
                                 ,PMol.ExecutionDate
                                 ,PMol.Title
                                 ,PMol.ProjectSequenceCode
                                FROM dbo.PMolPlannedWorkLabour
                                INNER JOIN dbo.PMol
                                  ON PMolPlannedWorkLabour.PmolId = PMol.Id
                                INNER JOIN dbo.PmolTeamRole
                                  ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id
                                WHERE PMolPlannedWorkLabour.IsDeleted = 0
                                AND PmolTeamRole.CabPersonId IS NOT NULL
                                GROUP BY PMol.ProjectMoleculeId
                                        ,PmolTeamRole.CabPersonId
                                        ,PMol.Name
                                        ,PMol.Id
                                        ,PMol.ExecutionEndTime
                                        ,PMol.ExecutionStartTime
                                        ,PMol.ExecutionDate
                                        ,PMol.Title
                                        ,PMol.ProjectSequenceCode
                                ORDER BY PMol.ProjectMoleculeId DESC";

                    IEnumerable<PmolTeam> pmol;

                    if (VPParameter.IsLabourHistory)
                        using (var connection = new SqlConnection(connectionString))
                        {
                            pmol = connection.Query<PmolTeam>(query2).ToList();
                        }
                    else
                        using (var connection = new SqlConnection(connectionString))
                        {
                            pmol = connection.Query<PmolTeam>(query, new { Enddate = edate, Startdate = sdate })
                                .ToList();
                        }

                    var equallist = new List<string>();
                    var groupteams = pmol.GroupBy(r => r.ProjectMoleculeId);

                    var vehical = @"SELECT
                                      PMolPlannedWorkTools.CoperateProductCatalogId
                                    ,CorporateProductCatalog.Title
                                    ,CorporateProductCatalog.ResourceNumber
                                    FROM dbo.PMolPlannedWorkTools
                                    INNER JOIN dbo.PMol
                                      ON PMolPlannedWorkTools.PmolId = PMol.Id
                                    INNER JOIN dbo.CorporateProductCatalog
                                      ON PMolPlannedWorkTools.CoperateProductCatalogId = CorporateProductCatalog.Id
                                    WHERE CorporateProductCatalog.ResourceFamilyId = '0c355800-91fd-4d99-8010-921a42f0ba04'
                                    AND PMol.ProjectMoleculeId = @Id";

                    IEnumerable<PomlVehicle> vehicals;


                    foreach (var r in groupteams)
                    {
                        var list1 = new List<string>();
                        PomlList pomlList = null;
                        var teamsWithPmolDto = new TeamsWithPmolDto();
                        var pmolDatalist = new List<PmolData>();
                        var team = new List<PmolTeamMeber>();
                        var pmolData = new PmolData();
                        var equal = equallist.Any(item => item == r.Key);

                        if (equal == false)
                        {
                            foreach (var a in r)
                            {
                                PmolTeamMeber member;
                                var memberselect =
                                    @"SELECT Id,FullName As Name FROM [dbo].[CabPerson] where Id = @Id";

                                using (var connection =
                                       new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
                                {
                                    member = connection.Query<PmolTeamMeber>(memberselect, new { Id = a.CabPersonId })
                                        .FirstOrDefault();
                                }

                                var m = new PmolTeamMeber();
                                m.Id = member.Id;
                                m.Name = member.Name;
                                team.Add(m);
                                list1.Add(a.CabPersonId);
                            }

                            foreach (var b in groupteams)
                            {
                                var pmolid2 = b.First().ProjectMoleculeId;
                                var list2 = new List<string>();
                                if (b.Key != r.Key)
                                {
                                    foreach (var c in b) list2.Add(c.CabPersonId);

                                    var result = list1.OrderBy(e => e).SequenceEqual(list2.OrderBy(e => e));

                                    if (result)
                                    {
                                        var pmolData1 = new PmolData();
                                        pmolData1.ProjectMoleculeId = b.Key;
                                        using (var connection = new SqlConnection(connectionString))
                                        {
                                            vehicals = connection.Query<PomlVehicle>(vehical, new { Id = b.Key })
                                                .ToList();
                                        }

                                        if (vehicals.Count() > 0) pmolData1.PomlVehical = (List<PomlVehicle>)vehicals;

                                        pmolData1.Id = b.First().Id;
                                        pmolData1.Name = b.First().Name;
                                        pmolData1.ExecutionStartTime = b.First().ExecutionStartTime;
                                        pmolData1.ExecutionEndTime = b.First().ExecutionEndTime;
                                        pmolData1.ExecutionDate = b.First().ExecutionDate;
                                        pmolData1.ProjectSequenceCode = r.First().ProjectSequenceCode;
                                        pmolData1.Title = r.First().Title;
                                        if (pms != null)
                                        {
                                            pmolData1.ProjectManager = pms.FullName;
                                            pmolData1.ProjectTitle = pms.ProjectTitle;
                                        }

                                        pmolDatalist.Add(pmolData1);
                                        equallist.Add(pmolid2);
                                    }
                                }
                            }

                            pmolData.ProjectMoleculeId = r.Key;
                            using (var connection = new SqlConnection(connectionString))
                            {
                                vehicals = connection.Query<PomlVehicle>(vehical, new { Id = r.Key }).ToList();
                            }

                            if (vehicals.Count() > 0) pmolData.PomlVehical = (List<PomlVehicle>)vehicals;

                            pmolData.Id = r.First().Id;
                            pmolData.Name = r.First().Name;
                            pmolData.ExecutionDate = r.First().ExecutionDate;
                            pmolData.ExecutionStartTime = r.First().ExecutionStartTime;
                            pmolData.ExecutionEndTime = r.First().ExecutionEndTime;
                            pmolData.ProjectSequenceCode = r.First().ProjectSequenceCode;
                            pmolData.Title = r.First().Title;
                            if (pms != null)
                            {
                                pmolData.ProjectManager = pms.FullName;
                                pmolData.ProjectTitle = pms.ProjectTitle;
                            }

                            pmolDatalist.Add(pmolData);

                            teamsWithPmolDto.Pmol = pmolDatalist;
                            teamsWithPmolDto.Team = team;
                            teamsWithPmol.Add(teamsWithPmolDto);
                        }
                    }
                }
                catch (Exception ex)
                {
                    var mDatabasesException = new DatabasesException();
                    mDatabasesException.DatabaseName = project.DatabaseName;
                    mDatabasesException.Exception = ex;
                    exceptionLst.Add(mDatabasesException);
                }
        }

        return teamsWithPmol;
    }

    public async Task<string> UpdateBorPbsForVp(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

        await using var dbConnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);
        await using var connection = new SqlConnection(connectionString);

        try
        {
            var parm = new
            {
                VPParameter.UpdateBorPbsForVp.StartDate,
                VPParameter.UpdateBorPbsForVp.EndDate,
                VPParameter.UpdateBorPbsForVp.SequenceId
            };
            switch (VPParameter.UpdateBorPbsForVp.Type)
            {
                case "BOR":
                {
                    var query =
                        @"UPDATE dbo.Bor SET EndDate = @EndDate,StartDate = @StartDate WHERE ItemId = @SequenceId";
                    
                        await connection.ExecuteAsync(query, parm);
                    break;
                }
                case "PBS":
                {

                    var mProduct = connection.Query<PbsProduct>(@"SELECT * FROM PbsProduct WHERE ProductId = @SequenceId",
                        new { VPParameter.UpdateBorPbsForVp.SequenceId }).FirstOrDefault();

                    var query =
                        "UPDATE dbo.PbsProduct SET EndDate = @EndDate ,StartDate = @StartDate WHERE ProductId = @SequenceId";
                
                    if (mProduct!.StartDate != VPParameter.UpdateBorPbsForVp.StartDate &&
                        mProduct.EndDate != VPParameter.UpdateBorPbsForVp.EndDate)
                    {
                        var childPbs = connection.Query<PbsTreeStructure>("""
                                                                          WITH ret
                                                                                                                                                      AS
                                                                                                                                                      (SELECT
                                                                                                                                                      *
                                                                                                                                                      FROM PbsProduct
                                                                                                                                                      WHERE ProductId = @SequenceId
                                                                                                                                                      UNION ALL
                                                                                                                                                      SELECT
                                                                                                                                                      t.*
                                                                                                                                                      FROM PbsProduct t
                                                                                                                                                      INNER JOIN ret r
                                                                                                                                                      ON t.ParentId = r.ProductId
                                                                                                                                                      )
                                                                                                                                                      SELECT
                                                                                                                                                      ret.Id ,Title ,StartDate ,EndDate ,ProductId AS PbsSequenceId ,ParentId, t4.TreeIndex
                                                                                                                                                      FROM ret LEFT OUTER JOIN PbsTreeIndex t4 ON ret.ProductId = t4.PbsProductId
                                                                                                                                                      WHERE ret.ProductId != @SequenceId AND ret.IsDeleted = 0
                                                                          """,
                            new { VPParameter.UpdateBorPbsForVp.SequenceId }).ToList();

                        if (childPbs.Count != 0)
                        {
                            var dif = (VPParameter.UpdateBorPbsForVp.StartDate.Value - mProduct.StartDate.Value).Days;

                            foreach (var parm2 in childPbs.Select(i => new
                                     {
                                         StartDate = i.StartDate!.Value.AddDays(dif),
                                         EndDate = i.EndDate!.Value.AddDays(dif),
                                         SequenceId = i.PbsSequenceId
                                     }))
                            {
                                await connection.ExecuteAsync(query, parm2);
                            }
                        }
                    }
                    
                    await connection.ExecuteAsync(query, parm);

                    var parentPbs = connection.Query<PbsTreeStructure>("""
                                                                       with name_tree as
                                                                                                                                               (SELECT
                                                                                                                                                 Id ,Title ,StartDate ,EndDate ,ProductId AS PbsSequenceId ,ParentId
                                                                                                                                               FROM dbo.PbsProduct
                                                                                                                                               WHERE PbsProduct.ProductId = @SequenceId
                                                                                                                                                 UNION ALL
                                                                                                                                                 SELECT c.Id, c.Title ,c.StartDate ,c.EndDate ,c.ProductId AS PbsSequenceId ,c.ParentId
                                                                                                                                                 FROM dbo.PbsProduct c
                                                                                                                                                 JOIN name_tree p on p.ParentId = c.ProductId)
                                                                                                                                                 select *
                                                                                                                                                 from name_tree
                                                                       """,
                        new { VPParameter.UpdateBorPbsForVp.SequenceId }).ToList();


                    if (parentPbs.Count != 0)
                        foreach (var item in parentPbs)
                        {
                            var childPbs = connection.Query<PbsTreeStructure>("""
                                                                              WITH ret
                                                                                                                                                          AS
                                                                                                                                                          (SELECT
                                                                                                                                                          *
                                                                                                                                                          FROM PbsProduct
                                                                                                                                                          WHERE Id = @Id
                                                                                                                                                          UNION ALL
                                                                                                                                                          SELECT
                                                                                                                                                          t.*
                                                                                                                                                          FROM PbsProduct t
                                                                                                                                                          INNER JOIN ret r
                                                                                                                                                          ON t.ParentId = r.ProductId
                                                                                                                                                          )
                                                                                                                                                          SELECT
                                                                                                                                                          ret.Id ,Title ,StartDate ,EndDate ,ProductId AS PbsSequenceId ,ParentId, t4.TreeIndex
                                                                                                                                                          FROM ret LEFT OUTER JOIN PbsTreeIndex t4 ON ret.ProductId = t4.PbsProductId
                                                                                                                                                          WHERE ret.Id != @Id AND ret.IsDeleted = 0
                                                                              """,
                                new { item.Id }).ToList();

                            if (childPbs.Count != 0)
                            {
                                var maxEndDate = childPbs.Max(x => x.EndDate);
                                var minStartDate = childPbs.Min(x => x.StartDate);

                                maxEndDate ??= item.EndDate;
                                // else if (maxEndDate < item.EndDate) maxEndDate = item.EndDate;
                                // if (minStartDate == null)
                                //     minStartDate = item.StartDate;
                                // else if (minStartDate > item.StartDate) minStartDate = item.StartDate;

                                var parm2 = new
                                {
                                    StartDate = minStartDate,
                                    EndDate = maxEndDate,
                                    SequenceId = item.PbsSequenceId
                                };
                                await connection.ExecuteAsync(query, parm2);
                            }
                        }
                
                    var pbs =  connection.Query<PbsProduct>("SELECT * FROM dbo.PbsProduct WHERE IsDeleted = 0 AND StartDate IS NOT NULL AND EndDate IS NOT NULL ").ToList();

                    var maxEDate = pbs.Max(x => x.EndDate);
                    var minSDate = pbs.Min(x => x.StartDate);
                
                    const string pQuery = @"Update ProjectTime SET StartDate = @startDate, EndDate = @endDate  WHERE ProjectId = (SELECT Id FROM ProjectDefinition  WHERE SequenceCode = @project)";

                    await dbConnection.ExecuteAsync(pQuery,
                        new
                        {
                            startDate = minSDate,
                            endDate = maxEDate,
                            project = VPParameter.ProjectSequenceId
                        });
                
                    await UpdateProjectDates(VPParameter);

                    var mPbsAssignedLabourDto = new PbsAssignedLabourDto()
                    {
                        PbsProduct = VPParameter.UpdateBorPbsForVp.SequenceId,
                        Project = VPParameter.ProjectSequenceId
                    };
                    var pbsResourceParameter = new PbsResourceParameters()
                    {
                        ContractingUnitSequenceId = VPParameter.ContractingUnitSequenceId,
                        TenantProvider = VPParameter.TenantProvider,
                        PbsAssignedLabour = mPbsAssignedLabourDto
                    };
                
                    await VPParameter.PbsResourceRepository.PbsLabourAssignReCalculate(pbsResourceParameter);
                    break;
                }
            }

            switch (VPParameter.UpdateBorPbsForVp.Type)
            {
                case "PMOL":
                {
                    var query =
                        @"UPDATE dbo.PMol  SET ExecutionDate = @ExecutionDate ,ExecutionEndTime = @ExecutionEndTime,ExecutionStartTime = @ExecutionStartTime WHERE ProjectMoleculeId = @SequenceId";
                    var updatelabour =
                        @"UPDATE PmolLabourTeams SET StartDate = @StartDate, EndDate = @EndDate WHERE PmolId = @SequenceId";
                    var updateTools =
                        @"UPDATE PmolToolsPool SET StartDate = @StartDate, EndDate = @EndDate WHERE PmolId = @SequenceId";

                    var parm2 = new
                    {
                        ExecutionDate = VPParameter.UpdateBorPbsForVp.StartDate.Value.Date,
                        ExecutionStartTime = VPParameter.UpdateBorPbsForVp.StartDate.Value.TimeOfDay,
                        ExecutionEndTime = VPParameter.UpdateBorPbsForVp.EndDate.Value.TimeOfDay,
                        VPParameter.UpdateBorPbsForVp.SequenceId
                    };
                    var param2 = new
                    {
                        VPParameter.UpdateBorPbsForVp.StartDate,
                        VPParameter.UpdateBorPbsForVp.EndDate,
                        VPParameter.UpdateBorPbsForVp.SequenceId
                    };
                
                    await connection.ExecuteAsync(query, parm2);
                    await connection.ExecuteAsync(updatelabour, param2);
                    await connection.ExecuteAsync(updateTools, param2);
                    break;
                }
                case "Project":
                {
                    var mProject = dbConnection.Query<ProjectTime>(@"SELECT * FROM dbo.ProjectTime LEFT OUTER JOIN ProjectDefinition pd ON ProjectTime.ProjectId = pd.Id WHERE pd.SequenceCode = @project", new {project = VPParameter.UpdateBorPbsForVp.SequenceId }).FirstOrDefault();
                
                    if (mProject!.StartDate != VPParameter.UpdateBorPbsForVp.StartDate ||
                        mProject.EndDate != VPParameter.UpdateBorPbsForVp.EndDate)
                    {
                        const string query = @"UPDATE dbo.PbsProduct SET EndDate = @EndDate ,StartDate = @StartDate WHERE ProductId = @SequenceId";
                    
                        var sdif = (VPParameter.UpdateBorPbsForVp.StartDate.Value - mProject.StartDate.Value).Days;
                    
                        var edif = (VPParameter.UpdateBorPbsForVp.EndDate.Value - mProject.EndDate.Value).Days;
                    
                    
                        var pbs =  connection.Query<PbsProduct>("SELECT * FROM dbo.PbsProduct WHERE IsDeleted = 0 AND StartDate IS NOT NULL AND EndDate IS NOT NULL ").ToList();

                        foreach (var parm3 in pbs.Select(i => new
                                 {
                                     StartDate = i.StartDate!.Value.AddDays(sdif),
                                     EndDate = i.EndDate!.Value.AddDays(edif),
                                     SequenceId = i.ProductId
                                 }))
                        {
                            await connection.ExecuteAsync(query, parm3);
                        }
                    
                    }
                
                    const string pQuery = @"Update ProjectTime SET StartDate = @startDate, EndDate = @endDate  WHERE ProjectId = (SELECT Id FROM ProjectDefinition  WHERE SequenceCode = @project)";

                    await dbConnection.ExecuteAsync(pQuery,
                        new
                        {
                            startDate = VPParameter.UpdateBorPbsForVp.StartDate,
                            endDate = VPParameter.UpdateBorPbsForVp.EndDate,
                            project = VPParameter.UpdateBorPbsForVp.SequenceId
                        });
                    break;
                }
            }

            return VPParameter.UpdateBorPbsForVp.SequenceId;
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    public async Task<string> UpdateProjectDates(VPParameter vpParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(vpParameter.ContractingUnitSequenceId,
            vpParameter.ProjectSequenceId, vpParameter.TenantProvider);

        await using var connection = new SqlConnection(connectionString);

        var pbs = connection.Query<PbsProduct>("SELECT * FROM dbo.PbsProduct WHERE IsDeleted = 0").ToList();

        const string updateProject = @"UPDATE dbo.ProjectTime  SET StartDate = @StartDate,EndDate = @EndDate WHERE ProjectId = (SELECT Id FROM ProjectDefinition pd WHERE pd.SequenceCode = @ProjectSequenceId)";

        await connection.ExecuteAsync(updateProject,
            new { StartDate = pbs.Min(x => x.StartDate), EndDate = pbs.Max(x => x.EndDate),vpParameter.ProjectSequenceId});
        
        return vpParameter.ProjectSequenceId;
    }

    public async Task<IEnumerable<VpWHTaxonomyListDto>> GetVpWHMyEnv(VPParameter VPParameter)
    {
        var connectionString =
            ConnectionString.MapConnectionString("COM-0001", null, VPParameter.TenantProvider);


        var query =
            @"SELECT WHTaxonomy.Id,WHTaxonomy.WareHouseId,WHTaxonomy.ParentId,WHTaxonomy.WHTaxonomyLevelId,WHTaxonomy.Title,WHTaxonomy.StartDate,WHTaxonomy.EndDate ,WHTaxonomyLevel.DisplayOrder,WHTaxonomyLevel.IsChildren FROM dbo.WHTaxonomy LEFT OUTER JOIN dbo.WHTaxonomyLevel ON WHTaxonomy.WHTaxonomyLevelId = WHTaxonomyLevel.LevelId WHERE (WHTaxonomyLevel.LanguageCode = @lang OR WHTaxonomy.WHTaxonomyLevelId IS NULL)";
        var stockQuery =
            @"SELECT StockHeader.Id ,StockHeader.CPCId AS CPCId ,StockHeader.WareHouseTaxonomyId AS ParentId ,StockHeader.TypeId AS ResourceTypeId ,CorporateProductCatalog.Title AS Title ,WHTaxonomy.WHTaxonomyLevelId ,WHTaxonomy.WareHouseId FROM dbo.StockHeader LEFT OUTER JOIN dbo.CorporateProductCatalog ON StockHeader.CPCId = CorporateProductCatalog.Id LEFT OUTER JOIN dbo.WHTaxonomy ON StockHeader.WareHouseTaxonomyId = WHTaxonomy.Id LEFT OUTER JOIN dbo.CpcResourceFamilyLocalizedData ON CpcResourceFamilyLocalizedData.CpcResourceFamilyId = CorporateProductCatalog.ResourceFamilyId WHERE StockHeader.TypeId = 'c46c3a26-39a5-42cc-n9wn-89655304eh6' AND CpcResourceFamilyId = '0c355800-91fd-4d99-8010-921a42f0ba04' AND CpcResourceFamilyLocalizedData.LanguageCode = @lang";

        var wHQuery = "SELECT  VpWH.*, CONCAT(StartDate,' - ',EndDate) AS Title FROM VpWH";

        var sb = new StringBuilder(query);

        if (VPParameter.WHTaxonomyFilter.WareHouseId != null)
            sb.Append(" AND WHTaxonomy.WareHouseId = '" + VPParameter.WHTaxonomyFilter.WareHouseId + "'");

        var parameters = new { lang = VPParameter.Lang };
        List<VpWHTaxonomyListDto> data;
        List<VpWHTaxonomyListDto> whList;
        using (var connection = new SqlConnection(connectionString))
        {
            await connection.OpenAsync();

            data = connection.Query<VpWHTaxonomyListDto>(sb.ToString(), parameters).ToList();
            data.AddRange(connection.Query<VpWHTaxonomyListDto>(stockQuery, new { lang = VPParameter.Lang }).ToList());
            data.AddRange(connection.Query<VpWHTaxonomyListDto>(wHQuery).ToList());

            whList = connection.Query<VpWHTaxonomyListDto>(wHQuery).ToList();

            var result = whList.GroupBy(r => r.ParentId);
            var percentageResult = whList.GroupBy(r => r.CPCId);

            foreach (var i in result)
            {
                if (i.Key != null)
                {
                    DateTime end;
                    DateTime start;
                    end = (DateTime)i.Max(t => t.EndDate);
                    start = (DateTime)i.Min(t => t.StartDate);

                    var hh = new List<double>();

                    //foreach (var k in i)
                    //{
                    //    DateTime kEndDate;
                    //    DateTime kStartDate;
                    //    kEndDate = (DateTime)k.EndDate;
                    //    kStartDate = (DateTime)k.StartDate;
                    //    var ff = (kEndDate - kStartDate).TotalDays;

                    //    hh.Add(ff);

                    //}

                    //var bb = hh.Sum();

                    //var precentage = (bb / (end - start).TotalDays) * 100;

                    var whData = data.Where(k => k.CPCId + k.ParentId == i.Key).FirstOrDefault();

                    if (whData != null)
                    {
                        //whData.Percentage = precentage;
                        whData.StartDate = start;
                        whData.EndDate = end;
                    }
                }

                
            }

            foreach (var j in percentageResult)
                if (j.Key != null)
                {
                    DateTime end;
                    DateTime start;
                    end = (DateTime)j.Max(t => t.EndDate);
                    start = (DateTime)j.Min(t => t.StartDate);

                    var hh = new List<double>();

                    foreach (var k in j)
                    {
                        DateTime kEndDate;
                        DateTime kStartDate;
                        kEndDate = (DateTime)k.EndDate;
                        kStartDate = (DateTime)k.StartDate;
                        var ff = (kEndDate - kStartDate).TotalDays;

                        hh.Add(ff);
                    }

                    var bb = hh.Sum();

                    var precentage = bb / (end - start).TotalDays * 100;

                    var whData = data.Where(k =>
                        k.CPCId == j.Key && k.ResourceTypeId == "c46c3a26-39a5-42cc-n9wn-89655304eh6");

                    if (whData != null)
                        foreach (var t in whData)
                            t.Percentage = precentage;
                }
        }

        return data;
    }

    public async Task<IEnumerable<VpWHTaxonomyListDto>> GetVpWHToolMyEnv(VPParameter VPParameter)
    {
        var connectionString =
            ConnectionString.MapConnectionString("COM-0001", null, VPParameter.TenantProvider);


        var query =
            @"SELECT WHTaxonomy.Id,WHTaxonomy.WareHouseId,WHTaxonomy.ParentId,WHTaxonomy.WHTaxonomyLevelId,WHTaxonomy.Title,WHTaxonomy.StartDate,WHTaxonomy.EndDate ,WHTaxonomyLevel.DisplayOrder,WHTaxonomyLevel.IsChildren FROM dbo.WHTaxonomy LEFT OUTER JOIN dbo.WHTaxonomyLevel ON WHTaxonomy.WHTaxonomyLevelId = WHTaxonomyLevel.LevelId WHERE (WHTaxonomyLevel.LanguageCode = @lang OR WHTaxonomy.WHTaxonomyLevelId IS NULL)";
        var stockQuery =
            @"SELECT StockHeader.Id ,StockHeader.CPCId AS CPCId ,StockHeader.WareHouseTaxonomyId AS ParentId ,StockHeader.TypeId AS ResourceTypeId ,CorporateProductCatalog.Title AS Title ,WHTaxonomy.WHTaxonomyLevelId ,WHTaxonomy.WareHouseId FROM dbo.StockHeader LEFT OUTER JOIN dbo.CorporateProductCatalog ON StockHeader.CPCId = CorporateProductCatalog.Id LEFT OUTER JOIN dbo.WHTaxonomy ON StockHeader.WareHouseTaxonomyId = WHTaxonomy.Id LEFT OUTER JOIN dbo.CpcResourceFamilyLocalizedData ON CpcResourceFamilyLocalizedData.CpcResourceFamilyId = CorporateProductCatalog.ResourceFamilyId WHERE StockHeader.TypeId = 'c46c3a26-39a5-42cc-n9wn-89655304eh6' AND CpcResourceFamilyId = '58ed2b7d-471a-496b-93bb-450d0c71d029' AND CpcResourceFamilyLocalizedData.LanguageCode = @lang";

        var wHQuery = "SELECT  VpWH.*, CONCAT(StartDate,' - ',EndDate) AS Title FROM VpWH";

        var sb = new StringBuilder(query);

        if (VPParameter.WHTaxonomyFilter.WareHouseId != null)
            sb.Append(" AND WHTaxonomy.WareHouseId = '" + VPParameter.WHTaxonomyFilter.WareHouseId + "'");

        var parameters = new { lang = VPParameter.Lang };
        List<VpWHTaxonomyListDto> data;
        List<VpWHTaxonomyListDto> whList;
        using (var connection = new SqlConnection(connectionString))
        {
            await connection.OpenAsync();

            data = connection.Query<VpWHTaxonomyListDto>(sb.ToString(), parameters).ToList();
            data.AddRange(connection.Query<VpWHTaxonomyListDto>(stockQuery, new { lang = VPParameter.Lang }).ToList());
            data.AddRange(connection.Query<VpWHTaxonomyListDto>(wHQuery).ToList());

            whList = connection.Query<VpWHTaxonomyListDto>(wHQuery).ToList();

            var result = whList.GroupBy(r => r.ParentId);
            var percentageResult = whList.GroupBy(r => r.CPCId);

            foreach (var i in result)
            {
                if (i.Key != null)
                {
                    DateTime end;
                    DateTime start;
                    end = (DateTime)i.Max(t => t.EndDate);
                    start = (DateTime)i.Min(t => t.StartDate);

                    var hh = new List<double>();

                    //foreach (var k in i)
                    //{
                    //    DateTime kEndDate;
                    //    DateTime kStartDate;
                    //    kEndDate = (DateTime)k.EndDate;
                    //    kStartDate = (DateTime)k.StartDate;
                    //    var ff = (kEndDate - kStartDate).TotalDays;

                    //    hh.Add(ff);

                    //}

                    //var bb = hh.Sum();

                    //var precentage = (bb / (end - start).TotalDays) * 100;

                    var whData = data.Where(k => k.CPCId + k.ParentId == i.Key).FirstOrDefault();

                    if (whData != null)
                    {
                        //whData.Percentage = precentage;
                        whData.StartDate = start;
                        whData.EndDate = end;
                    }
                }

                
            }

            foreach (var j in percentageResult)
                if (j.Key != null)
                {
                    DateTime end;
                    DateTime start;
                    end = (DateTime)j.Max(t => t.EndDate);
                    start = (DateTime)j.Min(t => t.StartDate);

                    var hh = new List<double>();

                    foreach (var k in j)
                    {
                        DateTime kEndDate;
                        DateTime kStartDate;
                        kEndDate = (DateTime)k.EndDate;
                        kStartDate = (DateTime)k.StartDate;
                        var ff = (kEndDate - kStartDate).TotalDays;

                        hh.Add(ff);
                    }

                    var bb = hh.Sum();

                    var precentage = bb / (end - start).TotalDays * 100;

                    var whData = data.Where(k =>
                        k.CPCId == j.Key && k.ResourceTypeId == "c46c3a26-39a5-42cc-n9wn-89655304eh6");

                    if (whData != null)
                        foreach (var t in whData)
                            t.Percentage = precentage;
                }
        }

        return data;
    }

    public async Task<IEnumerable<VpFilterDropdownDto>> GetVPFilterDropdownData(VPParameter VPParameter)
    {
        SqlConnection connectionDb = VPParameter.TenantProvider.orgSqlConnection();

        IEnumerable<VpFilterDropdownDto> data = null;
        var query = @"SELECT
                                  VpFilterDropdown.Name As [Text]
                                 ,VpFilterDropdown.TypeId As [Key]
                                FROM dbo.VpFilterDropdown WHERE LanguageCode = @lang ";

        var parameters = new
        {
            lang = VPParameter.Lang
        };

        //var sb = new StringBuilder(query);
        // await using var connectionDb = new SqlConnection(connectionString);
        // connectionDb.Open();
        
        data = connectionDb.Query<VpFilterDropdownDto>(query, parameters);

        // if (VPParameter.ProjectSequenceId != null)
        // {
        //     data = connectionDb.Query<VpFilterDropdownDto>(query, parameters);
        // }
        // else
        // {
        //     sb.Append("AND TypeId NOT IN ('5')");
        //     data = connectionDb.Query<VpFilterDropdownDto>(sb.ToString(), parameters);
        // }

        return data;
    }

    public async Task<PbsTreeStructureDto> GetPbsTreeStructureDataForVp(VPParameter VPParameter)
    {
        try
        {
            var dbConnection = VPParameter.TenantProvider.Connection();
            // var sbUtility = new StringBuilder(
            //     "select p.Id, p.Name as Title, p.PbsProductStatusId , t.PbsTaxonomyNodeId AS ParentId  from PbsProduct p inner join PbsProductTaxonomy t on p.Id = t.PbsProductId where(t.PbsTaxonomyId = '6e54725c-e396-4ce4-88f3-a6e9678a0389' ) and p.IsDeleted = 0 ");
            // var sbLocation = new StringBuilder(
            //     "select p.Id, p.Name as Title ,p.PbsProductStatusId , t.PbsTaxonomyNodeId AS ParentId from PbsProduct p inner join PbsProductTaxonomy t on p.Id = t.PbsProductId where (t.PbsTaxonomyId = 'ab294299-f251-41a8-94bd-3ae0150df134' ) and p.IsDeleted = 0 ");
            // var product = new StringBuilder(
            //     "SELECT PbsProduct.Id,PbsProduct.Title,PbsProduct.ParentId,PbsProduct.StartDate,PbsProduct.EndDate,PbsProduct.ProductId As PbsSequenceId FROM dbo.PbsProduct where NodeType = 'P' AND IsDeleted = 0 ");
            var product = new StringBuilder(
                "SELECT t1.Id ,t1.Title ,t1.StartDate ,t1.EndDate ,t1.ProductId AS PbsSequenceId , t1.PbsProductStatusId ,t2.ProductId AS ParentId ,t4.TreeIndex FROM PbsProduct t1 LEFT OUTER JOIN PbsProduct t2 ON t1.ParentId = t2.ProductId LEFT OUTER JOIN PbsTreeIndex t4 ON t1.ProductId = t4.PbsProductId WHERE t1.NodeType = 'P' AND t1.IsDeleted = 0");

            var machine = new StringBuilder("SELECT Id,Title,ParentId FROM dbo.MachineTaxonmy");

            var dto = new PbsTreeStructureDto();
            // using (IDbConnection dbConnection = new SqlConnection(connectionString))
            // {
                var resultUtility = dbConnection.Query<PbsTreeStructure>("GetPbsTreeStructureDataForVpsbUtility",commandType: CommandType.StoredProcedure).ToList();
                //

                dto.utilityTaxonomy = resultUtility;
            //}

            // using (IDbConnection dbConnection = new SqlConnection(connectionString))
            // {
                var resultLocation = dbConnection.Query<PbsTreeStructure>("GetPbsTreeStructureDataForVpSbLocation",commandType: CommandType.StoredProcedure).ToList();
                //

                dto.locationTaxonomy = resultLocation;
            //}

            // using (IDbConnection dbConnection = new SqlConnection(connectionString))
            // {
                if ((VPParameter.PbsTreeStructureFilter.FromDate != null) &
                    (VPParameter.PbsTreeStructureFilter.ToDate != null))
                    // product.Append("AND (( t1.startdate >= '" + VPParameter.PbsTreeStructureFilter.FromDate +"' AND t1.enddate <= '" + VPParameter.PbsTreeStructureFilter.ToDate + "') OR ( t1.startdate >= '" + VPParameter.PbsTreeStructureFilter.FromDate +
                    //                "' AND t1.startdate <= '" + VPParameter.PbsTreeStructureFilter.ToDate + "')) ");
                    product.Append(" AND (( t1.startdate BETWEEN '" + VPParameter.PbsTreeStructureFilter.FromDate +
                                   "' AND '" + VPParameter.PbsTreeStructureFilter.ToDate +
                                   "') OR ( t1.enddate BETWEEN '" + VPParameter.PbsTreeStructureFilter.FromDate +
                                   "' AND '" + VPParameter.PbsTreeStructureFilter.ToDate + "') OR ( t1.startdate <= '" +
                                   VPParameter.PbsTreeStructureFilter.FromDate +
                                   "' AND t1.enddate >= '" + VPParameter.PbsTreeStructureFilter.ToDate + "')) ");

                if (VPParameter.PbsTreeStructureFilter.Title != null)
                {
                    VPParameter.PbsTreeStructureFilter.Title =
                        VPParameter.PbsTreeStructureFilter.Title.Replace("'", "''");
                    product.Append(" AND t1.Title LIKE '%" + VPParameter.PbsTreeStructureFilter.Title + "%'");

                }

                if (VPParameter.PbsTreeStructureFilter.productStatus != null)
                {
                    if (VPParameter.PbsTreeStructureFilter.productStatus == "activeKey")
                        product.Append(
                            " AND t1.PbsProductStatusId In ('94282458-0b40-40a3-b0f9-c2e40344c8f1','7143ff01-d173-4a20-8c17-cacdfecdb84c')");
                    else
                        product.Append(" AND t1.PbsProductStatusId = '" +
                                       VPParameter.PbsTreeStructureFilter.productStatus + "'");
                }

                product.Append(" ORDER BY t4.TreeIndex");
                var resultProduct = new List<PbsTreeStructure>();
                resultProduct = dbConnection.Query<PbsTreeStructure>(product.ToString()).ToList();
                

                if (resultProduct.Any())
                {
                    if (VPParameter.PbsTreeStructureFilter.productStatus != null)
                    {
                        var mresultProduct = new List<PbsTreeStructure>();
                        foreach (var i in resultProduct)
                        {
                            List<PbsTreeStructure> mPbsTreeStructure;
                            mPbsTreeStructure = dbConnection.Query<PbsTreeStructure>(@"GetPbsTreeStructureDataForVpPbsTreeStructure",
                                param:new { i.Id },commandType: CommandType.StoredProcedure).ToList();
                            mresultProduct.AddRange(mPbsTreeStructure);
                        }

                        resultProduct = mresultProduct.OrderBy(c => c.TreeIndex).ToList();
                        resultProduct = resultProduct.DistinctBy(c => c.PbsSequenceId).ToList();
                        
                        resultProduct.ForEach(x => x.IsFilter = true);

                    }

                    if ((VPParameter.PbsTreeStructureFilter.FromDate != null) &
                        (VPParameter.PbsTreeStructureFilter.ToDate != null))
                    {
                        resultProduct.ForEach(x => x.IsFilter = true);

                    }

                    if (VPParameter.PbsTreeStructureFilter.Title != null)
                    {
                        var mresultProduct = new List<PbsTreeStructure>();
                        foreach (var i in resultProduct)
                        {
                            List<PbsTreeStructure> mPbsTreeStructure;
                            mPbsTreeStructure = dbConnection.Query<PbsTreeStructure>("GetPbsTreeStructureDataForVpPbsTreeStructure2",
                                param:new { i.Id },commandType: CommandType.StoredProcedure).ToList();
                            mPbsTreeStructure.FirstOrDefault().ParentId = null;
                            mresultProduct.AddRange(mPbsTreeStructure);
                        }

                        resultProduct = mresultProduct.OrderBy(c => c.TreeIndex).ToList();
                        resultProduct = resultProduct.DistinctBy(c => c.PbsSequenceId).ToList();
                        
                        resultProduct.ForEach(x => x.IsFilter = true);

                    }
                    else
                    {
                        if ((VPParameter.PbsTreeStructureFilter.FromDate != null) &
                            (VPParameter.PbsTreeStructureFilter.ToDate != null))
                            if ((VPParameter.PbsTreeStructureFilter.FromDate <= DateTime.UtcNow) &
                                (VPParameter.PbsTreeStructureFilter.ToDate >= DateTime.UtcNow))
                            {
                                var sql =
                                    "SELECT t1.Id ,t1.Title ,t1.StartDate ,t1.EndDate ,t1.ProductId AS PbsSequenceId , t1.PbsProductStatusId , t2.ProductId AS ParentId ,t4.TreeIndex FROM PbsProduct t1 LEFT OUTER JOIN PbsProduct t2 ON t1.ParentId = t2.ProductId LEFT OUTER JOIN PbsTreeIndex t4 ON t1.ProductId = t4.PbsProductId WHERE t1.NodeType = 'P' AND t1.IsDeleted = 0 AND t1.StartDate IS NULL AND t1.EndDate IS NULL";

                                var sbNew = new StringBuilder(sql);
                                
                                if (VPParameter.PbsTreeStructureFilter.productStatus != null)
                                {
                                    if (VPParameter.PbsTreeStructureFilter.productStatus == "activeKey")
                                        sbNew.Append(
                                            " AND t1.PbsProductStatusId In ('94282458-0b40-40a3-b0f9-c2e40344c8f1','7143ff01-d173-4a20-8c17-cacdfecdb84c')");
                                    else
                                        sbNew.Append(" AND t1.PbsProductStatusId = '" +
                                                     VPParameter.PbsTreeStructureFilter.productStatus + "'");
                                }
                                
                                var pbsData = dbConnection.Query<PbsTreeStructure>(sbNew.ToString()).ToList();
                                
                                resultProduct.AddRange(pbsData);
                                
                                if (VPParameter.PbsTreeStructureFilter.productStatus != null)
                                {
                                    var mresultProduct = new List<PbsTreeStructure>();
                                    foreach (var i in resultProduct)
                                    {
                                        List<PbsTreeStructure> mPbsTreeStructure;
                                        mPbsTreeStructure = dbConnection.Query<PbsTreeStructure>("GetPbsTreeStructureDataForVpPbsTreeStructure3",
                                            param:new { i.Id },commandType: CommandType.StoredProcedure).ToList();
                                        mPbsTreeStructure.FirstOrDefault().ParentId = null;
                                        mresultProduct.AddRange(mPbsTreeStructure);
                                    }

                                    resultProduct = mresultProduct.OrderBy(c => c.TreeIndex).ToList();
                                    resultProduct = resultProduct.DistinctBy(c => c.PbsSequenceId).ToList();
                        
                                    resultProduct.ForEach(x => x.IsFilter = true);

                                }
                            }
                    }
                }

                var pbsResParam = new PbsResourceParameters()
                {
                    TenantProvider = VPParameter.TenantProvider,
                    ContractingUnitSequenceId = VPParameter.ContractingUnitSequenceId,
                    ProjectSequenceId = VPParameter.ProjectSequenceId,
                    Lang = VPParameter.Lang,
                    ContextAccessor = VPParameter.ContextAccessor,
                    IdList = resultProduct.Select(x => x.Id).ToList()
                };

                var consData =
                    await VPParameter.PbsResourceRepository.GetPbsResourceConsolidatedQuantity(pbsResParam, "PbsLabour");
                
                resultProduct.ForEach(x => x.ConsolidatedDuration = consData.FirstOrDefault(v => v.PbsId == x.Id)?.TotalConsolidatedQuantity);

                dto.productTaxonomy = resultProduct.DistinctBy(c => c.PbsSequenceId).ToList();
            //}

            // using (IDbConnection dbConnection = new SqlConnection(connectionString))
            // {
                //var resultProduct2 =
                //

                dto.machineTaxonomy =  dbConnection.Query<PbsTreeStructure>(machine.ToString()).ToList();
            //}

            return dto;
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    public async Task<PbsTreeStructureDto> GetPbsTreeStructureDataForMyEnv(VPParameter VPParameter)
    {
        await using var connection = VPParameter.TenantProvider.orgSqlConnection();
        
         var db = new List<ProjectDefinition>();

         if (VPParameter.IsCu)
         {
             if (VPParameter.PbsTreeStructureFilter.BusinessUnit.Any())
             {
                 var selectPmProject = @"SELECT
                                      ProjectDefinition.Id
                                     ,ProjectDefinition.Title
                                     ,ProjectDefinition.SequenceCode
                                     ,ProjectDefinition.ProjectConnectionString
                                     ,ProjectDefinition.ProjectManagerId
                                     ,ProjectDefinition.ProjectStatus
                                     ,CabCompany.SequenceCode AS ContractingUnitId
                                     ,ProjectDefinition.ProjectScopeStatusId
                                    FROM dbo.ProjectDefinition
                                    LEFT OUTER JOIN CabCompany
                                      ON ProjectDefinition.ContractingUnitId = CabCompany.Id
                                    LEFT OUTER JOIN dbo.ProjectClassification
                                      ON ProjectDefinition.Id = ProjectClassification.ProjectId
                                    LEFT OUTER JOIN dbo.ProjectTime pt
                                      ON ProjectDefinition.Id = pt.ProjectId
                                    WHERE ProjectDefinition.IsDeleted = 0
                                    AND ProjectClassification.ProjectClassificationBuisnessUnit IN (SELECT Id FROM dbo.OrganizationTaxonomy WHERE BuSequenceId IN @BuId)
                                    AND ProjectDefinition.ProjectScopeStatusId != '7bcb4e8d-8e8c-487d-8170-6b91c89fc3da'";

                 var sb1 = new StringBuilder(selectPmProject);

                 if (VPParameter.PbsTreeStructureFilter.ProjectTitle != null)
                 {
                     VPParameter.PbsTreeStructureFilter.ProjectTitle =
                         VPParameter.PbsTreeStructureFilter.ProjectTitle.Replace("'", "''");
                     sb1.Append(" AND ProjectDefinition.Title LIKE '%" +
                                VPParameter.PbsTreeStructureFilter.ProjectTitle + "%'");
                 }
                     
                 sb1.Append(" ORDER BY pt.StartDate");
                 var buProject = connection
                     .Query<ProjectDefinition>(
                         sb1.ToString(),
                         new
                         {
                             BuId = VPParameter.PbsTreeStructureFilter.BusinessUnit
                         }).ToList();

                 db.AddRange(buProject);
             }
         }
         
         else
         {
             var selectPmProject =
                 @"SELECT ProjectDefinition.Id,ProjectDefinition.Title, ProjectDefinition.ProjectConnectionString,ProjectDefinition.SequenceCode,CabCompany.SequenceCode AS ContractingUnitId,ProjectDefinition.ProjectScopeStatusId FROM dbo.ProjectDefinition LEFT OUTER JOIN CabCompany ON ProjectDefinition.ContractingUnitId = CabCompany.Id LEFT OUTER JOIN dbo.ProjectTime pt ON ProjectDefinition.Id = pt.ProjectId WHERE  ProjectDefinition.IsDeleted = 0 AND ProjectDefinition.ProjectManagerId = (SELECT PersonId FROM CabPersonCompany LEFT OUTER JOIN CabPerson cp ON CabPersonCompany.PersonId = cp.Id WHERE Oid = @Oid AND cp.IsDeleted = 0 AND CabPersonCompany.IsDeleted = 0) AND ProjectDefinition.ProjectScopeStatusId != '7bcb4e8d-8e8c-487d-8170-6b91c89fc3da' ";

             var sb1 = new StringBuilder(selectPmProject);

             if (VPParameter.PbsTreeStructureFilter.ProjectTitle != null)
             {
                 VPParameter.PbsTreeStructureFilter.ProjectTitle =
                     VPParameter.PbsTreeStructureFilter.ProjectTitle.Replace("'", "''");
                 sb1.Append(" AND ProjectDefinition.Title LIKE '%" + VPParameter.PbsTreeStructureFilter.ProjectTitle + "%'");

             }

             sb1.Append(" ORDER BY pt.StartDate");
             var pmProject = connection
                 .Query<ProjectDefinition>(
                     sb1.ToString(),
                     new
                     {
                         Oid = VPParameter.UserId
                     }).ToList();

             db.AddRange(pmProject);
         }

        db = db.DistinctBy(x => x.SequenceCode).ToList();

        var dto = new PbsTreeStructureDto();
        var productTaxonomy = new List<PbsTreeStructure>();
        var utilityTaxonomy = new List<PbsTreeStructure>();
        var locationTaxonomy = new List<PbsTreeStructure>();
        var machineTaxonomy = new List<PbsTreeStructure>();

        foreach (var project in db)
        {
            try
            {
                var projectTime = connection
                    .Query<ProjectTime>("SELECT * FROM ProjectTime WHERE ProjectId = @ProjectId",
                        new { ProjectId = project.Id }).FirstOrDefault();
                var projectNode = new PbsTreeStructure
                {
                    Id = Guid.NewGuid().ToString(),
                    Title = project.Title,
                    Type = "Project",
                    ProjectSequenceId = project.SequenceCode,
                    StartDate = projectTime?.StartDate,
                    EndDate = projectTime?.EndDate,
                    TreeIndex = 0,
                    Project = project.SequenceCode,
                    ProjectStatus = project.ProjectStatus,
                    Cu = project.ContractingUnitId,
                    projectScopeStatusId = project.ProjectScopeStatusId,
                    SequenceId = project.SequenceCode
                };

                await using var dbConnection = new SqlConnection(project.ProjectConnectionString);

                // var sbUtility = new StringBuilder(
                //     "select p.Id, p.Name as Title, p.PbsProductStatusId , t.PbsTaxonomyNodeId AS ParentId , 'Pbs'  as Type, @project As Project , @cu As Cu from PbsProduct p inner join PbsProductTaxonomy t on p.Id = t.PbsProductId where(t.PbsTaxonomyId = '6e54725c-e396-4ce4-88f3-a6e9678a0389' ) and p.IsDeleted = 0 ");
                // var sbLocation = new StringBuilder(
                //     "select p.Id, p.Name as Title ,p.PbsProductStatusId , t.PbsTaxonomyNodeId AS ParentId, 'Pbs'  as Type  , @project As Project , @cu As Cu from PbsProduct p inner join PbsProductTaxonomy t on p.Id = t.PbsProductId where (t.PbsTaxonomyId = 'ab294299-f251-41a8-94bd-3ae0150df134' ) and p.IsDeleted = 0 ");
                // var product = new StringBuilder(
                //     "SELECT PbsProduct.Id,PbsProduct.Title,PbsProduct.ParentId,PbsProduct.StartDate,PbsProduct.EndDate,PbsProduct.ProductId As PbsSequenceId FROM dbo.PbsProduct where NodeType = 'P' AND IsDeleted = 0 ");
                var product = new StringBuilder(
                    "SELECT t1.Id ,t1.Title ,t1.StartDate ,t1.EndDate ,t1.ProductId AS PbsSequenceId,t1.ProductId AS SequenceId , t1.PbsProductStatusId ,t2.ProductId AS ParentId ,t4.TreeIndex , 'Pbs'  as Type , @project As Project , @cu As Cu FROM PbsProduct t1 LEFT OUTER JOIN PbsProduct t2 ON t1.ParentId = t2.ProductId LEFT OUTER JOIN PbsTreeIndex t4 ON t1.ProductId = t4.PbsProductId WHERE t1.NodeType = 'P' AND t1.IsDeleted = 0");

                var machine =
                    new StringBuilder("SELECT Id,Title,ParentId, @project As Project , @cu As Cu FROM dbo.MachineTaxonmy");

                var param = new
                {
                    project = project.SequenceCode,
                    cu = project.ContractingUnitId
                };
                
                var resultUtility = dbConnection.Query<PbsTreeStructure>("GetPbsTreeStructureDataForVpMyEnvSbUtility",param: param,commandType: CommandType.StoredProcedure).ToList();
                

                resultUtility.Where(x => x.ParentId == null).ToList().ForEach(v => v.ParentId = projectNode.Id);
                utilityTaxonomy.Add(projectNode);
                utilityTaxonomy.AddRange(resultUtility);
                
                var resultLocation = dbConnection.Query<PbsTreeStructure>("GetPbsTreeStructureDataForVpMyEnvSbLocation", param:param,commandType: CommandType.StoredProcedure).ToList();
                

                resultLocation.Where(x => x.ParentId == null).ToList().ForEach(v => v.ParentId = projectNode.Id);
                locationTaxonomy.Add(projectNode);
                locationTaxonomy.AddRange(resultLocation);

                if ((VPParameter.PbsTreeStructureFilter.FromDate != null) &
                    (VPParameter.PbsTreeStructureFilter.ToDate != null))
                    // product.Append("AND (( t1.startdate >= '" + VPParameter.PbsTreeStructureFilter.FromDate +"' AND t1.enddate <= '" + VPParameter.PbsTreeStructureFilter.ToDate + "') OR ( t1.startdate >= '" + VPParameter.PbsTreeStructureFilter.FromDate +
                    //                "' AND t1.startdate <= '" + VPParameter.PbsTreeStructureFilter.ToDate + "')) ");
                    product.Append(" AND (( t1.startdate BETWEEN '" + VPParameter.PbsTreeStructureFilter.FromDate +
                                   "' AND '" + VPParameter.PbsTreeStructureFilter.ToDate +
                                   "') OR ( t1.enddate BETWEEN '" + VPParameter.PbsTreeStructureFilter.FromDate +
                                   "' AND '" + VPParameter.PbsTreeStructureFilter.ToDate +
                                   "') OR ( t1.startdate <= '" + VPParameter.PbsTreeStructureFilter.FromDate +
                                   "' AND t1.enddate >= '" + VPParameter.PbsTreeStructureFilter.ToDate + "')) ");

                if (VPParameter.PbsTreeStructureFilter.Title != null)
                {
                    VPParameter.PbsTreeStructureFilter.Title =
                        VPParameter.PbsTreeStructureFilter.Title.Replace("'", "''");
                    product.Append(" AND t1.Title LIKE '%" + VPParameter.PbsTreeStructureFilter.Title + "%'");
                }

                if (VPParameter.PbsTreeStructureFilter.productStatus != null)
                {
                    if (VPParameter.PbsTreeStructureFilter.productStatus == "activeKey")
                        product.Append(
                            " AND t1.PbsProductStatusId In ('94282458-0b40-40a3-b0f9-c2e40344c8f1','7143ff01-d173-4a20-8c17-cacdfecdb84c')");
                    else
                        product.Append(" AND t1.PbsProductStatusId = '" +
                                       VPParameter.PbsTreeStructureFilter.productStatus + "'");
                }

                product.Append(" ORDER BY t4.TreeIndex");
                var resultProduct = new List<PbsTreeStructure>();
                resultProduct = dbConnection.Query<PbsTreeStructure>(product.ToString(), param).ToList();

                if ((VPParameter.PbsTreeStructureFilter.FromDate != null) &
                    (VPParameter.PbsTreeStructureFilter.ToDate != null))
                {
                    if ((VPParameter.PbsTreeStructureFilter.FromDate <= DateTime.UtcNow) &
                        (VPParameter.PbsTreeStructureFilter.ToDate >= DateTime.UtcNow))
                    {
                        var sql =
                            "SELECT t1.Id ,t1.Title ,t1.StartDate ,t1.EndDate ,t1.ProductId AS PbsSequenceId, t1.ProductId AS SequenceId , t1.PbsProductStatusId , t2.ProductId AS ParentId ,t4.TreeIndex FROM PbsProduct t1 LEFT OUTER JOIN PbsProduct t2 ON t1.ParentId = t2.ProductId LEFT OUTER JOIN PbsTreeIndex t4 ON t1.ProductId = t4.PbsProductId WHERE t1.NodeType = 'P' AND t1.IsDeleted = 0 AND t1.StartDate IS NULL AND t1.EndDate IS NULL";

                        var sbNew = new StringBuilder(sql);

                        if (VPParameter.PbsTreeStructureFilter.productStatus != null)
                        {
                            if (VPParameter.PbsTreeStructureFilter.productStatus == "activeKey")
                                sbNew.Append(
                                    " AND t1.PbsProductStatusId In ('94282458-0b40-40a3-b0f9-c2e40344c8f1','7143ff01-d173-4a20-8c17-cacdfecdb84c')");
                            else
                                sbNew.Append(" AND t1.PbsProductStatusId = '" +
                                             VPParameter.PbsTreeStructureFilter.productStatus + "'");
                        }

                        var pbsData = dbConnection.Query<PbsTreeStructure>(sbNew.ToString()).ToList();

                        resultProduct.AddRange(pbsData);
                    }
                }

                if (resultProduct.Any())
                {
                    if (VPParameter.PbsTreeStructureFilter.productStatus != null)
                    {
                        var mresultProduct = new List<PbsTreeStructure>();
                        foreach (var i in resultProduct)
                        {
                            List<PbsTreeStructure> mPbsTreeStructure;
                            mPbsTreeStructure = dbConnection.Query<PbsTreeStructure>(
                                "GetPbsTreeStructureDataForVpPbsTreeStructure",
                                param: new { i.Id }, commandType: CommandType.StoredProcedure).ToList();
                            //mPbsTreeStructure.FirstOrDefault(x => x.ParentId == null).ParentId = projectNode.Id;
                            mresultProduct.AddRange(mPbsTreeStructure);
                        }


                        resultProduct = mresultProduct.OrderBy(c => c.TreeIndex).ToList();
                        resultProduct = resultProduct.DistinctBy(c => c.PbsSequenceId).ToList();

                        //productTaxonomy.AddRange(resultProduct);
                    }

                    if (VPParameter.PbsTreeStructureFilter.Title != null)
                    {
                        var mresultProduct = new List<PbsTreeStructure>();
                        foreach (var i in resultProduct)
                        {
                            List<PbsTreeStructure> mPbsTreeStructure;
                            mPbsTreeStructure = dbConnection.Query<PbsTreeStructure>(
                                "GetPbsTreeStructureDataForVpPbsTreeStructure2",
                                param: new { i.Id }, commandType: CommandType.StoredProcedure).ToList();
                            mPbsTreeStructure.FirstOrDefault().ParentId = projectNode.Id;
                            mresultProduct.AddRange(mPbsTreeStructure);
                        }


                        resultProduct = mresultProduct.OrderBy(c => c.TreeIndex).ToList();
                        resultProduct = resultProduct.DistinctBy(c => c.PbsSequenceId).ToList();

                        //productTaxonomy.AddRange(resultProduct);
                    }
                    else
                    {
                        resultProduct.Where(x => x.ParentId == null).ToList().ForEach(v => v.ParentId = projectNode.Id);
                    }

                    var pbsResParam = new PbsResourceParameters()
                    {
                        TenantProvider = VPParameter.TenantProvider,
                        ContractingUnitSequenceId = project.ContractingUnitId,
                        ProjectSequenceId = project.SequenceCode,
                        Lang = VPParameter.Lang,
                        ContextAccessor = VPParameter.ContextAccessor,
                        IdList = resultProduct.Select(x => x.Id).ToList()
                    };

                    var consData =
                        await VPParameter.PbsResourceRepository.GetPbsResourceConsolidatedQuantity(pbsResParam,
                            "PbsLabour");

                    resultProduct.ForEach(x =>
                        x.ConsolidatedDuration =
                            consData.FirstOrDefault(v => v.PbsId == x.Id)?.TotalConsolidatedQuantity);

                    productTaxonomy.AddRange(resultProduct.DistinctBy(c => c.PbsSequenceId).ToList());
                    projectNode.ConsolidatedDuration = productTaxonomy.Where(x => x.ParentId == projectNode.Id)
                        .Sum(c => c.ConsolidatedDuration);

                    productTaxonomy.Add(projectNode);

                    if (VPParameter.MTP)
                    {
                        var cuConnectionString =
                            ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId, null,
                                VPParameter.TenantProvider);
                        await using var cuConnection = new SqlConnection(cuConnectionString);

                        var cabPerson = connection
                            .Query<CabPerson>(
                                @"SELECT cpc.Id,CabPerson.FullName FROM dbo.CabPerson LEFT OUTER JOIN CabPersonCompany cpc ON CabPerson.Id = cpc.PersonId")
                            .ToList();
                        var pbsLabourAssign = cuConnection
                            .Query<PbsAssignedLabour>(@"SELECT * FROM dbo.PbsAssignedLabour").ToList();
                        var param1 = new
                        {
                            project = project.SequenceCode, cu = project.ContractingUnitId,PbsProductId = resultProduct.DistinctBy(c => c.Id).ToList().Select(a => a.Id)
                        };
                        // string pbsLabourSql = @"SELECT
                        //                       CONVERT(nvarchar(50), NEWID()) as Id,CorporateProductCatalog.Id as CpcId
                        //                      ,CorporateProductCatalog.Title
                        //                      ,'PbsLabour' AS Type
                        //                      ,@project AS Project
                        //                      ,@cu AS Cu
                        //                      ,PbsLabour.PbsProductId As PbsId
                        //                      ,pp.ProductId AS ParentId
                        //                      ,pp.StartDate
                        //                      ,pp.EndDate
                        //                     FROM dbo.PbsLabour
                        //                     LEFT OUTER JOIN dbo.CorporateProductCatalog
                        //                       ON PbsLabour.CoperateProductCatalogId = CorporateProductCatalog.Id
                        //                       LEFT OUTER JOIN dbo.PbsProduct pp
                        //                       ON PbsLabour.PbsProductId = pp.Id WHERE PbsLabour.PbsProductId IN @PbsProductId";

                        var mPbsLabour = dbConnection
                            .Query<PbsTreeStructure>("GetPbsTreeStructureDataForVpMyEnvPbsLabourSqlMtp", param: new{project = project.SequenceCode, cu = project.ContractingUnitId},
                                commandType: CommandType.StoredProcedure).ToList();

                        //var npbsLabour = dbConnection.Query<PbsTreeStructure>(pbsLabourSql, param1).ToList();

                        var pbsLabour = mPbsLabour.Where(e => resultProduct.DistinctBy(c => c.Id).ToList().Select(a => a.Id).Contains(e.PbsId)).ToList();

                        foreach (var i in pbsLabour)
                        {
                            var assignedLabours = pbsLabourAssign
                                .Where(e => e.CpcId == i.CpcId && e.PbsProduct == i.ParentId).ToList()
                                .GroupBy(e => e.CabPersonId).ToList();

                            foreach (var n in assignedLabours)
                            {
                                var labour = new PbsTreeStructure()
                                {
                                    Id = Guid.NewGuid().ToString(),
                                    Title = cabPerson.FirstOrDefault(e => e.Id == n.Key).FullName,
                                    Type = "PbsAssignedLabour",
                                    TreeIndex = 0,
                                    Project = project.SequenceCode,
                                    Cu = project.ContractingUnitId,
                                    ParentId = i.Id,
                                    CpcId = n.First().CpcId,
                                    StartDate = i.StartDate,
                                    EndDate = i.EndDate,
                                    CabPersonId = n.Key
                                };
                                productTaxonomy.Add(labour);
                            }

                            var consQuantity = consData.FirstOrDefault(x => x.PbsId == i.PbsId)?.res
                                .FirstOrDefault(v => v.CpcKey == i.CpcId);

                            if (consQuantity != null)
                            {
                                i.ConsolidatedDuration = consQuantity?.ConsolidatedQuantity == 0
                                    ? consQuantity.Quantity
                                    : consQuantity.ConsolidatedQuantity;
                            }
                        }

                        productTaxonomy.AddRange(pbsLabour);
                    }
                }

                var mResultProduct = dbConnection.Query<PbsTreeStructure>(machine.ToString(), param).ToList();
                

                mResultProduct.Where(x => x.ParentId == null).ToList().ForEach(v => v.ParentId = projectNode.Id);
                machineTaxonomy.Add(projectNode);
                machineTaxonomy.AddRange(mResultProduct);
            
            }
            catch (Exception e)
            {
                throw new Exception(e.Message + " - " + project.Title);
            }
        }
        

        var pbsOrders = connection.Query<PbsDisplayOrder>("Select * from PbsDisplayOrder");

        Parallel.ForEach(productTaxonomy, item =>
        {
            var dis = pbsOrders.FirstOrDefault(x => x.SequenceId == item.SequenceId);

            item.DisplayOrder = dis?.DisplayOrder ?? 0;
        });

        dto.productTaxonomy = productTaxonomy;
        dto.utilityTaxonomy = utilityTaxonomy;
        dto.locationTaxonomy = locationTaxonomy;
        dto.machineTaxonomy = machineTaxonomy;

        return dto;
    }

    public async Task<List<PbsForVPDto>> GetPbswithpmol(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

        try
        {
            var all =
                @"SELECT PbsProduct.Id,PbsProduct.Title,PbsProduct.ParentId,'PBS' AS Type,PbsProduct.StartDate,PbsProduct.EndDate,PbsProduct.ProductId AS PBSSequenceId FROM dbo.PbsProduct where NodeType = 'P' AND IsDeleted = '0';
                               SELECT
                                  PMol.Id
                                 ,PMol.Title
                                 ,PbsProduct.Id AS ParentId
                                 ,'PMOL' AS Type
                                 ,PMol.ExecutionDate AS StartDate
                                 ,PMol.ExecutionDate AS EndDate
                                 ,PMol.ProjectMoleculeId AS PMOLSequenceId
                                 ,Bor.ItemId AS BORSequenceId
                                 ,PbsProduct.ProductId AS PBSSequenceId
                                FROM dbo.PMol
                                LEFT OUTER JOIN dbo.Bor
                                  ON PMol.BorId = Bor.Id
                                LEFT OUTER JOIN dbo.PbsProduct
                                  ON Bor.PbsProductId = PbsProduct.Id
                                WHERE PMol.BorId IS NOT NULL";


            List<PbsForVPDto> data = null;
            List<PbsForVPDto> data1 = null;

            using (var dbConnection = new SqlConnection(connectionString))
            {
                using (var multi = await dbConnection.QueryMultipleAsync(all, new { lang = VPParameter.Lang }))
                {
                    data = multi.Read<PbsForVPDto>().ToList();
                    data.AddRange(multi.Read<PbsForVPDto>().ToList());
                }
            }

            var labour = @"SELECT
                                 PmolTeamRole.Id AS Id
                                 ,'Labour' AS Title
                                 ,PMol.Id AS ParentId
                                 ,'Labour' AS Type
                                 ,'CPCId' AS CPCId
                                 ,PmolTeamRole.CabPersonId
                                FROM dbo.PMolPlannedWorkLabour
                                INNER JOIN dbo.PMol
                                  ON PMolPlannedWorkLabour.PmolId = PMol.Id
                                INNER JOIN dbo.PmolTeamRole
                                  ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id
                                WHERE PMolPlannedWorkLabour.IsDeleted = 0
                                AND PmolTeamRole.CabPersonId IS NOT NULL
                                AND dbo.PMolPlannedWorkLabour.PmolId IS NOT NULL
                                GROUP BY PMol.ProjectMoleculeId
                                        ,PmolTeamRole.Id
                                        ,PmolTeamRole.CabPersonId
                                        ,PMol.Name
                                        ,PMol.Id
                                        ,PMol.ExecutionEndTime
                                        ,PMol.ExecutionStartTime
                                        ,PMol.ExecutionDate
                                        ,PMol.Title
                                        ,PMol.ProjectSequenceCode";

            var pbsData = new List<PbsForVPDto>();

            using (var dbConnection = new SqlConnection(connectionString))
            {
                var labours = await dbConnection.QueryAsync<PbsForVPDto>(labour);

                foreach (var i in data)
                {
                    if (i.Type == "PBS")
                    {
                        var dataadd = new PbsForVPDto();
                        dataadd.Id = i.Id;
                        dataadd.Title = i.Title;
                        dataadd.Type = i.Type;
                        dataadd.PBSSequenceId = i.PBSSequenceId;
                        if (i.StartDate == null && i.EndDate == null)
                        {
                            dataadd.StartDate = DateTime.UtcNow;
                            dataadd.EndDate = DateTime.UtcNow.AddDays(+1);
                        }

                        else if (i.StartDate != null && i.EndDate == null)
                        {
                            dataadd.StartDate = i.StartDate;
                            dataadd.EndDate = i.StartDate;
                        }
                        else
                        {
                            if (i.StartDate == i.EndDate)
                            {
                                dataadd.StartDate = i.StartDate;
                                dataadd.EndDate = i.EndDate.Value.AddDays(+1);
                            }
                            else
                            {
                                dataadd.StartDate = i.StartDate;
                                dataadd.EndDate = i.EndDate;
                            }
                        }

                        dataadd.PBSSequenceId = i.PBSSequenceId;
                        pbsData.Add(dataadd);
                    }

                    if (i.Type == "PMOL")
                    {
                        var dataadd = new PbsForVPDto();
                        dataadd.Id = i.Id;
                        dataadd.Title = i.Title;
                        dataadd.ParentId = i.ParentId;
                        dataadd.Type = i.Type;
                        if (i.StartDate == null)
                        {
                            dataadd.StartDate = DateTime.UtcNow;
                            dataadd.EndDate = DateTime.UtcNow;
                        }
                        else
                        {
                            dataadd.StartDate = i.StartDate;
                            dataadd.EndDate = i.EndDate;
                        }

                        dataadd.PMOLSequenceId = i.PMOLSequenceId;
                        dataadd.BORSequenceId = i.BORSequenceId;
                        dataadd.PBSSequenceId = i.PBSSequenceId;
                        pbsData.Add(dataadd);

                        List<PbsForVPDto> pmolpeople;

                        pmolpeople = labours.Where(lab => lab.Type == "Labour" && lab.ParentId == i.Id).ToList();

                        if (pmolpeople.Any())
                            foreach (var n in pmolpeople)
                            {
                                PmolTeamMeber member;
                                var memberselect =
                                    @"SELECT Id,FullName As Name FROM [dbo].[CabPerson] where Id = @Id";

                                using (var connection =
                                       new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
                                {
                                    member = connection.Query<PmolTeamMeber>(memberselect, new { Id = n.CabPersonId })
                                        .FirstOrDefault();
                                }

                                var pLabour = new PbsForVPDto();
                                pLabour.Id = n.Id;
                                pLabour.Title = member.Name;
                                pLabour.ParentId = n.ParentId;
                                pLabour.Type = "Labour";
                                pLabour.StartDate = dataadd.StartDate;
                                pLabour.EndDate = dataadd.EndDate;
                                pLabour.PMOLSequenceId = i.PMOLSequenceId;
                                pLabour.PBSSequenceId = i.PBSSequenceId;
                                pLabour.BORSequenceId = i.BORSequenceId;

                                pbsData.Add(pLabour);
                            }
                    }
                }
            }

            return pbsData;
        }
        catch (Exception e)
        {
            throw e;
        }
    }


    public async Task<string> UpdatePbsProductTaxonomyDataForVp(VPParameter VPParameter)
    {
        try
        {
            var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
                VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

            var selectQuery = "SELECT Id FROM dbo.PbsProduct WHERE ProductId = @ProductId";

            var sql = "UPDATE dbo.PbsProduct SET ParentId = @ParentId WHERE ProductId = @ChildProductId";


            if (VPParameter.PbsProductTaxonomyTree.ChildPbsSequenceId !=
                VPParameter.PbsProductTaxonomyTree.ParentPbsSequenceId)
            {
                
                using (var connection = new SqlConnection(connectionString))
                {
                    var parentId = connection.Query<string>(selectQuery,
                        new { ProductId = VPParameter.PbsProductTaxonomyTree.ParentPbsSequenceId }).FirstOrDefault();
                    await connection.ExecuteAsync(sql,
                        new
                        {
                            ChildProductId = VPParameter.PbsProductTaxonomyTree.ChildPbsSequenceId,
                            ParentId = VPParameter.PbsProductTaxonomyTree.ParentPbsSequenceId
                        });

                    var pbsResParam = new PbsResourceParameters()
                    {
                        ContractingUnitSequenceId = VPParameter.ContractingUnitSequenceId,
                        ProjectSequenceId = VPParameter.ProjectSequenceId,
                        TenantProvider = VPParameter.TenantProvider,
                        ContextAccessor = VPParameter.ContextAccessor,
                        Lang = VPParameter.Lang,
                        PbsProductId = VPParameter.PbsProductTaxonomyTree.ChildPbsSequenceId
                    };
                    await VPParameter.PbsResourceRepository.PbsParentDateAdjust(pbsResParam);
                }
            }
            else
            {
                throw new Exception("ChildPbsSequenceId And ParentPbsSequenceId cannot be same");
            }


            return VPParameter.PbsProductTaxonomyTree.ChildPbsSequenceId;
        }
        catch (Exception e)
        {
            throw e;
        }
    }
    
    public async Task<PbsTreeStructure> PBSCloneForVpDto(VPParameter VPParameter)
    {
        try
        {
            var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
                VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

            var options = new DbContextOptions<ApplicationDbContext>();

            var applicationDbContext =
                new ApplicationDbContext(options, VPParameter.TenantProvider);

            var pbsQuery = @"SELECT * FROM dbo.PbsProduct WHERE ProductId = @Id";

            string PbsProductItemTypeId = null;

            PbsProduct mPbsProduct;

            var idGenerator = new IdGenerator();

            var rPbsProduct = new PbsTreeStructure();

            using (var connection = new SqlConnection(connectionString))
            {
                mPbsProduct = connection.Query<PbsProduct>(pbsQuery, new { Id = VPParameter.PBSCloneForVpDto.PbsId })
                    .FirstOrDefault();

                var ProductId = idGenerator.GenerateId(applicationDbContext, "PBS-", "PbsSequenceCode");

                var taxonomy =
                    @"INSERT INTO dbo.PbsProductTaxonomy ( Id ,PbsProductId,PbsTaxonomyNodeId ) VALUES ( @Id, @PbsProductId, @PbsTaxonomyNodeId );";

                if (VPParameter.PBSCloneForVpDto.IsClone)
                {
                    var insertPbs =
                        @"INSERT INTO dbo.PbsProduct ( Id ,ProductId ,Name ,PbsProductItemTypeId ,PbsProductStatusId ,Scope ,Contract ,ProductPurpose ,ProductComposition ,ProductDerivation ,ProductFormatPresentation ,PbsToleranceStateId ,PbsQualityResponsibilityId ,IsDeleted ,NodeType ,PbsTaxonomyLevelId ,Title ,PbsType ,ProjectSequenceCode ,ParentId ,EndDate ,StartDate ,MachineTaxonomy) VALUES ( @Id ,@ProductId ,@Name ,@PbsProductItemTypeId ,@PbsProductStatusId ,@Scope ,@Contract ,@ProductPurpose ,@ProductComposition ,@ProductDerivation ,@ProductFormatPresentation ,@PbsToleranceStateId ,@PbsQualityResponsibilityId ,@IsDeleted ,@NodeType ,@PbsTaxonomyLevelId ,@Title ,@PbsType ,@ProjectSequenceCode ,@ParentId ,@EndDate ,@StartDate ,@MachineTaxonomy);";

                    var name = mPbsProduct.ProductId + " Clone";

                    string parentId = null;
                    string sibilingId = null;
                    if (VPParameter.PBSCloneForVpDto.TreeType == "1") parentId = VPParameter.PBSCloneForVpDto.PbsId;
                    if (VPParameter.PBSCloneForVpDto.TreeType == "2") parentId = mPbsProduct.ParentId;

                    var param = new
                    {
                        Id = Guid.NewGuid(),
                        ProductId,
                        mPbsProduct.Name,
                        mPbsProduct.PbsProductItemTypeId,
                        mPbsProduct.PbsProductStatusId,
                        mPbsProduct.Scope,
                        Contract = "Yes",
                        mPbsProduct.ProductPurpose,
                        mPbsProduct.ProductComposition,
                        mPbsProduct.ProductDerivation,
                        mPbsProduct.ProductFormatPresentation,
                        mPbsProduct.PbsToleranceStateId,
                        mPbsProduct.PbsQualityResponsibilityId,
                        IsDeleted = false,
                        mPbsProduct.NodeType,
                        mPbsProduct.PbsTaxonomyLevelId,
                        Title = ProductId + " " + mPbsProduct.Name,
                        mPbsProduct.PbsType,
                        mPbsProduct.ProjectSequenceCode,
                        ParentId = parentId,
                        mPbsProduct.EndDate,
                        mPbsProduct.StartDate,
                        mPbsProduct.MachineTaxonomy,
                        SibilingId = sibilingId
                    };
                    var param1 = new
                        { Id = Guid.NewGuid(), PbsProductId = param.Id, PbsTaxonomyNodeId = mPbsProduct.Id };

                    await connection.ExecuteAsync(insertPbs, param);
                    await connection.ExecuteAsync(taxonomy, param1);
                    await ClonePbsResoures(connectionString, mPbsProduct.Id, param.Id.ToString(),
                        mPbsProduct.PbsProductItemTypeId);

                    VPParameter.Id = param.Id.ToString();

                  var treeIndex =  await VPParameter._iPbsRepository.AddPbsTreeIndex(ProductId, connectionString);

                    await PbsHistory(VPParameter);

                    rPbsProduct.Id = param.Id.ToString();
                    rPbsProduct.ParentId = param.ParentId;
                    rPbsProduct.PbsProductStatusId = param.PbsProductStatusId;
                    rPbsProduct.PbsSequenceId = param.ProductId;
                    rPbsProduct.StartDate = param.StartDate;
                    rPbsProduct.EndDate = param.EndDate;
                    rPbsProduct.Title = param.Title;
                    rPbsProduct.TreeIndex = 0;
                    rPbsProduct.CreatedDate = DateTime.UtcNow;
                    rPbsProduct.ProjectSequenceId = VPParameter.ProjectSequenceId;
                    rPbsProduct.Cu = VPParameter.ContractingUnitSequenceId;
                    rPbsProduct.TreeIndex = treeIndex;

                }
                else
                {
                    var insertPbs =
                        @"INSERT INTO dbo.PbsProduct ( Id ,ProductId ,Name ,PbsProductItemTypeId ,PbsProductStatusId ,PbsToleranceStateId,Contract,IsDeleted ,NodeType ,PbsTaxonomyLevelId ,Title , PbsType, ProjectSequenceCode ,ParentId,EndDate ,StartDate) VALUES ( @Id ,@ProductId ,@Name ,@PbsProductItemTypeId ,@PbsProductStatusId ,@PbsToleranceStateId,@Contract,@IsDeleted ,@NodeType ,@PbsTaxonomyLevelId ,@Title ,@PbsType ,@ProjectSequenceCode ,@ParentId,@EndDate ,@StartDate);";

                    var name = mPbsProduct.ProductId + " New";

                    string parentId = null;
                    string sibilingId = null;
                    if (VPParameter.PBSCloneForVpDto.TreeType == "1") parentId = VPParameter.PBSCloneForVpDto.PbsId;
                    if (VPParameter.PBSCloneForVpDto.TreeType == "2") parentId = mPbsProduct.ParentId;

                    var param = new
                    {
                        Id = Guid.NewGuid(),
                        ProductId,
                        mPbsProduct.PbsProductItemTypeId,
                        PbsProductStatusId = "d60aad0b-2e84-482b-ad25-618d80d49477",
                        PbsToleranceStateId = "004eb795-8bba-47e8-9049-d14774ab0b18",
                        mPbsProduct.Name,
                        IsDeleted = 0,
                        NodeType = "P",
                        PbsTaxonomyLevelId = "93d01fef-ccc7-4592-9544-3949d67cbf76",
                        Title = ProductId + " " + mPbsProduct.Name,
                        ParentId = parentId,
                        ProjectSequenceCode = VPParameter.ProjectSequenceId,
                        SibilingId = sibilingId,
                        mPbsProduct.EndDate,
                        mPbsProduct.StartDate,
                        Contract = "Yes",
                        mPbsProduct.PbsType
                    };
                    await connection.ExecuteAsync(insertPbs, param);
                    var param1 = new
                        { Id = Guid.NewGuid(), PbsProductId = param.Id, PbsTaxonomyNodeId = mPbsProduct.Id };
                    await connection.ExecuteAsync(taxonomy, param1);

                    VPParameter.Id = param.Id.ToString();
                    
                   var treeIndex = await VPParameter._iPbsRepository.AddPbsTreeIndex(ProductId, connectionString);

                   await PbsHistory(VPParameter);

                    var selectTreeIndex =
                        @"SELECT TreeIndex FROM dbo.PbsTreeIndex WHERE PbsProductId = (SELECT Id FROM PbsProduct WHERE ProductId = @PbsId);";
                    var insertQuery =
                        "INSERT INTO dbo.PbsTreeIndex ( Id ,PbsProductId ,TreeIndex ) VALUES ( @Id ,@PbsProductId ,@TreeIndex );";

                    var index = connection.Query<string>(selectTreeIndex, new { VPParameter.PBSCloneForVpDto.PbsId })
                        .FirstOrDefault();

                    var numVal = 0;
                    if (index != null)
                    {
                        numVal = int.Parse(index) + 1;

                        var paramt = new
                        {
                            Id = Guid.NewGuid(),
                            PbsProductId = param.Id,
                            TreeIndex = numVal.ToString()
                        };

                        await connection.ExecuteAsync(insertQuery, paramt);
                    }

                    rPbsProduct.Id = param.Id.ToString();
                    rPbsProduct.ParentId = param.ParentId;
                    rPbsProduct.PbsProductStatusId = param.PbsProductStatusId;
                    rPbsProduct.PbsSequenceId = param.ProductId;
                    rPbsProduct.StartDate = param.StartDate;
                    rPbsProduct.EndDate = param.EndDate;
                    rPbsProduct.Title = param.Title;
                    rPbsProduct.TreeIndex = numVal;
                    rPbsProduct.CreatedDate = DateTime.UtcNow;
                    rPbsProduct.ProjectSequenceId = VPParameter.ProjectSequenceId;
                    rPbsProduct.Cu = VPParameter.ContractingUnitSequenceId;
                    rPbsProduct.TreeIndex = treeIndex;

                }

                return rPbsProduct;
            }
        }
        catch (Exception e)
        {
            //Console.WriteLine(e);
            throw;
        }
    }

    public async Task<string> PbsTreeIndex(VPParameter VPParameter)
    {
        try
        {
            var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
                VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

            var insertQuery =
                "INSERT INTO dbo.PbsTreeIndex ( Id ,PbsProductId ,TreeIndex ) VALUES ( @Id ,@PbsProductId ,@TreeIndex );";

            var updateQuery = "UPDATE PbsTreeIndex SET TreeIndex = @TreeIndex WHERE PbsProductId = @PbsProductId";

            var query = @"MERGE INTO PbsTreeIndex t1 USING (SELECT 1 id) t2 ON (t1.PbsProductId = @PbsProductId)
                        WHEN MATCHED THEN UPDATE  SET TreeIndex = @TreeIndex
                        WHEN NOT MATCHED THEN INSERT (Id, PbsProductId, TreeIndex) VALUES (@Id, @PbsProductId, @TreeIndex);";

           // var delete = @"DELETE  FROM PbsTreeIndex";
            
            await using (var conection = new SqlConnection(connectionString))
            {
                foreach (var i in VPParameter.PbsTreeIndexDto.PbsTreeIndex)
                {
                    //var exist = conection.Query<PbsTreeIndex>("Select * from ");
                         var param = new
                        {
                            Id = Guid.NewGuid().ToString(),
                            i.PbsProductId,
                            i.TreeIndex
                        };
            
                        await conection.ExecuteAsync(query, param);
                }
            }
            
            // await using (var connection = new SqlConnection(connectionString))
            // {
            //     if (VPParameter.PbsTreeIndexDto.PbsTreeIndex.FirstOrDefault()?.TreeIndex >
            //         VPParameter.PbsTreeIndexDto.PbsTreeIndex.LastOrDefault()?.TreeIndex)
            //     {
            //         var selectIndexes = connection.Query<PbsTreeIndex>(
            //             "SELECT * FROM PbsTreeIndex WHERE TreeIndex >= @low AND TreeIndex < @high",
            //             new
            //             {
            //                 low = VPParameter.PbsTreeIndexDto.PbsTreeIndex.MinBy(x => x.TreeIndex)?.TreeIndex,
            //                 high = VPParameter.PbsTreeIndexDto.PbsTreeIndex.MaxBy(x => x.TreeIndex)?.TreeIndex
            //             }).ToList();
            //
            //         foreach (var t in selectIndexes)
            //         {
            //             var param1 = new PbsTreeIndex()
            //             {
            //                 Id = t.Id,
            //                 PbsProductId = t.PbsProductId,
            //                 TreeIndex = t.TreeIndex + 1
            //
            //             };
            //             await connection.ExecuteAsync(updateQuery, param1);
            //         }
            //     }
            //     else
            //     {
            //         var selectIndexes = connection.Query<PbsTreeIndex>(
            //             "SELECT * FROM PbsTreeIndex WHERE TreeIndex > @low AND TreeIndex < @high",
            //             new
            //             {
            //                 low = VPParameter.PbsTreeIndexDto.PbsTreeIndex.MinBy(x => x.TreeIndex)?.TreeIndex,
            //                 high = VPParameter.PbsTreeIndexDto.PbsTreeIndex.MaxBy(x => x.TreeIndex)?.TreeIndex
            //             }).ToList();
            //
            //         foreach (var t in selectIndexes)
            //         {
            //             var param1 = new PbsTreeIndex()
            //             {
            //                 Id = t.Id,
            //                 PbsProductId = t.PbsProductId,
            //                 TreeIndex = t.TreeIndex - 1
            //
            //             };
            //             await connection.ExecuteAsync(updateQuery, param1);
            //         }
            //     }
            //
            //     foreach (var i in VPParameter.PbsTreeIndexDto.PbsTreeIndex)
            //     {
            //         var param2 = new PbsTreeIndex()
            //         {
            //             Id = i.Id,
            //             PbsProductId = i.PbsProductId,
            //             TreeIndex = i.TreeIndex 
            //
            //         };
            //         await connection.ExecuteAsync(updateQuery, param2);
            //     }
            //        
            //         
            // }
            

            return VPParameter.ProjectSequenceId;
        }
        catch (Exception e)
        {
            //Console.WriteLine(e);
            throw;
        }
    }

     public async Task<string> TreeIndexSiblingAdd(VPParameter VPParameter)
    {
        try
        {
            var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
                VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

            var insertQuery =
                "INSERT INTO dbo.PbsTreeIndex ( Id ,PbsProductId ,TreeIndex ) VALUES ( @Id ,@PbsProductId ,@TreeIndex );";

            var updateQuery = "UPDATE PbsTreeIndex SET TreeIndex = @TreeIndex WHERE PbsProductId = @PbsProductId";
            
            await using var connection = new SqlConnection(connectionString);
            
            var currentIndex = connection
                .Query<PbsTreeIndex>("Select * From PbsTreeIndex Where PbsProductId = @PbsProductId ", VPParameter.PbsTreeIndexDto.PbsTreeIndex.FirstOrDefault())
                .FirstOrDefault();

            if (currentIndex?.TreeIndex < VPParameter.PbsTreeIndexDto.PbsTreeIndex.FirstOrDefault()?.TreeIndex)
            {
                var indexDataNew = connection
                    .Query<PbsTreeIndex>("Select * From PbsTreeIndex Where TreeIndex >= @low AND TreeIndex <= @high", new{low = currentIndex?.TreeIndex, high = VPParameter.PbsTreeIndexDto.PbsTreeIndex.FirstOrDefault()?.TreeIndex})
                    .ToList();

                foreach (var item in indexDataNew)
                {
                    item.TreeIndex = item.TreeIndex - 1;
                    await connection.ExecuteAsync(updateQuery, item);
                }
                        
                await connection.ExecuteAsync(updateQuery, VPParameter.PbsTreeIndexDto.PbsTreeIndex.FirstOrDefault());
            }
            else
            {
                var indexData = connection
                    .Query<PbsTreeIndex>("Select * From PbsTreeIndex Where TreeIndex >= @TreeIndex ", VPParameter.PbsTreeIndexDto.PbsTreeIndex.FirstOrDefault())
                    .ToList();

                foreach (var item in indexData)
                {
                    item.TreeIndex = item.TreeIndex + 1;
                    await connection.ExecuteAsync(updateQuery, item);
                }
                        
                await connection.ExecuteAsync(updateQuery, VPParameter.PbsTreeIndexDto.PbsTreeIndex.FirstOrDefault());
            }
            
                        


            return VPParameter.ProjectSequenceId;
        }
        catch (Exception e)
        {
            //Console.WriteLine(e);
            throw;
        }
    }
     
     public async Task<List<DayPlanningFilter>> DayPlanningFilter(VPParameter VPParameter)
    {
        try
        {
            var mDayPlanningFilter = new List<DayPlanningFilter>();

            if (VPParameter.DayPlanningFilterDto.Project == null)
            {
                var selectProject =
                    @"SELECT
                      ProjectDefinition.Title
                     ,ProjectDefinition.ProjectConnectionString
                     ,ProjectDefinition.SequenceCode
                     ,CabCompany.SequenceCode AS ContractingUnitId
                    FROM dbo.ProjectDefinition
                    LEFT OUTER JOIN CabCompany
                      ON ProjectDefinition.ContractingUnitId = CabCompany.Id
                    LEFT OUTER JOIN dbo.ProjectClassification
                      ON ProjectDefinition.Id = ProjectClassification.ProjectId
                      LEFT OUTER JOIN dbo.ProjectTime
                      ON ProjectDefinition.Id = ProjectTime.ProjectId
                    WHERE ContractingUnitId = @Id
                    AND ProjectDefinition.IsDeleted = 0
                    AND ProjectClassification.ProjectClassificationBuisnessUnit = @BuId
                    AND ProjectTime.StartDate <= @EndDate
                    AND ProjectDefinition.ProjectScopeStatusId IN ('94282458-0b40-40a3-b0f9-c2e40344c8f1','d60aad0b-2e84-482b-ad25-618d80d49477','jj282458-0b40-jja3-b0f9-c2e40344c8jj','4010e768-3e06-4702-b337-ee367a82addb','a35ab9fe-df57-4088-82a9-d27008688bae11','60aad0b-2e84-482b-ad25-618d80d49488')
                    ORDER BY ProjectDefinition.SequenceCode";

                //string selectBu = @"SELECT OrganizationTaxonomy.Id FROM dbo.OrganizationTaxonomy LEFT OUTER JOIN dbo.CabPersonCompany ON OrganizationTaxonomy.PersonId = CabPersonCompany.Id LEFT OUTER JOIN dbo.OrganizationTaxonomy c ON OrganizationTaxonomy.ParentId = c.Id WHERE Oid = @UserId AND OrganizationTaxonomy.OrganizationTaxonomyLevelId = 'oo10e768-3e06-po02-b337-ee367a82admn' AND c.Title = (SELECT SequenceCode FROM dbo.CabCompany WHERE Id = @Cu)";

                foreach (var i in VPParameter.DayPlanningFilterDto.ContractingUnit)
                {
                    CabCompany mCabCompany;
                    var mProjectDefinition = new List<ProjectDefinition>();
                    using (var connection =
                           new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
                    {
                        //var buId = connection.Query<string>(selectBu, new {VPParameter.UserId,Cu = i}).ToList();

                        if (VPParameter.DayPlanningFilterDto.BuId != null)
                            // string bu = null;
                            // bu = VPParameter.DayPlanningFilterDto.BuId ?? buId.FirstOrDefault();
                            mProjectDefinition = connection.Query<ProjectDefinition>(selectProject,
                                    param: new { Id = i, Oid = VPParameter.UserId, VPParameter.DayPlanningFilterDto.BuId, VPParameter.DayPlanningFilterDto.EndDate})
                                .ToList();
                    }

                    var selectPbs = @"SELECT pp.*,t4.TreeIndex FROM PbsProduct pp LEFT OUTER JOIN PbsTreeIndex t4 ON pp.ProductId = t4.PbsProductId WHERE pp.StartDate <= @EndDate AND pp.EndDate >= @StartDate AND pp.ProductId NOT IN (SELECT pp.ParentId FROM PbsProduct pp WHERE  pp.ParentId IS NOT NULL) AND pp.IsDeleted = 0 ORDER BY t4.TreeIndex ASC";
                    
                    var selectPmol =
                        @"SELECT PMol.Id ,PMol.ProjectMoleculeId ,PMol.Name ,PMol.ForemanMobileNumber ,PMol.ExecutionDate ,PMol.ForemanId ,PMol.Comment ,PMol.IsDeleted ,PMol.TypeId ,PMol.StatusId ,PMol.Title ,PMol.BorId ,PMol.EndDateTime ,PMol.IsFinished ,PMol.StartDateTime ,PMol.IsBreak ,PMol.PmolType ,PMol.ProductId ,PMol.ProjectSequenceCode ,PMol.ParentId ,PMol.ExecutionEndTime ,PMol.ExecutionStartTime ,PMol.LocationId ,PbsProduct.Name AS ProductName FROM dbo.PMol LEFT OUTER JOIN dbo.PbsProduct ON PMol.ProductId = PbsProduct.Id WHERE PMol.IsDeleted = 0 AND PMol.ExecutionDate IS NULL AND PMol.ProductId = @ProductId";

                    var sb = new StringBuilder(selectPmol);

                    if (VPParameter.DayPlanningFilterDto.PmolStatus != null) sb.Append(" AND StatusId = @Status");

                    sb.Append(" ORDER BY PbsProduct.ProductId,ProjectMoleculeId");
                    
                    foreach (var n in mProjectDefinition)
                    {
                        await using var connection = new SqlConnection(n.ProjectConnectionString);

                        var pbs = connection.Query<DayPlanningFilterPbs>(selectPbs,
                            new
                            {
                                VPParameter.DayPlanningFilterDto.StartDate, VPParameter.DayPlanningFilterDto.EndDate
                            }).ToList();
                        
                        if (pbs.Any())
                        {
                            foreach (var mPbs in pbs)
                            {
                                var pmolPlanedQuantity = connection.Query<string>(
                                    @"SELECT COALESCE(SUM(PMolPlannedWorkLabour.RequiredQuantity),0) AS RequiredQuantity FROM dbo.Pmol LEFT OUTER JOIN PMolPlannedWorkLabour ON PMol.Id = PMolPlannedWorkLabour.PmolId WHERE PMol.ProductId = @Id AND PMolPlannedWorkLabour.IsDeleted = 0",
                                    new {mPbs.Id }).FirstOrDefault();
                                var pbsPlanedQuantity = connection.Query<string>(@"SELECT COALESCE(SUM(Quantity),0) AS Quantity FROM dbo.PbsLabour WHERE PbsProductId = @Id",new{mPbs.Id }).FirstOrDefault();

                                mPbs.Quantity = "( " + pmolPlanedQuantity + "/ " + pbsPlanedQuantity + " )";

                                if (double.Parse(pmolPlanedQuantity!) > double.Parse(pbsPlanedQuantity!))
                                {
                                    mPbs.IsPlanOverload = true;
                                }

                                var mPMol = connection.Query<DayPlanPmol>(sb.ToString(),
                                    new { Status = VPParameter.DayPlanningFilterDto.PmolStatus,ProductId = mPbs.Id}).ToList();
                                if (mPMol.Any())
                                {
                                    foreach (var r in mPMol)
                                    {
                                        r.ContractingUinit = n.ContractingUnitId;
                                        r.ProjectSequenceCode = n.SequenceCode;
                                    }
                                }

                                mPbs.Pmol = mPMol;
                            }
                            
                            var dayPlanningFilter = new DayPlanningFilter
                            {
                                Project = n.Title,
                                ProjectSequenceCode = n.SequenceCode,
                                Pbs = pbs
                            };
                            mDayPlanningFilter.Add(dayPlanningFilter);
                        }

                        else
                        {
                            if (VPParameter.DayPlanningFilterDto.IsAllProjects)
                            {
                                var dayPlanningFilter = new DayPlanningFilter
                                {
                                    Project = n.Title,
                                    ProjectSequenceCode = n.SequenceCode,
                                    Pbs = pbs
                                };
                                mDayPlanningFilter.Add(dayPlanningFilter);
                            }
                        }
                    }
                }
            }

            else
            {
                var selectProject =
                    @"SELECT ProjectDefinition.Title, ProjectDefinition.ProjectConnectionString,ProjectDefinition.SequenceCode, CabCompany.SequenceCode AS ContractingUnitId FROM dbo.ProjectDefinition LEFT OUTER JOIN CabCompany ON ProjectDefinition.ContractingUnitId = CabCompany.Id WHERE ProjectDefinition.IsDeleted = 0 AND ProjectDefinition.SequenceCode = @Id  ORDER BY ProjectDefinition.SequenceCode";

                var mProjectDefinition = new List<ProjectDefinition>();
                using (var connection =
                       new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
                {
                    mProjectDefinition = connection.Query<ProjectDefinition>(selectProject,
                        new { Id = VPParameter.DayPlanningFilterDto.Project }).ToList();
                }

                var selectPbs = @"SELECT pp.*,t4.TreeIndex FROM PbsProduct pp LEFT OUTER JOIN PbsTreeIndex t4 ON pp.ProductId = t4.PbsProductId WHERE pp.StartDate <= @EndDate AND pp.EndDate >= @StartDate AND pp.ProductId NOT IN (SELECT pp.ParentId FROM PbsProduct pp WHERE  pp.ParentId IS NOT NULL) AND pp.IsDeleted = 0 ORDER BY t4.TreeIndex ASC";
                    
                    var selectPmol =
                        @"SELECT PMol.Id ,PMol.ProjectMoleculeId ,PMol.Name ,PMol.ForemanMobileNumber ,PMol.ExecutionDate ,PMol.ForemanId ,PMol.Comment ,PMol.IsDeleted ,PMol.TypeId ,PMol.StatusId ,PMol.Title ,PMol.BorId ,PMol.EndDateTime ,PMol.IsFinished ,PMol.StartDateTime ,PMol.IsBreak ,PMol.PmolType ,PMol.ProductId ,PMol.ProjectSequenceCode ,PMol.ParentId ,PMol.ExecutionEndTime ,PMol.ExecutionStartTime ,PMol.LocationId ,PbsProduct.Name AS ProductName FROM dbo.PMol LEFT OUTER JOIN dbo.PbsProduct ON PMol.ProductId = PbsProduct.Id WHERE PMol.IsDeleted = 0 AND PMol.ExecutionDate IS NULL AND PMol.ProductId = @ProductId";

                    var sb = new StringBuilder(selectPmol);

                    if (VPParameter.DayPlanningFilterDto.PmolStatus != null) sb.Append(" AND StatusId = @Status");

                    sb.Append(" ORDER BY PbsProduct.ProductId,ProjectMoleculeId");
                    
                    foreach (var n in mProjectDefinition)
                    {
                        await using var connection = new SqlConnection(n.ProjectConnectionString);

                        var pbs = connection.Query<DayPlanningFilterPbs>(selectPbs,
                            new
                            {
                                VPParameter.DayPlanningFilterDto.StartDate, VPParameter.DayPlanningFilterDto.EndDate
                            }).ToList();
                        
                        if (pbs.Any())
                        {
                            foreach (var mPbs in pbs)
                            {
                                var pmolPlanedQuantity = connection.Query<string>(
                                    @"SELECT COALESCE(SUM(PMolPlannedWorkLabour.RequiredQuantity),0) AS RequiredQuantity FROM dbo.Pmol LEFT OUTER JOIN PMolPlannedWorkLabour ON PMol.Id = PMolPlannedWorkLabour.PmolId WHERE PMol.ProductId = @Id AND PMolPlannedWorkLabour.IsDeleted = 0",
                                    new {mPbs.Id }).FirstOrDefault();
                                var pbsPlanedQuantity = connection.Query<string>(@"SELECT COALESCE(SUM(Quantity),0) AS Quantity FROM dbo.PbsLabour WHERE PbsProductId = @Id",new{mPbs.Id }).FirstOrDefault();

                                mPbs.Quantity = "( " + pmolPlanedQuantity + "/ " + pbsPlanedQuantity + " )";
                                
                                if (Convert.ToInt32(double.Parse(pmolPlanedQuantity)) > pbsPlanedQuantity.ToInt())
                                {
                                    mPbs.IsPlanOverload = true;
                                }
                                
                                var mPMol = connection.Query<DayPlanPmol>(sb.ToString(),
                                    new { Status = VPParameter.DayPlanningFilterDto.PmolStatus,ProductId = mPbs.Id}).ToList();
                                if (mPMol.Any())
                                {
                                    foreach (var r in mPMol)
                                    {
                                        r.ContractingUinit = n.ContractingUnitId;
                                        r.ProjectSequenceCode = n.SequenceCode;
                                    }
                                }

                                mPbs.Pmol = mPMol;
                            }
                        }
                        
                        var dayPlanningFilter = new DayPlanningFilter
                        {
                            Project = n.Title,
                            ProjectSequenceCode = n.SequenceCode,
                            Pbs = pbs
                        };
                        mDayPlanningFilter.Add(dayPlanningFilter);
                    }
            }

            return mDayPlanningFilter;
        }
        catch (Exception e)
        {
            //Console.WriteLine(e);
            throw;
        }
    }

    public async Task<IEnumerable<TeamsWithPmolDto>> DayPlanningListData(VPParameter VPParameter)
    {
        if (VPParameter.GetTeamDto.CabPersonId != null)
        {
            var mteamsWithPmol = await DayPlanningListDataForPerson(VPParameter);
            return mteamsWithPmol;
        }

        var teamsWithPmol = new List<TeamsWithPmolDto>();

        using (var connection =
               new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
        {
            if (VPParameter.GetTeamDto.BuId != null)
            {
                var teamselect = @"SELECT
                                      OrganizationTaxonomy.Id
                                     ,OrganizationTaxonomy.Title
                                     ,OrganizationTaxonomy.ParentId
                                     ,OrganizationTaxonomy.OrganizationTaxonomyLevelId
                                     ,OrganizationTaxonomy.ModifiedDate
                                     ,OrganizationTaxonomy.EndDate
                                     ,OrganizationTaxonomy.TemporaryTeamNameId
                                    FROM dbo.OrganizationTaxonomy
                                    WHERE OrganizationTaxonomyLevelId = 'fg10e768-3e06-po02-b337-ee367a82adfg'
                                    AND (EndDate = @EndDate
                                    OR EndDate IS NULL)
                                    AND ParentId = @Id
                                    ORDER BY TemporaryTeamNameId";
                
                var mOrganizationTaxonomy = connection.Query<OrganizationTaxonomy>(teamselect,
                    new { Id = VPParameter.GetTeamDto.BuId, EndDate = VPParameter.GetTeamDto.WeekEndDate }).ToList();
                
                mOrganizationTaxonomy.DistinctBy(e => e.Id);

                var teampmol =
                    @"SELECT * FROM dbo.OrganizationTeamPmol WHERE ExecutionDate BETWEEN @Startdate AND @Enddate ";

                var allOrganizationTeamPmol = connection.Query<OrganizationTeamPmol>(teampmol,
                    new
                    {
                        Startdate = VPParameter.GetTeamDto.StartDate, Enddate = VPParameter.GetTeamDto.EndDate
                    }).ToList();
                
                var teamquery = @"SELECT
                                          CabPerson.Id
                                         ,CabPerson.FullName AS Name
                                         ,OrganizationTaxonomy.ParentId
                                         ,OrganizationTaxonomy.RoleId
                                        FROM dbo.OrganizationTaxonomy
                                        LEFT OUTER JOIN dbo.CabPersonCompany
                                          ON OrganizationTaxonomy.PersonId = CabPersonCompany.Id
                                        INNER JOIN dbo.CabPerson
                                          ON CabPersonCompany.PersonId = CabPerson.Id ORDER BY CabPerson.FullName";
                    
                var allTeamMembers = connection.Query<PmolTeamMeber>(teamquery).ToList();

                string absenceQuery = @"SELECT
                                          ah.StartDate
                                         ,ah.EndDate
                                         ,cpc.PersonId
                                         ,alt.Name AS Reason
                                        FROM AbsenceHeader ah
                                        LEFT OUTER JOIN AbsenceLeaveType alt
                                          ON ah.LeaveType = alt.TypeId
                                        INNER JOIN CabPersonCompany cpc
                                          ON ah.Person = cpc.Id
                                        WHERE ah.StartDate BETWEEN @StartDate AND @EndDate
                                        AND alt.LanguageCode = @lang";
                
                var abParam = new {VPParameter.Lang,StartDate = VPParameter.GetTeamDto.WeekEndDate,EndDate = VPParameter.GetTeamDto.WeekEndDate.AddDays(-7)};

                var absenceData = connection.Query<PersonAbsenceData>(absenceQuery, new {VPParameter.Lang,EndDate = VPParameter.GetTeamDto.WeekEndDate,StartDate = VPParameter.GetTeamDto.WeekEndDate.AddDays(-7)}).ToList();
                
                var name = connection
                    .Query<string>(
                        "SELECT Name FROM dbo.TemporaryTeamName WHERE NameId = @Id AND LanguageCode = @lang",
                        new { Id = "7bcb4e8d-8e8c-487d-team-6b91c89fAcce", lang = VPParameter.Lang })
                    .FirstOrDefault();

                foreach(var i in mOrganizationTaxonomy)
                {
                    var teamsWithPmolDto = new TeamsWithPmolDto();
                    var pmolDatalist = new List<PmolData>();
                    var team = new List<PmolTeamMeber>();
                    IEnumerable<PomlVehicle> vehicals;
                    IEnumerable<PomlVehicle> tools;
                    
                    var mOrganizationTeamPmol =
                        allOrganizationTeamPmol.Where(e => e.OrganizationTeamId == i.Id).ToList();
                    
                    //pmol
                    foreach(var r in mOrganizationTeamPmol)
                    {
                        var connectionString = ConnectionString.MapConnectionString(r.ContractingUnit,
                            r.Project, VPParameter.TenantProvider);
                        
                        using (var dbconnection =
                               new SqlConnection(connectionString))
                        {
                            //var rfqPmolList = connection.Query<PmolRfq>("Select * from PmolRfq");

                            var vehical =
                                @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id INNER JOIN dbo.CorporateProductCatalog ON PMolPlannedWorkTools.CoperateProductCatalogId = CorporateProductCatalog.Id WHERE CorporateProductCatalog.ResourceFamilyId = '0c355800-91fd-4d99-8010-921a42f0ba04' AND PMol.Id = @Id AND PMolPlannedWorkTools.IsDeleted = 0";

                            var tool =
                                @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber,PMolPlannedWorkTools.RequiredQuantity,PMolPlannedWorkTools.AllocatedQuantity FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id INNER JOIN dbo.CorporateProductCatalog ON PMolPlannedWorkTools.CoperateProductCatalogId = CorporateProductCatalog.Id WHERE PMol.Id = @Id AND PMolPlannedWorkTools.IsDeleted = 0 AND CorporateProductCatalog.ResourceFamilyId != '0c355800-91fd-4d99-8010-921a42f0ba04'";

                            var pmolquery =
                                @"SELECT PMol.ProjectMoleculeId ,PMol.Name ,PMol.Id ,PMol.ExecutionEndTime ,PMol.ExecutionStartTime ,PMol.ExecutionDate ,PMol.Title ,PMol.ProjectSequenceCode,PMol.StatusId,PMol.TypeId , PMol.LocationId,PMol.ProductId,PMol.Comment FROM dbo.PMol WHERE Id = @Id";

                            var sb = new StringBuilder(pmolquery);

                            if (VPParameter.GetTeamDto.PmolStatus != null)
                                sb.Append(" AND PMol.StatusId = '" + VPParameter.GetTeamDto.PmolStatus + "'");
                            var pmolData1 = new PmolData
                            {
                                ProjectSequenceCode = r.Project,
                                ProjectTitle = connection
                                    .Query<string>(
                                        "SELECT Title FROM dbo.ProjectDefinition WHERE SequenceCode = @Project",
                                        new { r.Project }).FirstOrDefault()
                            };
                            {
                                vehicals = dbconnection.Query<PomlVehicle>(vehical, new { Id = r.PmolId }).ToList();
                                tools = dbconnection.Query<PomlVehicle>(tool, new { Id = r.PmolId }).ToList();
                            }
                            if (vehicals.Any()) pmolData1.PomlVehical = (List<PomlVehicle>)vehicals;

                            if (tools.Any()) pmolData1.PomlTool = (List<PomlVehicle>)tools;

                            var pmol = dbconnection.Query<Pmol>(sb.ToString(), new { Id = r.PmolId }).FirstOrDefault();

                            if (pmol != null)
                            {
                                pmolData1.Id = pmol.Id;
                                pmolData1.Name = pmol.Name;
                                pmolData1.ExecutionStartTime = pmol.ExecutionStartTime;
                                pmolData1.ExecutionEndTime = pmol.ExecutionEndTime;
                                pmolData1.ExecutionDate = pmol.ExecutionDate.ToString();
                                pmolData1.Title = pmol.Title;
                                pmolData1.ContractingUinit = r.ContractingUnit;
                                pmolData1.TeamId = r.OrganizationTeamId;
                                pmolData1.ProjectMoleculeId = pmol.ProjectMoleculeId;
                                pmolData1.StatusId = pmol.StatusId;
                                pmolData1.TypeId = pmol.TypeId;
                                pmolData1.ProjectSequenceId = r.Project;
                                pmolData1.ContractingUinit = r.ContractingUnit;
                                pmolData1.Comment = pmol.Comment;
                                pmolData1.IsRFQGenerated = connection
                                    .Query<PmolRfq>("Select * from PmolRfq Where PmolId = @PmolId",
                                        new { PmolId = pmol.Id }).Any();

                                var selectProduct = @"with name_tree as
                                                             (SELECT
                                                               PbsProduct.Id
                                                              ,PbsProduct.Name
                                                              ,PbsProduct.Title
                                                              ,PbsProduct.ParentId
                                                             FROM dbo.PbsProduct
                                                             WHERE PbsProduct.Id = @Id
                                                               UNION ALL
                                                               SELECT c.Id, c.Name,CONCAT(c.Title,' > ',p.Title),c.ParentId
                                                               FROM dbo.PbsProduct c
                                                               JOIN name_tree p on p.ParentId = c.ProductId)
                                                               select Title
                                                               from name_tree WHERE ParentId IS NULL option (maxrecursion 0)";

                                pmolData1.ProductTaxonomy = dbconnection
                                    .Query<string>(selectProduct, new { Id = pmol.ProductId }).FirstOrDefault();


                                if (pmol.LocationId != null && pmol.ExecutionStartTime != null)
                                {
                                    var mapLocation = dbconnection
                                        .Query<Position>(
                                            "SELECT * FROM Position LEFT OUTER JOIN MapLocation ml ON Position.Id = ml.PositionId WHERE ml.Id = @Id",
                                            new { Id = pmol.LocationId }).FirstOrDefault();

                                    if (mapLocation != null)
                                        if (mapLocation.Lat != "0" || mapLocation.Lon != "0")
                                        {
                                            var forecast = await VPParameter._iShiftRepository.GetWeatherForecast(
                                                mapLocation.Lat.ToDouble(), mapLocation.Lon.ToDouble(),
                                                pmol.ExecutionDate.GetValueOrDefault(), pmol.ExecutionStartTime,
                                                VPParameter.TenantProvider, VPParameter.Configuration);


                                            pmolData1.Forecast = forecast;
                                        }
                                }

                                pmolDatalist.Add(pmolData1);
                            }
                        }
                        
                    }

                    // if (pmolDatalist.Any() || i.TemporaryTeamNameId == null)
                    // {
                    //     
                    // }
                    team = allTeamMembers.Where(e => e.ParentId == i.Id).ToList();

                    if (team.Count != 0)
                    {
                        foreach (var n in team)
                        {
                            n.AbsenceData = absenceData.Where(e => e.PersonId == n.Id).ToList();
                        }
                        teamsWithPmolDto.TeamId = i.Id;

                        if (i.TemporaryTeamNameId != null)
                        {
                            teamsWithPmolDto.TeamTitle = i.Title + " " + name;
                        }

                        else
                        {
                            teamsWithPmolDto.TeamTitle = i.Title;
                        }

                        if (pmolDatalist.Count != 0)
                        {
                            pmolDatalist = pmolDatalist.OrderBy(c => c.ExecutionStartTime).ToList();
                            teamsWithPmolDto.Pmol = pmolDatalist;
                            teamsWithPmolDto.ProjectSequenceCode =
                                teamsWithPmolDto.Pmol.FirstOrDefault().ProjectSequenceCode;
                        }

                        teamsWithPmolDto.ContractingUinit = "COM-0001";
                        teamsWithPmolDto.Team = team;
                        teamsWithPmol.Add(teamsWithPmolDto);

                    }
                }
            }
        }

        return teamsWithPmol;
    }
    
    public async Task<IEnumerable<TeamsWithPmolDto>> DayPlanningListDataProject(VPParameter VPParameter)
    {
        if (VPParameter.GetTeamDto.CabPersonId != null)
        {
            var mteamsWithPmol = await DayPlanningListDataProjectForPerson(VPParameter);

            return mteamsWithPmol;
        }

        var teamsWithPmol = new List<TeamsWithPmolDto>();

        using (var connection =
               new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
        {
            var teamselect = @"SELECT Distinct 
                                  OrganizationTaxonomy.Id
                                 ,OrganizationTaxonomy.Title
                                 ,OrganizationTaxonomy.ParentId
                                 ,OrganizationTaxonomy.ModifiedDate
                                 ,OrganizationTaxonomy.EndDate
                                 ,OrganizationTaxonomy.OrganizationTaxonomyLevelId
                                 ,OrganizationTaxonomy.TemporaryTeamNameId
                                FROM dbo.OrganizationTaxonomy
                                  WHERE (OrganizationTaxonomy.EndDate = @EndDate OR OrganizationTaxonomy.EndDate IS NULL)
                                  AND OrganizationTaxonomy.ParentId = @BuId
                                 ORDER BY TemporaryTeamNameId";


            List<OrganizationTaxonomy> mOrganizationTaxonomy;

            mOrganizationTaxonomy = connection.Query<OrganizationTaxonomy>(teamselect,
                new { Project = VPParameter.ProjectSequenceId, EndDate = VPParameter.GetTeamDto.WeekEndDate,VPParameter.GetTeamDto.BuId }).ToList();
                
            mOrganizationTaxonomy.DistinctBy(e => e.Id);
            mOrganizationTaxonomy = mOrganizationTaxonomy.Where(e => e.Id != null).ToList();

            foreach (var i in mOrganizationTaxonomy)
            {
                var teamsWithPmolDto = new TeamsWithPmolDto();
                var pmolDatalist = new List<PmolData>();
                var team = new List<PmolTeamMeber>();
                IEnumerable<PomlVehicle> vehicals;
                IEnumerable<PomlVehicle> tools;
                IEnumerable<OrganizationTeamPmol> mOrganizationTeamPmol;

                var teampmol =
                    @"SELECT * FROM dbo.OrganizationTeamPmol WHERE OrganizationTeamId = @Id AND ExecutionDate BETWEEN @Startdate AND @Enddate AND Project = @Project";

                mOrganizationTeamPmol = connection.Query<OrganizationTeamPmol>(teampmol,
                    new
                    {
                        i.Id, Startdate = VPParameter.GetTeamDto.StartDate, Enddate = VPParameter.GetTeamDto.EndDate,
                        Project = VPParameter.ProjectSequenceId
                    }).ToList();

                //pmol
                foreach (var r in mOrganizationTeamPmol)
                {
                    if (r.Project == VPParameter.ProjectSequenceId)
                    {
                        var connectionString = ConnectionString.MapConnectionString(r.ContractingUnit,
                            r.Project, VPParameter.TenantProvider);

                        using (var dbconnection =
                               new SqlConnection(connectionString))
                        {
                            var vehical =
                                @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id INNER JOIN dbo.CorporateProductCatalog ON PMolPlannedWorkTools.CoperateProductCatalogId = CorporateProductCatalog.Id WHERE CorporateProductCatalog.ResourceFamilyId = '0c355800-91fd-4d99-8010-921a42f0ba04' AND PMol.Id = @Id AND PMolPlannedWorkTools.IsDeleted = 0";

                            var tool =
                                @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id INNER JOIN dbo.CorporateProductCatalog ON PMolPlannedWorkTools.CoperateProductCatalogId = CorporateProductCatalog.Id WHERE PMol.Id = @Id AND PMolPlannedWorkTools.IsDeleted = 0 AND CorporateProductCatalog.ResourceFamilyId != '0c355800-91fd-4d99-8010-921a42f0ba04'";

                            var pmolquery =
                                @"SELECT PMol.ProjectMoleculeId ,PMol.Name ,PMol.Id ,PMol.ExecutionEndTime ,PMol.ExecutionStartTime ,PMol.ExecutionDate ,PMol.Title ,PMol.ProjectSequenceCode,PMol.StatusId,PMol.TypeId, PMol.LocationId,PMol.ProductId,PMol.Comment FROM dbo.PMol WHERE Id = @Id";
                            var sb = new StringBuilder(pmolquery);
                            if (VPParameter.GetTeamDto.PmolStatus != null)
                                sb.Append(" AND PMol.StatusId = '" + VPParameter.GetTeamDto.PmolStatus + "'");
                            var pmolData1 = new PmolData
                            {
                                ProjectSequenceCode = r.Project,
                                ProjectTitle = connection
                                    .Query<string>(
                                        "SELECT Title FROM dbo.ProjectDefinition WHERE SequenceCode = @Project",
                                        new { r.Project }).FirstOrDefault()
                            };
                            {
                                vehicals = dbconnection.Query<PomlVehicle>(vehical, new { Id = r.PmolId }).ToList();
                                tools = dbconnection.Query<PomlVehicle>(tool, new { Id = r.PmolId }).ToList();
                            }
                            if (vehicals.Any()) pmolData1.PomlVehical = (List<PomlVehicle>)vehicals;

                            if (tools.Any()) pmolData1.PomlTool = (List<PomlVehicle>)tools;

                            var pmol = dbconnection.Query<Pmol>(sb.ToString(), new { Id = r.PmolId }).FirstOrDefault();
                            if (pmol != null)
                            {
                                pmolData1.Id = pmol.Id;
                                pmolData1.Name = pmol.Name;
                                pmolData1.ExecutionStartTime = pmol.ExecutionStartTime;
                                pmolData1.ExecutionEndTime = pmol.ExecutionEndTime;
                                pmolData1.ExecutionDate = pmol.ExecutionDate.ToString();
                                pmolData1.Title = pmol.Title;
                                pmolData1.ContractingUinit = r.ContractingUnit;
                                pmolData1.TeamId = r.OrganizationTeamId;
                                pmolData1.ProjectMoleculeId = pmol.ProjectMoleculeId;
                                pmolData1.StatusId = pmol.StatusId;
                                pmolData1.TypeId = pmol.TypeId;
                                pmolData1.Comment = pmol.Comment;
                                pmolData1.IsRFQGenerated = connection
                                    .Query<PmolRfq>("Select * from PmolRfq Where PmolId = @PmolId",
                                        new { PmolId = pmol.Id }).Any();

                                var selectProduct = @"with name_tree as
                                                             (SELECT
                                                               PbsProduct.Id
                                                              ,PbsProduct.Name
                                                              ,PbsProduct.Title
                                                              ,PbsProduct.ParentId
                                                             FROM dbo.PbsProduct
                                                             WHERE PbsProduct.Id = @Id
                                                               UNION ALL
                                                               SELECT c.Id, c.Name,CONCAT(c.Title,' > ',p.Title),c.ParentId
                                                               FROM dbo.PbsProduct c
                                                               JOIN name_tree p on p.ParentId = c.ProductId)
                                                               select Title
                                                               from name_tree WHERE ParentId IS NULL";

                                pmolData1.ProductTaxonomy = dbconnection
                                    .Query<string>(selectProduct, new { Id = pmol.ProductId }).FirstOrDefault();

                                if (pmol.LocationId != null && pmol.ExecutionStartTime != null)
                                {
                                    var mapLocation = dbconnection
                                        .Query<Position>(
                                            "SELECT * FROM Position LEFT OUTER JOIN MapLocation ml ON Position.Id = ml.PositionId WHERE ml.Id = @Id",
                                            new { Id = pmol.LocationId }).FirstOrDefault();

                                    if (mapLocation != null)
                                    {
                                        var forecast = await VPParameter._iShiftRepository.GetWeatherForecast(
                                            mapLocation.Lat.ToDouble(), mapLocation.Lon.ToDouble(),
                                            pmol.ExecutionDate.GetValueOrDefault(), pmol.ExecutionStartTime,
                                            VPParameter.TenantProvider, VPParameter.Configuration);


                                        pmolData1.Forecast = forecast;
                                    }
                                }

                                pmolDatalist.Add(pmolData1);
                            }
                        }
                    }
                }

                if (pmolDatalist.Any() || i.TemporaryTeamNameId == null)
                {
                    var teamquery = @"SELECT
                                          CabPerson.Id
                                         ,CabPerson.FullName AS Name
                                         ,OrganizationTaxonomy.RoleId
                                        FROM dbo.OrganizationTaxonomy
                                        LEFT OUTER JOIN dbo.CabPersonCompany
                                          ON OrganizationTaxonomy.PersonId = CabPersonCompany.Id
                                        INNER JOIN dbo.CabPerson
                                          ON CabPersonCompany.PersonId = CabPerson.Id
                                        WHERE OrganizationTaxonomy.ParentId = @Id ORDER BY CabPerson.FullName";

                    List<PmolTeamMeber> mPmolTeamMeber;

                    team = connection.Query<PmolTeamMeber>(teamquery, new { i.Id }).ToList();

                    if (team.Count != 0)
                    {
                        teamsWithPmolDto.TeamId = i.Id;
                        if (i.TemporaryTeamNameId != null)
                        {
                            var name = connection
                                .Query<string>(
                                    "SELECT Name FROM dbo.TemporaryTeamName WHERE NameId = @Id AND LanguageCode = @lang",
                                    new { Id = i.TemporaryTeamNameId, lang = VPParameter.Lang })
                                .FirstOrDefault();
                            teamsWithPmolDto.TeamTitle = i.Title + " " + name;
                        }

                        else
                        {
                            teamsWithPmolDto.TeamTitle = i.Title;
                        }

                        var cu = @"with name_tree as
                                        (SELECT
                                          OrganizationTaxonomy.Id
                                         ,OrganizationTaxonomy.Title
                                         ,OrganizationTaxonomy.ParentId
                                         ,OrganizationTaxonomy.OrganizationTaxonomyLevelId
                                        FROM dbo.OrganizationTaxonomy
                                        WHERE OrganizationTaxonomy.Id = @Id
                                          UNION ALL
                                          SELECT c.Id, c.Title,c.ParentId,c.OrganizationTaxonomyLevelId
                                          FROM dbo.OrganizationTaxonomy c
                                          JOIN name_tree p on p.ParentId = c.Id)
                                          select OrganizationTaxonomyLevelId, Title, Id,ParentId
                                          from name_tree
                                          where OrganizationTaxonomyLevelId = '2210e768-3e06-po02-b337-ee367a82adjj'";
                        var cuId = connection.Query<OrganizationTaxonomy>(cu, new { i.Id }).FirstOrDefault();

                        if (pmolDatalist.Count != 0)
                        {
                            pmolDatalist = pmolDatalist.OrderBy(c => c.ExecutionStartTime).ToList();
                            teamsWithPmolDto.Pmol = pmolDatalist;
                            teamsWithPmolDto.ProjectSequenceCode =
                                teamsWithPmolDto.Pmol.FirstOrDefault().ProjectSequenceCode;
                        }

                        teamsWithPmolDto.ContractingUinit = VPParameter.ContractingUnitSequenceId;
                        teamsWithPmolDto.Team = team;
                        teamsWithPmol.Add(teamsWithPmolDto);
                    }
                }
            }
        }

        return teamsWithPmol;
    }

    public async Task<string> PmolAssignDayPanning(VPParameter VPParameter)
    {
        
        var cuConnectionString = ConnectionString.MapConnectionString(
            VPParameter.PmolAssignDayPanningDto.ContractingUnit,
            null, VPParameter.TenantProvider);

        await using var cuConnection = new SqlConnection(cuConnectionString);
        
        var check = @"SELECT * FROM OrganizationTeamPmol WHERE PmolId = @PmolId";

        var vehical = @"SELECT * FROM dbo.OrganizationTeamVehicel WHERE OrganizationTeamId = @TeamId";

        var selectLabour = @"SELECT * FROM dbo.PMolPlannedWorkLabour WHERE PmolId = @PmolId AND IsDeleted = '0'";

        var selectTeamRole = @"SELECT * FROM dbo.PmolTeamRole WHERE PmolLabourId = @LabourId AND IsDeleted = '0'";

        OrganizationTeamPmol mOrganizationTeamPmol;

        IEnumerable<OrganizationTeamVehicel> mOrganizationTeamVehicel;

        IEnumerable<OrganizationTaxonomy> mOrganizationTaxonomy;

        if (VPParameter.PmolAssignDayPanningDto.TeamId != null)
        {
            var startTime = "08:00";
            var endTime = "17:00";

            if (VPParameter.PmolAssignDayPanningDto.ExecutionStartTime != null)
                startTime = VPParameter.PmolAssignDayPanningDto.ExecutionStartTime;

            if (VPParameter.PmolAssignDayPanningDto.ExecutionEndTime != null)
                endTime = VPParameter.PmolAssignDayPanningDto.ExecutionEndTime;

            using (var connection =
                   new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
            {
                mOrganizationTeamPmol = connection
                    .Query<OrganizationTeamPmol>(check, new { PmolId = VPParameter.PmolAssignDayPanningDto.Id })
                    .FirstOrDefault();

                mOrganizationTeamVehicel = connection
                    .Query<OrganizationTeamVehicel>(vehical, new { VPParameter.PmolAssignDayPanningDto.TeamId })
                    .ToList();
                
                var selectTaxonmy =
                    @"SELECT CabPersonCompany.PersonId ,OrganizationTaxonomy.RoleId FROM dbo.OrganizationTaxonomy LEFT OUTER JOIN dbo.CabPersonCompany ON OrganizationTaxonomy.PersonId = CabPersonCompany.Id WHERE OrganizationTaxonomy.ParentId = @ParentId";

                if (mOrganizationTeamPmol != null)
                {
                  

                  await cuConnection.ExecuteAsync(
                      "Delete From PmolAssignTime Where PmolId = @PmolId",new{PmolId = mOrganizationTeamPmol.PmolId});
                   
                  var update =
                        @"UPDATE OrganizationTeamPmol SET OrganizationTeamId = @OrganizationTeamId ,PmolId = @PmolId ,ExecutionDate = @ExecutionDate ,StartTime = @StartTime ,EndTime = @EndTime ,ContractingUnit = @ContractingUnit ,Project = @Project WHERE PmolId = @PmolId";

                    var param = new
                    {
                        OrganizationTeamId = VPParameter.PmolAssignDayPanningDto.TeamId,
                        PmolId = VPParameter.PmolAssignDayPanningDto.Id,
                        VPParameter.PmolAssignDayPanningDto.ExecutionDate,
                        StartTime = startTime,
                        EndTime = endTime,
                        VPParameter.PmolAssignDayPanningDto.ContractingUnit,
                        Project = VPParameter.PmolAssignDayPanningDto.ProjectSequenceCode
                    };

                    var day = VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek.ToString();

                    await connection.ExecuteAsync(update, param);
                }

                else
                {
                    var insert =
                        @"INSERT INTO OrganizationTeamPmol ( Id ,OrganizationTeamId ,PmolId ,ExecutionDate ,StartTime ,EndTime ,ContractingUnit ,Project ) VALUES ( @Id ,@OrganizationTeamId ,@PmolId ,@ExecutionDate ,@StartTime ,@EndTime ,@ContractingUnit ,@Project)";

                    var param = new
                    {
                        Id = Guid.NewGuid(),
                        OrganizationTeamId = VPParameter.PmolAssignDayPanningDto.TeamId,
                        PmolId = VPParameter.PmolAssignDayPanningDto.Id,
                        VPParameter.PmolAssignDayPanningDto.ExecutionDate,
                        StartTime = startTime,
                        EndTime = endTime,
                        VPParameter.PmolAssignDayPanningDto.ContractingUnit,
                        Project = VPParameter.PmolAssignDayPanningDto.ProjectSequenceCode
                    };

                    var day = VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek.ToString();

                    await connection.ExecuteAsync(insert, param);
                }

                
                mOrganizationTaxonomy = connection
                    .Query<OrganizationTaxonomy>(selectTaxonmy,
                        new { ParentId = VPParameter.PmolAssignDayPanningDto.TeamId })
                    .ToList();
            }

            var connectionString = ConnectionString.MapConnectionString(
                VPParameter.PmolAssignDayPanningDto.ContractingUnit,
                VPParameter.PmolAssignDayPanningDto.ProjectSequenceCode, VPParameter.TenantProvider);

            CorporateProductCatalog mCorporateProductCatalog;

            PmolPlannedWorkLabour pmolPlannedWorkLabour;

            PmolTeamRole pmolTeamRole;

            using (var connection =
                   new SqlConnection(connectionString))
            {
                await connection.ExecuteAsync(
                    "UPDATE dbo.PMol SET ExecutionDate = @ExecutionDate,ExecutionStartTime = @ExecutionStartTime,ExecutionEndTime = @ExecutionEndTime WHERE Id = @Id",
                    new
                    {
                        ExecutionStartTime = startTime,
                        ExecutionEndTime = endTime,
                        VPParameter.PmolAssignDayPanningDto.ExecutionDate,
                        VPParameter.PmolAssignDayPanningDto.Id
                    });

                var selectCpc =
                    @"SELECT Id FROM CorporateProductCatalog WHERE ResourceTypeId = 'c46c3a26-39a5-42cc-b07s-89655304eh6'";

                var defaultCPC = VPParameter.Configuration.GetValue<string>("DefaultCpc");

                mCorporateProductCatalog = connection.Query<CorporateProductCatalog>(selectCpc).FirstOrDefault();

                pmolPlannedWorkLabour = connection
                    .Query<PmolPlannedWorkLabour>(selectLabour, new { PmolId = VPParameter.PmolAssignDayPanningDto.Id })
                    .FirstOrDefault();

                if (pmolPlannedWorkLabour != null)
                {
                    pmolTeamRole = connection
                        .Query<PmolTeamRole>(selectTeamRole, new { LabourId = pmolPlannedWorkLabour.Id })
                        .FirstOrDefault();

                    if (pmolTeamRole != null)
                    {
                        var deleteExistTeamRole =
                            @"UPDATE dbo.PmolTeamRole SET IsDeleted = 1 WHERE PmolLabourId = @PmolLabourId";

                        await connection.ExecuteAsync(deleteExistTeamRole,
                            new { PmolLabourId = pmolPlannedWorkLabour.Id });
                    }

                    var pmolDrag = new PmolDrag()
                    {
                        ExecutionStartTime = VPParameter.PmolAssignDayPanningDto.ExecutionStartTime,
                        ExecutionEndTime = VPParameter.PmolAssignDayPanningDto.ExecutionEndTime
                    };
                    VPParameter.PmolDrag = pmolDrag;

                    await UpdateLabourRequiredTime(VPParameter,VPParameter.PmolAssignDayPanningDto.TeamId,pmolPlannedWorkLabour.Id,connectionString,VPParameter.PmolAssignDayPanningDto.ExecutionDate,false);
                    
                    var addTeamMember =
                        @"INSERT INTO dbo.PmolTeamRole ( Id ,CabPersonId ,RoleId ,Type ,PmolLabourId ) VALUES ( @Id ,@CabPersonId ,@RoleId ,@Type ,@PmolLabourId );";

                    await connection.ExecuteAsync("UPDATE dbo.PMol SET ForemanId = NULL WHERE Id = @Id",
                        new { VPParameter.PmolAssignDayPanningDto.Id });

                    foreach (var i in mOrganizationTaxonomy)
                    {
                        if (i.RoleId == "2210e768-msms-Item-team1-ee367a82ad22")
                        {
                            var param2 = new
                            {
                                Id = Guid.NewGuid(),
                                CabPersonId = i.PersonId,
                                RoleId = "Foreman",
                                Type = "Planned",
                                PmolLabourId = pmolPlannedWorkLabour.Id
                            };
                            await connection.ExecuteAsync(addTeamMember, param2);
                            await connection.ExecuteAsync("UPDATE dbo.PMol SET ForemanId = @ForemanId WHERE Id = @Id",
                                new { ForemanId = i.PersonId, VPParameter.PmolAssignDayPanningDto.Id });
                        }

                        else
                        {
                            var param2 = new
                            {
                                Id = Guid.NewGuid(),
                                CabPersonId = i.PersonId,
                                RoleId = "5e622d-4783-95e6-4092004eb5e-aff848e",
                                Type = "Planned",
                                PmolLabourId = pmolPlannedWorkLabour.Id
                            };
                            await connection.ExecuteAsync(addTeamMember, param2);
                        }

                        var item = connection
                            .Query<Pmol>("Select * from Pmol Where Id = @Id",
                                new { Id = VPParameter.PmolAssignDayPanningDto.Id })
                            .FirstOrDefault();


                        double pmolTime;
                        if (startTime != null && endTime != null)
                        {
                            var d1 = DateTime.Parse(endTime) - DateTime.Parse(startTime);

                            pmolTime = d1.TotalHours;
                        }
                        else
                        {
                            pmolTime = 0;
                        }

                        var pmolTimeInsert =
                            @"INSERT INTO dbo.PmolAssignTime ( Id ,CabPersonId ,PmolId ,ExecutionDate ,ProjectSequenceId ,AssignTime ) VALUES ( @Id ,@CabPersonId ,@PmolId ,@ExecutionDate ,@ProjectSequenceId ,@AssignTime )";


                        var timeParam = new
                        {
                            Id = Guid.NewGuid().ToString(),
                            CabPersonId = i.PersonId,
                            PmolId = VPParameter.PmolAssignDayPanningDto.Id,
                            item?.ExecutionDate,
                            ProjectSequenceId = VPParameter.PmolAssignDayPanningDto.ProjectSequenceCode,
                            AssignTime = pmolTime.ToString()
                        };

                        await cuConnection.ExecuteAsync(pmolTimeInsert, timeParam);
                    }

                }
                else
                {
                    var createLabour =
                        @"INSERT INTO dbo.PMolPlannedWorkLabour ( Id ,CoperateProductCatalogId ,CpcBasicUnitofMeasureId ,PmolId ,Type ) VALUES ( @Id ,@CoperateProductCatalogId ,@CpcBasicUnitofMeasureId ,@PmolId ,@Type )";

                    var addTeamMember =
                        @"INSERT INTO dbo.PmolTeamRole ( Id ,CabPersonId ,RoleId ,Type ,PmolLabourId ) VALUES ( @Id ,@CabPersonId ,@RoleId ,@Type ,@PmolLabourId );";

                    var param1 = new
                    {
                        Id = Guid.NewGuid(),
                        CoperateProductCatalogId = defaultCPC,
                        PmolId = VPParameter.PmolAssignDayPanningDto.Id,
                        Type = "Planned",
                        CpcBasicUnitofMeasureId = "cce5fd6a-91e1-4fc0-b3f6-2c462eaf2500"
                    };

                    await connection.ExecuteAsync(createLabour, param1);

                    await UpdateLabourRequiredTime(VPParameter,VPParameter.PmolAssignDayPanningDto.TeamId,param1.Id.ToString(),connectionString, VPParameter.PmolAssignDayPanningDto.ExecutionDate,true);

                    await connection.ExecuteAsync("UPDATE dbo.PMol SET ForemanId = NULL WHERE Id = @Id",
                        new { VPParameter.PmolAssignDayPanningDto.Id });

                    foreach (var i in mOrganizationTaxonomy)
                    {


                        if (i.RoleId == "2210e768-msms-Item-team1-ee367a82ad22")
                        {
                            var param2 = new
                            {
                                Id = Guid.NewGuid(),
                                CabPersonId = i.PersonId,
                                RoleId = "Foreman",
                                Type = "Planned",
                                PmolLabourId = param1.Id
                            };
                            await connection.ExecuteAsync(addTeamMember, param2);
                            await connection.ExecuteAsync("UPDATE dbo.PMol SET ForemanId = @ForemanId WHERE Id = @Id",
                                new { ForemanId = i.PersonId, VPParameter.PmolAssignDayPanningDto.Id });
                        }

                        else
                        {
                            var param2 = new
                            {
                                Id = Guid.NewGuid(),
                                CabPersonId = i.PersonId,
                                RoleId = "5e622d-4783-95e6-4092004eb5e-aff848e",
                                Type = "Planned",
                                PmolLabourId = param1.Id
                            };
                            await connection.ExecuteAsync(addTeamMember, param2);
                        }
                        
                        var item = connection
                            .Query<Pmol>("Select * from Pmol Where Id = @Id",
                                new { Id = VPParameter.PmolAssignDayPanningDto.Id })
                            .FirstOrDefault();


                        double pmolTime;
                        if (startTime != null && endTime != null)
                        {
                            var d1 = DateTime.Parse(endTime) - DateTime.Parse(startTime);

                            pmolTime = d1.TotalHours;
                        }
                        else
                        {
                            pmolTime = 0;
                        }

                        var pmolTimeInsert =
                            @"INSERT INTO dbo.PmolAssignTime ( Id ,CabPersonId ,PmolId ,ExecutionDate ,ProjectSequenceId ,AssignTime ) VALUES ( @Id ,@CabPersonId ,@PmolId ,@ExecutionDate ,@ProjectSequenceId ,@AssignTime )";


                        var timeParam = new
                        {
                            Id = Guid.NewGuid().ToString(),
                            CabPersonId = i.PersonId,
                            PmolId = VPParameter.PmolAssignDayPanningDto.Id,
                            item?.ExecutionDate,
                            ProjectSequenceId = VPParameter.PmolAssignDayPanningDto.ProjectSequenceCode,
                            AssignTime = pmolTime.ToString()
                        };

                        await cuConnection.ExecuteAsync(pmolTimeInsert, timeParam);
                    }
                }


                if (mOrganizationTeamVehicel != null)
                {
                    var insertVehicle =
                        @"INSERT INTO dbo.PMolPlannedWorkTools ( Id ,CoperateProductCatalogId,RequiredQuantity,ConsumedQuantity,CpcBasicUnitofMeasureId,PmolId,Type) VALUES ( @Id ,@CoperateProductCatalogId,'1','0',@CpcBasicUnitofMeasureId,@PmolId,@Type)";

                    foreach (var v in mOrganizationTeamVehicel)
                    {
                        var id = connection.Query<string>(
                            "SELECT Id FROM dbo.PMolPlannedWorkTools WHERE PmolId = @PmolId AND CoperateProductCatalogId = @CoperateProductCatalogId",
                            new
                            {
                                PmolId = VPParameter.PmolAssignDayPanningDto.Id, v.CoperateProductCatalogId
                            }).FirstOrDefault();

                        if (id == null)
                        {
                            var param = new
                            {
                                Id = Guid.NewGuid(),
                                v.CoperateProductCatalogId,
                                PmolId = VPParameter.PmolAssignDayPanningDto.Id,
                                CpcBasicUnitofMeasureId = "e8987a57-0bef-4607-8428-f52dc0cabc58",
                                Type = "Planned"
                            };

                            await connection.ExecuteAsync(insertVehicle, param);
                        }
                    }
                }
            }
        }

        else
        {
            var mAssignPmolTeam = new AssignPmolTeam
            {
                PmolId = VPParameter.PmolAssignDayPanningDto.Id,
                PmolTeamMember = VPParameter.PmolAssignDayPanningDto.Team
            };
            VPParameter.AssignPmolTeam = mAssignPmolTeam;
            await TeamAssignForDayPlanning(VPParameter);
        }

        return VPParameter.PmolAssignDayPanningDto.Id;
    }

    public async Task<string> CopyTeamswithPmol(VPParameter VPParameter)
    {
        var selectProject =
            @"SELECT ProjectDefinition.Title,ProjectDefinition.SequenceCode, ProjectDefinition.ProjectConnectionString, CabCompany.SequenceCode AS ContractingUnitId FROM dbo.ProjectDefinition LEFT OUTER JOIN CabCompany ON ProjectDefinition.ContractingUnitId = CabCompany.Id WHERE ProjectDefinition.IsDeleted = 0 ORDER BY ProjectDefinition.SequenceCode";
        var selectLabourItem = @"SELECT * FROM dbo.PMolPlannedWorkLabour";
        var teamSelct = @"SELECT * FROM dbo.PmolTeamRole";
        var insert =
            @"INSERT INTO dbo.TeamWithPmol ( Id ,PmolId ,Cu ,Project ,OrganizationTeamId ,PMolPlannedWorkLabourId ) VALUES ( @Id ,@PmolId ,@Cu ,@Project ,@OrganizationTeamId ,@PMolPlannedWorkLabourId );";


        var mProjectDefinition = new List<ProjectDefinition>();
        using (var connection =
               new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
        {
            await connection.ExecuteAsync("DELETE FROM dbo.TeamWithPmol");
            mProjectDefinition = connection
                .Query<ProjectDefinition>(selectProject).ToList();


            foreach (var i in mProjectDefinition)
            {
                IEnumerable<PmolPlannedWorkLabour> mPmolPlannedWorkLabour;
                using (var dbconnection =
                       new SqlConnection(i.ProjectConnectionString))
                {
                    mPmolPlannedWorkLabour = dbconnection.Query<PmolPlannedWorkLabour>(selectLabourItem).ToList();
                }

                foreach (var n in mPmolPlannedWorkLabour)
                {
                    var param = new
                    {
                        Id = Guid.NewGuid(),
                        n.PmolId,
                        Cu = i.ContractingUnitId,
                        Project = i.SequenceCode,
                        PMolPlannedWorkLabourId = n.Id,
                        OrganizationTeamId = ""
                    };
                    await connection.ExecuteAsync(insert, param);
                }
            }
        }

        return "Ok";
    }

    public async Task<IEnumerable<DayPlanningToolsResults>> GetDayPlanningToolsByCu(VPParameter VPParameter)
    {
        var sb =
            new StringBuilder(
                "select Id AS [Key], Name, SequenceCode from CabCompany where IsDeleted = 0 AND IsContractingUnit = 1 ");
        await using var tenetConnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);
        var cu = tenetConnection.QueryAsync<CabCompanyDto>(sb.ToString()).Result;

        var results = new List<DayPlanningToolsResults>();

        var query = @"SELECT
                      StockHeader.Id
                     ,StockHeader.CPCId
                     ,CorporateProductCatalog.ResourceNumber
                     ,CorporateProductCatalog.Title
                    FROM dbo.StockHeader
                    LEFT OUTER JOIN dbo.CorporateProductCatalog
                      ON StockHeader.CPCId = CorporateProductCatalog.Id
                      WHERE CorporateProductCatalog.ResourceFamilyId != '0c355800-91fd-4d99-8010-921a42f0ba04' AND StockHeader.TypeId = 'c46c3a26-39a5-42cc-n9wn-89655304eh6'";

        if (!VPParameter.DayPlanningToolsFilter.Cu.Any())
            foreach (var item in cu)
            {
                var connectionString = ConnectionString.MapConnectionString(item.SequenceCode,
                    null, VPParameter.TenantProvider);
                var connection = new SqlConnection(connectionString);
                var data = connection.Query<DayPlanningToolsResults>(query).ToList();

                data.ForEach(x => x.Cu = item.SequenceCode);

                results.AddRange(data);
            }
        else
            foreach (var item in VPParameter.DayPlanningToolsFilter.Cu)
            {
                var connectionString = ConnectionString.MapConnectionString(item,
                    null, VPParameter.TenantProvider);
                var connection = new SqlConnection(connectionString);
                var data = connection.Query<DayPlanningToolsResults>(query).ToList();

                data.ForEach(x => x.Cu = item);

                results.AddRange(data);
            }

        return results;
    }

    public async Task<string> PersonAssignDayPlanning(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.PmolAssignDayPanningDto.ContractingUnit,
            VPParameter.PmolAssignDayPanningDto.ProjectSequenceCode, VPParameter.TenantProvider);

        var cuConnectionString = ConnectionString.MapConnectionString(
            VPParameter.PmolAssignDayPanningDto.ContractingUnit,
            null, VPParameter.TenantProvider);

        await using var cuConnection = new SqlConnection(cuConnectionString);
        
        var teamquery =
            @"SELECT CabPerson.Id ,CabPerson.FirstName AS Name,OrganizationTaxonomy.RoleId FROM dbo.OrganizationTaxonomy LEFT OUTER JOIN dbo.CabPersonCompany ON OrganizationTaxonomy.PersonId = CabPersonCompany.Id INNER JOIN dbo.CabPerson ON CabPersonCompany.PersonId = CabPerson.Id WHERE OrganizationTaxonomy.ParentId = @Id";

        var update =
            @"UPDATE dbo.OrganizationTeamPmol SET OrganizationTeamId = @OrganizationTeamId WHERE PmolId = @Id ;";

        var insertNewTeam =
            @"INSERT INTO dbo.OrganizationTaxonomy ( Id ,Title,ParentId ,OrganizationTaxonomyLevelId,PersonId ,RoleId,ModifiedDate,StartDate,EndDate,TemporaryTeamNameId ) VALUES ( @Id ,@Title,@ParentId ,@OrganizationTaxonomyLevelId ,(SELECT Id FROM CabPersonCompany WHERE PersonId = @PersonId) ,@RoleId,@ModifiedDate,@StartDate,@EndDate,@TemporaryTeamNameId);";

        var team = new List<PmolTeamMeber>();

        string teamId = null;
        
        using (var connection =
               new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
        {
            if (VPParameter.PmolAssignDayPanningDto.TeamId != null)
            {
                var checkTeamCombinationSql =
                    @"SELECT PersonId FROM OrganizationTaxonomy ot WHERE ot.ParentId = @TeamId";

                var checkTeamCombinationData = connection.Query<string>(checkTeamCombinationSql, new {VPParameter.PmolAssignDayPanningDto.TeamId}).ToList();

                var cabPersonCompanyId = connection.Query<string>(
                    "SELECT Id FROM dbo.CabPersonCompany cpc WHERE cpc.PersonId = @PersonId",
                    new {VPParameter.PmolAssignDayPanningDto.PersonId }).FirstOrDefault();
                
                checkTeamCombinationData.Add(cabPersonCompanyId);

                checkTeamCombinationData.Sort();
                
                var endDate = VPParameter.PmolAssignDayPanningDto.ExecutionDate.AddDays(-(int)VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek).AddDays(7);
                
                string selectTeamSql = @"with name_tree as
                                        (SELECT
                                          OrganizationTaxonomy.Id
                                         ,OrganizationTaxonomy.Title
                                         ,OrganizationTaxonomy.ParentId
                                         ,OrganizationTaxonomy.OrganizationTaxonomyLevelId
                                         ,OrganizationTaxonomy.ModifiedDate
                                         ,OrganizationTaxonomy.EndDate
                                         ,OrganizationTaxonomy.TemporaryTeamNameId
                                        FROM dbo.OrganizationTaxonomy
                                        WHERE OrganizationTaxonomy.Id = (SELECT ot.ParentId FROM OrganizationTaxonomy ot WHERE Id = @TeamId)
                                          UNION ALL
                                          SELECT c.Id, c.Title,c.ParentId,c.OrganizationTaxonomyLevelId,c.ModifiedDate,c.EndDate,c.TemporaryTeamNameId
                                          FROM dbo.OrganizationTaxonomy c
                                          JOIN name_tree p on p.Id = c.ParentId)
                                          select OrganizationTaxonomyLevelId, Title, Id,ParentId,ModifiedDate,EndDate,TemporaryTeamNameId
                                          from name_tree
                                          where OrganizationTaxonomyLevelId = 'fg10e768-3e06-po02-b337-ee367a82adfg'
                                          AND (EndDate = @EndDate OR EndDate IS NULL)
                                          ORDER BY Title DESC";

                var selectTeamData = connection
                    .Query<OrganizationTaxonomy>(selectTeamSql, new { VPParameter.PmolAssignDayPanningDto.TeamId, EndDate = endDate }).ToList();

                string existingTeamId = null;
                
                foreach (var i in selectTeamData)
                {
                    var teamData = connection.Query<string>(checkTeamCombinationSql, new { TeamId = i.Id}).ToList();
                    
                    teamData.Sort();
                    
                    if (teamData.SequenceEqual(checkTeamCombinationData))
                    {
                        existingTeamId = i.Id;
                        break;
                    }
                }

                if (existingTeamId != null)
                {
                    teamId = existingTeamId;
                    // await connection.ExecuteAsync("UPDATE dbo.OrganizationTeamPmol SET OrganizationTeamId = @existingTeamId WHERE PmolId IN (SELECT PmolId FROM OrganizationTeamPmol WHERE OrganizationTeamId = @TeamId)",new{existingTeamId,VPParameter.PmolAssignDayPanningDto.TeamId});
                    await connection.ExecuteAsync("UPDATE dbo.OrganizationTeamPmol SET OrganizationTeamId = @existingTeamId WHERE PmolId = @Id",new{existingTeamId,VPParameter.PmolAssignDayPanningDto.Id});
                    
                    await using var projectConnection = new SqlConnection(connectionString);
                    var item = projectConnection
                        .Query<Pmol>("Select * from Pmol Where Id = @Id", new { Id = VPParameter.PmolAssignDayPanningDto.Id })
                        .FirstOrDefault();
            

                    var startTime = item?.ExecutionStartTime;
                    var endTime = item?.ExecutionEndTime;

                    double pmolTime;
                    if (startTime != null && endTime != null)
                    {
                        var d1 = DateTime.Parse(endTime) - DateTime.Parse(startTime);

                        pmolTime = d1.TotalHours;
                    }
                    else
                    {
                        pmolTime = 0;
                    }

                    var pmolTimeInsert =
                        @"INSERT INTO dbo.PmolAssignTime ( Id ,CabPersonId ,PmolId ,ExecutionDate ,ProjectSequenceId ,AssignTime ) VALUES ( @Id ,@CabPersonId ,@PmolId ,@ExecutionDate ,@ProjectSequenceId ,@AssignTime )";


                    var timeParam = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        CabPersonId = VPParameter.PmolAssignDayPanningDto.PersonId,
                        PmolId = VPParameter.PmolAssignDayPanningDto.Id,
                        item?.ExecutionDate,
                        ProjectSequenceId = VPParameter.PmolAssignDayPanningDto.ProjectSequenceCode,
                        AssignTime = pmolTime.ToString()
                    };

                    await cuConnection.ExecuteAsync(pmolTimeInsert, timeParam);
                }

                else
                {
                    team = connection
                        .Query<PmolTeamMeber>(teamquery, new { Id = VPParameter.PmolAssignDayPanningDto.TeamId })
                        .ToList();
                    var parent = connection
                        .Query<OrganizationTaxonomy>("SELECT *FROM dbo.OrganizationTaxonomy WHERE Id = @Id;",
                            new { Id = VPParameter.PmolAssignDayPanningDto.TeamId }).FirstOrDefault();
                    var teamNew = new PmolTeamMeber();
                    teamNew.Id = VPParameter.PmolAssignDayPanningDto.PersonId;
                    teamNew.Name = VPParameter.PmolAssignDayPanningDto.PersonName;
                    team.Add(teamNew);

                    var lacaldate = Convert.ToDateTime(VPParameter.PmolAssignDayPanningDto.ExecutionStartTime);

                    var param1 = new
                    {
                        Id = Guid.NewGuid(),
                        Title = parent.Title,
                        parent.ParentId,
                        OrganizationTaxonomyLevelId = "fg10e768-3e06-po02-b337-ee367a82adfg",
                        PersonId = "",
                        RoleId = "",
                        ModifiedDate = DateTime.UtcNow,
                        StartDate = VPParameter.PmolAssignDayPanningDto.ExecutionDate
                            .AddDays(-(int)VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek).Date,
                        EndDate = VPParameter.PmolAssignDayPanningDto.ExecutionDate
                            .AddDays(-(int)VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek).AddDays(7).Date,
                        TemporaryTeamNameId = "7bcb4e8d-8e8c-487d-team-6b91c89fAcce"
                    };
                    
                    await connection.ExecuteAsync(insertNewTeam, param1);

                    teamId = param1.Id.ToString();
                    await connection.ExecuteAsync(update,
                        new { OrganizationTeamId = param1.Id, VPParameter.PmolAssignDayPanningDto.Id });

                    foreach (var i in team)
                    {
                        var param = new
                        {
                            Id = Guid.NewGuid(),
                            Title = i.Name,
                            ParentId = param1.Id,
                            OrganizationTaxonomyLevelId = "we10e768-3e06-po02-b337-ee367a82adwe",
                            PersonId = i.Id,
                            i.RoleId,
                            ModifiedDate = DateTime.UtcNow,
                            StartDate = "",
                            EndDate = "",
                            TemporaryTeamNameId = " "
                        };

                        await connection.ExecuteAsync(insertNewTeam, param);
                    }
                }
            }
        }
        
        var addTeamMember =
            @"INSERT INTO dbo.PmolTeamRole ( Id ,CabPersonId ,RoleId ,Type ,PmolLabourId ) VALUES ( @Id ,@CabPersonId ,@RoleId ,@Type ,@PmolLabourId);";

        using (var connection =
               new SqlConnection(connectionString))
        {
            var pmolLabourId = connection
                .Query<string>(@"SELECT Id FROM PMolPlannedWorkLabour WHERE PmolId = @PmolId AND IsDeleted = 0",
                    new { PmolId = VPParameter.PmolAssignDayPanningDto.Id }).FirstOrDefault();
            
            var param2 = new
            {
                Id = Guid.NewGuid(),
                CabPersonId = VPParameter.PmolAssignDayPanningDto.PersonId,
                RoleId = "5e622d-4783-95e6-4092004eb5e-aff848e",
                Type = "Planned",
                PmolLabourId = pmolLabourId
            };

            string pmolId = null;

            if (VPParameter.PmolAssignDayPanningDto.Id != null) pmolId = VPParameter.PmolAssignDayPanningDto.Id;

            //if (pmolId == null) pmolId = VPParameter.AddTeamMember.PmolId;

            await connection.ExecuteAsync(addTeamMember, param2);
            
            var item = connection
                .Query<Pmol>("Select * from Pmol Where Id = @Id", new { Id = pmolId })
                .FirstOrDefault();
            
            await UpdateLabourRequiredTime(VPParameter,teamId,pmolLabourId,connectionString,item.ExecutionDate.Value,true);

            var startTime = item?.ExecutionStartTime;
            var endTime = item?.ExecutionEndTime;

            double pmolTime;
            if (startTime != null && endTime != null)
            {
                var d1 = DateTime.Parse(endTime) - DateTime.Parse(startTime);

                pmolTime = d1.TotalHours;
            }
            else
            {
                pmolTime = 0;
            }

            var pmolTimeInsert =
                @"INSERT INTO dbo.PmolAssignTime ( Id ,CabPersonId ,PmolId ,ExecutionDate ,ProjectSequenceId ,AssignTime ) VALUES ( @Id ,@CabPersonId ,@PmolId ,@ExecutionDate ,@ProjectSequenceId ,@AssignTime )";


            var timeParam = new
            {
                Id = Guid.NewGuid().ToString(),
                CabPersonId = VPParameter.PmolAssignDayPanningDto.PersonId,
                PmolId = VPParameter.PmolAssignDayPanningDto.Id,
                item?.ExecutionDate,
                ProjectSequenceId = VPParameter.PmolAssignDayPanningDto.ProjectSequenceCode,
                AssignTime = pmolTime.ToString()
            };

            await cuConnection.ExecuteAsync(pmolTimeInsert, timeParam);
        }

        return VPParameter.PmolAssignDayPanningDto.Id;
    }

    public async Task<string> CreateNewTeamDayPlanning(VPParameter VPParameter)
    {
        var projectData =
            @"SELECT ProjectDefinition.Title, ProjectDefinition.ProjectConnectionString, CabCompany.SequenceCode AS ContractingUnitId FROM dbo.ProjectDefinition LEFT OUTER JOIN CabCompany ON ProjectDefinition.ContractingUnitId = CabCompany.Id WHERE ProjectDefinition.SequenceCode = @Project";
        
        using (var connection =
               new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
        {
            var cu = connection.Query<ProjectDefinition>(projectData,
                new { Project = VPParameter.PmolAssignDayPanningDto.ProjectSequenceCode }).FirstOrDefault();

            var newTeam =
                @"INSERT INTO dbo.OrganizationTaxonomy (Id, Title, ParentId, OrganizationTaxonomyLevelId, PersonId, RoleId, ModifiedDate,StartDate,EndDate,TemporaryTeamNameId) VALUES (@Id, @Title, @ParentId, @OrganizationTaxonomyLevelId, (SELECT Id FROM CabPersonCompany WHERE PersonId = @PersonId), @RoleId, @ModifiedDate,@StartDate,@EndDate,@TemporaryTeamNameId)";

            var newTeam2 =
                @"INSERT INTO dbo.OrganizationTaxonomy (Id, Title, ParentId, OrganizationTaxonomyLevelId, PersonId, RoleId, ModifiedDate,StartDate,EndDate,TemporaryTeamNameId) VALUES (@Id, @Title, @ParentId, @OrganizationTaxonomyLevelId, @PersonId, @RoleId, @ModifiedDate,@StartDate,@EndDate,@TemporaryTeamNameId)";

            if (VPParameter.PmolAssignDayPanningDto.TeamId == null)
            {
                var parent = connection
                    .Query<OrganizationTaxonomy>(
                        "SELECT * FROM dbo.OrganizationTaxonomy WHERE Title = @Cu", new { Cu = VPParameter.PmolAssignDayPanningDto.ContractingUnit })
                    .FirstOrDefault();

                var parentId = VPParameter.PmolAssignDayPanningDto.BuId;

                if (VPParameter.PmolAssignDayPanningDto.ProjectSequenceCode != null)
                    parentId = connection.Query<string>(
                            "SELECT pc.ProjectClassificationBuisnessUnit FROM dbo.ProjectDefinition p LEFT OUTER JOIN ProjectClassification pc ON p.Id = pc.ProjectId WHERE p.SequenceCode = @SequenceCode",
                            new { SequenceCode = VPParameter.PmolAssignDayPanningDto.ProjectSequenceCode })
                        .FirstOrDefault();

                var param1 = new
                {
                    Id = Guid.NewGuid().ToString(),
                    parent.Title,
                    parentId,
                    OrganizationTaxonomyLevelId = "fg10e768-3e06-po02-b337-ee367a82adfg",
                    PersonId = "",
                    RoleId = "",
                    ModifiedDate = DateTime.UtcNow,
                    StartDate = VPParameter.PmolAssignDayPanningDto.ExecutionDate
                        .AddDays(-(int)VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek).Date,
                    EndDate = VPParameter.PmolAssignDayPanningDto.ExecutionDate
                        .AddDays(-(int)VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek).AddDays(7).Date,
                    TemporaryTeamNameId = "7bcb4e8d-8e8c-487d-team-6b91c89fAcce"
                };

                var param = new
                {
                    Id = Guid.NewGuid().ToString(),
                    Title = VPParameter.PmolAssignDayPanningDto.PersonName,
                    ParentId = param1.Id,
                    OrganizationTaxonomyLevelId = "we10e768-3e06-po02-b337-ee367a82adwe",
                    VPParameter.PmolAssignDayPanningDto.PersonId,
                    RoleId = "2210e768-msms-Item-team2-ee367a82ad22",
                    ModifiedDate = DateTime.UtcNow,
                    StartDate = "",
                    EndDate = "",
                    TemporaryTeamNameId = ""
                };

                await connection.ExecuteAsync(newTeam, param1);
                await connection.ExecuteAsync(newTeam, param);

                if (VPParameter.ProjectSequenceId != null)
                {
                    var sql =
                        @"INSERT INTO dbo.OrganizationTeamPmol ( Id ,OrganizationTeamId ,ContractingUnit ,Project ) VALUES ( @Id ,@OrganizationTeamId ,@ContractingUnit ,@Project );";

                    var param2 = new
                    {
                        Id = Guid.NewGuid(), OrganizationTeamId = param1.Id,
                        VPParameter.PmolAssignDayPanningDto.ContractingUnit,
                        Project = VPParameter.PmolAssignDayPanningDto.ProjectSequenceCode
                    };

                    await connection.ExecuteAsync(sql, param2);
                }

                return param1.Id;
            }

            // else
            // {
            //     var isPerson = connection
            //         .Query<string>(
            //             @"SELECT Id FROM dbo.OrganizationTaxonomy WHERE ParentId = @TeamId AND PersonId = (SELECT Id FROM dbo.CabPersonCompany WHERE PersonId = @PersonId);",
            //             new {VPParameter.PmolAssignDayPanningDto.TeamId,VPParameter.PmolAssignDayPanningDto.PersonId }).FirstOrDefault();
            //
            //     if (isPerson == null)
            //     {
            //         var param = new
            //         {
            //             Id = Guid.NewGuid(),
            //             Title = VPParameter.PmolAssignDayPanningDto.PersonName,
            //             ParentId = VPParameter.PmolAssignDayPanningDto.TeamId,
            //             OrganizationTaxonomyLevelId = "we10e768-3e06-po02-b337-ee367a82adwe",
            //             VPParameter.PmolAssignDayPanningDto.PersonId,
            //             RoleId = "2210e768-msms-Item-team2-ee367a82ad22",
            //             ModifiedDate = DateTime.UtcNow,
            //             StartDate = VPParameter.PmolAssignDayPanningDto.ExecutionDate
            //                 .AddDays(-(int)VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek).Date,
            //             EndDate = VPParameter.PmolAssignDayPanningDto.ExecutionDate
            //                 .AddDays(-(int)VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek).AddDays(7).Date,
            //             TemporaryTeamNameId = " "
            //         };
            //         await connection.ExecuteAsync(newTeam, param);
            //
            //         var selectpmol =
            //             @"SELECT * FROM dbo.OrganizationTeamPmol WHERE OrganizationTeamId = @TeamId AND PmolId IS NOT NULL";
            //
            //         var mOrganizationTeamPmol = connection
            //             .Query<OrganizationTeamPmol>(selectpmol, new { VPParameter.PmolAssignDayPanningDto.TeamId })
            //             .ToList();
            //
            //         foreach (var r in mOrganizationTeamPmol)
            //         {
            //             r.ContractingUnit ??= "COM-0001";
            //             var connectionString = ConnectionString.MapConnectionString(r.ContractingUnit,
            //                 r.Project, VPParameter.TenantProvider);
            //
            //             var cuConnectionString = ConnectionString.MapConnectionString(
            //                 r.ContractingUnit,
            //                 null, VPParameter.TenantProvider);
            //
            //             await using var cuConnection = new SqlConnection(cuConnectionString);
            //
            //             var addTeamMember =
            //                 @"INSERT INTO dbo.PmolTeamRole ( Id ,CabPersonId ,RoleId ,Type ,PmolLabourId ) VALUES ( @Id ,@CabPersonId ,@RoleId ,@Type ,@PmolLabourId);";
            //             var pMolLaberQuery =
            //                 @"SELECT Id FROM PMolPlannedWorkLabour WHERE PmolId = @PmolId AND IsDeleted = 0";
            //
            //             using (var dbconnection =
            //                    new SqlConnection(connectionString))
            //             {
            //                 var pMolLaberList = dbconnection
            //                     .Query<string>(pMolLaberQuery, new { r.PmolId }).FirstOrDefault();
            //
            //                 var param2 = new
            //                 {
            //                     Id = Guid.NewGuid(),
            //                     CabPersonId = VPParameter.PmolAssignDayPanningDto.PersonId,
            //                     RoleId = "5e622d-4783-95e6-4092004eb5e-aff848e",
            //                     Type = "Planned",
            //                     r.PmolId,
            //                     PmolLabourId = pMolLaberList
            //                 };
            //                 await dbconnection.ExecuteAsync(addTeamMember, param2);
            //
            //                 await UpdateLabourRequiredTime(VPParameter, VPParameter.PmolAssignDayPanningDto.TeamId,
            //                     pMolLaberList, connectionString, r.ExecutionDate.Value,true);
            //
            //                 var item = dbconnection
            //                     .Query<Pmol>("Select * from Pmol Where Id = @Id", new { Id = r.PmolId })
            //                     .FirstOrDefault();
            //
            //                 var startTime = item?.ExecutionStartTime;
            //                 var endTime = item?.ExecutionEndTime;
            //
            //                 double pmolTime;
            //                 if (startTime != null && endTime != null)
            //                 {
            //                     var d1 = DateTime.Parse(endTime) - DateTime.Parse(startTime);
            //
            //                     pmolTime = d1.TotalHours;
            //                 }
            //                 else
            //                 {
            //                     pmolTime = 0;
            //                 }
            //
            //                 var pmolTimeInsert =
            //                     @"INSERT INTO dbo.PmolAssignTime ( Id ,CabPersonId ,PmolId ,ExecutionDate ,ProjectSequenceId ,AssignTime ) VALUES ( @Id ,@CabPersonId ,@PmolId ,@ExecutionDate ,@ProjectSequenceId ,@AssignTime )";
            //
            //                 var timeParam = new
            //                 {
            //                     Id = Guid.NewGuid().ToString(),
            //                     CabPersonId = VPParameter.PmolAssignDayPanningDto.PersonId,
            //                     PmolId = item?.Id,
            //                     item?.ExecutionDate,
            //                     ProjectSequenceId = r.Project,
            //                     AssignTime = pmolTime.ToString()
            //                 };
            //
            //                 await cuConnection.ExecuteAsync(pmolTimeInsert, timeParam);
            //             }
            //         }
            //     }
            //     
            //     return VPParameter.PmolAssignDayPanningDto.TeamId;
            // }

            else
            {
                var parent = connection
                    .Query<OrganizationTaxonomy>(
                        "SELECT * FROM dbo.OrganizationTaxonomy WHERE Title = @Cu", new { Cu = VPParameter.PmolAssignDayPanningDto.ContractingUnit })
                    .FirstOrDefault();

                var parentId = VPParameter.PmolAssignDayPanningDto.BuId;

                if (VPParameter.PmolAssignDayPanningDto.ProjectSequenceCode != null)
                    parentId = connection.Query<string>(
                            "SELECT pc.ProjectClassificationBuisnessUnit FROM dbo.ProjectDefinition p LEFT OUTER JOIN ProjectClassification pc ON p.Id = pc.ProjectId WHERE p.SequenceCode = @SequenceCode",
                            new { SequenceCode = VPParameter.PmolAssignDayPanningDto.ProjectSequenceCode })
                        .FirstOrDefault();

                var param1 = new
                {
                    Id = Guid.NewGuid().ToString(),
                    parent.Title,
                    parentId,
                    OrganizationTaxonomyLevelId = "fg10e768-3e06-po02-b337-ee367a82adfg",
                    PersonId = "",
                    RoleId = "",
                    ModifiedDate = DateTime.UtcNow,
                    StartDate = VPParameter.PmolAssignDayPanningDto.ExecutionDate
                        .AddDays(-(int)VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek).Date,
                    EndDate = VPParameter.PmolAssignDayPanningDto.ExecutionDate
                        .AddDays(-(int)VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek).AddDays(7).Date,
                    TemporaryTeamNameId = "7bcb4e8d-8e8c-487d-team-6b91c89fAcce"
                };

                var param = new
                {
                    Id = Guid.NewGuid().ToString(),
                    Title = VPParameter.PmolAssignDayPanningDto.PersonName,
                    ParentId = param1.Id,
                    OrganizationTaxonomyLevelId = "we10e768-3e06-po02-b337-ee367a82adwe",
                    VPParameter.PmolAssignDayPanningDto.PersonId,
                    RoleId = "2210e768-msms-Item-team2-ee367a82ad22",
                    ModifiedDate = DateTime.UtcNow,
                    StartDate = "",
                    EndDate = "",
                    TemporaryTeamNameId = ""
                };

                await connection.ExecuteAsync(newTeam, param1);
                await connection.ExecuteAsync(newTeam, param);

                var team = connection
                    .Query<OrganizationTaxonomy>(@"SELECT * FROM dbo.OrganizationTaxonomy WHERE ParentId = @TeamId", new {VPParameter.PmolAssignDayPanningDto.TeamId })
                    .ToList();

                foreach (var i in team)
                {
                    var param2 = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        i.Title,
                        ParentId = param1.Id,
                        OrganizationTaxonomyLevelId = "we10e768-3e06-po02-b337-ee367a82adwe",
                        i.PersonId,
                        i.RoleId,
                        ModifiedDate = DateTime.UtcNow,
                        StartDate = "",
                        EndDate = "",
                        TemporaryTeamNameId = ""
                    };
                    
                    await connection.ExecuteAsync(newTeam2, param2);
                }
                
                if (VPParameter.ProjectSequenceId != null)
                {
                    var sql =
                        @"INSERT INTO dbo.OrganizationTeamPmol ( Id ,OrganizationTeamId ,ContractingUnit ,Project ) VALUES ( @Id ,@OrganizationTeamId ,@ContractingUnit ,@Project );";

                    var param2 = new
                    {
                        Id = Guid.NewGuid(), OrganizationTeamId = param1.Id,
                        VPParameter.PmolAssignDayPanningDto.ContractingUnit,
                        Project = VPParameter.PmolAssignDayPanningDto.ProjectSequenceCode
                    };

                    await connection.ExecuteAsync(sql, param2);
                }

                return param1.Id;
            }
        }
    }

    public async Task<string> VehicleAssignDayPlanning(VPParameter VPParameter)
    {
        var selectPmol = @"SELECT * FROM dbo.OrganizationTeamPmol WHERE OrganizationTeamId = @TeamId";

        var checkteamVehicle =
            @"SELECT Id FROM dbo.OrganizationTeamVehicel WHERE OrganizationTeamId = @TeamId AND CoperateProductCatalogId = @CoperateProductCatalogId";

        IEnumerable<OrganizationTeamPmol> mOrganizationTeamPmol = null;

        using (var connection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
        {
            var team = connection.Query<string>(checkteamVehicle,
                new
                {
                    VPParameter.PmolAssignDayPanningDto.TeamId,
                    VPParameter.PmolAssignDayPanningDto.CoperateProductCatalogId
                }).FirstOrDefault();
            if (team == null)
            {
                mOrganizationTeamPmol = connection
                    .Query<OrganizationTeamPmol>(selectPmol, new { VPParameter.PmolAssignDayPanningDto.TeamId })
                    .ToList();
                var insert =
                    @"INSERT INTO dbo.OrganizationTeamVehicel ( Id ,OrganizationTeamId ,CoperateProductCatalogId ) VALUES ( @Id ,@OrganizationTeamId ,@CoperateProductCatalogId );";

                await connection.ExecuteAsync(insert,
                    new
                    {
                        Id = Guid.NewGuid(), OrganizationTeamId = VPParameter.PmolAssignDayPanningDto.TeamId,
                        VPParameter.PmolAssignDayPanningDto.CoperateProductCatalogId
                    });
            }
        }

        if (mOrganizationTeamPmol != null)
        {
            var insertVehicle =
                @"INSERT INTO dbo.PMolPlannedWorkTools ( Id ,CoperateProductCatalogId,RequiredQuantity,ConsumedQuantity,AllocatedQuantity,CpcBasicUnitofMeasureId,PmolId,Type ) VALUES ( @Id ,@CoperateProductCatalogId,'1','0','1',@CpcBasicUnitofMeasureId,@PmolId,@Type)";
            foreach (var r in mOrganizationTeamPmol)
            {
                var connectionString = ConnectionString.MapConnectionString(r.ContractingUnit,
                    r.Project, VPParameter.TenantProvider);

                var checkVehicel =
                    @"SELECT PMolPlannedWorkTools.Id FROM dbo.PMolPlannedWorkTools WHERE PMolPlannedWorkTools.PmolId = @PmolId AND PMolPlannedWorkTools.CoperateProductCatalogId = @CoperateProductCatalogId AND PMolPlannedWorkTools.IsDeleted = 0";
                var checkCpc = @"SELECT Id FROM dbo.CorporateProductCatalog WHERE Id = @CoperateProductCatalogId";
                var param = new
                {
                    Id = Guid.NewGuid(),
                    VPParameter.PmolAssignDayPanningDto.CoperateProductCatalogId,
                    r.PmolId,
                    CpcBasicUnitofMeasureId = "e8987a57-0bef-4607-8428-f52dc0cabc58",
                    Type = "Planned"
                };

                using (var connection = new SqlConnection(connectionString))
                {
                    var vehicel = connection.Query<string>(checkVehicel, param).FirstOrDefault();
                    var cpc = connection.Query<string>(checkCpc, param).FirstOrDefault();
                    if (vehicel == null)
                    {
                        await connection.ExecuteAsync(insertVehicle, param);
                        if (cpc == null)
                        {
                            var cuconnectionString = ConnectionString.MapConnectionString(r.ContractingUnit,
                                null, VPParameter.TenantProvider);
                            CorporateProductCatalog mCorporateProductCatalog;
                            using (var cuconnection = new SqlConnection(cuconnectionString))
                            {
                                mCorporateProductCatalog = cuconnection
                                    .Query<CorporateProductCatalog>(
                                        "SELECT * FROM dbo.CorporateProductCatalog WHERE Id = @Id",
                                        new { Id = VPParameter.PmolAssignDayPanningDto.CoperateProductCatalogId })
                                    .FirstOrDefault();
                            }

                            if (mCorporateProductCatalog != null)
                            {
                                var copyCpc =
                                    @"INSERT INTO dbo.CorporateProductCatalog ( Id ,ResourceTitle ,ResourceTypeId ,ResourceFamilyId ,CpcBasicUnitOfMeasureId ,CpcMaterialId ,CpcPressureClassId ,InventoryPrice ,CpcUnitOfSizeMeasureId ,Size ,WallThickness ,MinOrderQuantity ,MaxOrderQuantity ,Weight ,Status ,ResourceNumber ,IsDeleted ,CpcBrandId ,Title ) VALUES ( @Id ,@ResourceTitle ,@ResourceTypeId ,@ResourceFamilyId ,@CpcBasicUnitOfMeasureId ,@CpcMaterialId ,@CpcPressureClassId ,@InventoryPrice ,@CpcUnitOfSizeMeasureId ,@Size ,@WallThickness ,@MinOrderQuantity ,@MaxOrderQuantity ,@Weight ,@Status ,@ResourceNumber ,@IsDeleted ,@CpcBrandId ,@Title );";
                                await connection.ExecuteAsync(copyCpc, mCorporateProductCatalog);
                            }
                        }
                    }
                }
            }
        }

        return VPParameter.PmolAssignDayPanningDto.TeamId;
    }

    public async Task<string> ToolAssignDayPlanning(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(
            VPParameter.ToolAssignDayPanningDto.ContractingUinit,
            VPParameter.ToolAssignDayPanningDto.ProjectSequenceCode, VPParameter.TenantProvider);

        var checkTool =
            @"SELECT PMolPlannedWorkTools.Id,PMolPlannedWorkTools.RequiredQuantity,PMolPlannedWorkTools.AllocatedQuantity FROM dbo.PMolPlannedWorkTools WHERE PMolPlannedWorkTools.PmolId = @PmolId AND PMolPlannedWorkTools.CoperateProductCatalogId = @CoperateProductCatalogId AND PMolPlannedWorkTools.IsDeleted = 0";

        using (var connection = new SqlConnection(connectionString))
        {
            var tool = connection.Query<ToolAssignDayPanningDto>(checkTool,
                new
                {
                    PmolId = VPParameter.ToolAssignDayPanningDto.Id,
                    VPParameter.ToolAssignDayPanningDto.CoperateProductCatalogId
                }).FirstOrDefault();

            if (tool == null)
            {
                var insertTool =
                    @"INSERT INTO dbo.PMolPlannedWorkTools ( Id ,CoperateProductCatalogId,RequiredQuantity,ConsumedQuantity,AllocatedQuantity,CpcBasicUnitofMeasureId,PmolId,Type ) VALUES ( @Id ,@CoperateProductCatalogId,'1','0','1',@CpcBasicUnitofMeasureId,@PmolId,@Type)";

                var param = new
                {
                    Id = Guid.NewGuid(),
                    VPParameter.ToolAssignDayPanningDto.CoperateProductCatalogId,
                    PmolId = VPParameter.ToolAssignDayPanningDto.Id,
                    CpcBasicUnitofMeasureId = "e8987a57-0bef-4607-8428-f52dc0cabc58",
                    Type = "Planned",
                    VPParameter.ToolAssignDayPanningDto.AllocatedQuantity,
                    VPParameter.ToolAssignDayPanningDto.RequiredQuantity
                };

                await connection.ExecuteAsync(insertTool, param);
            }

            else
            {
                var updateTool =
                    @"UPDATE dbo.PMolPlannedWorkTools SET AllocatedQuantity = @AllocatedQuantity WHERE Id = @Id;";

                var allocatedQuantity = tool.AllocatedQuantity.ToInt() +
                                        VPParameter.ToolAssignDayPanningDto.AllocatedQuantity.ToInt();

                var param = new
                {
                    tool.Id,
                    AllocatedQuantity = allocatedQuantity.ToString()
                };

                await connection.ExecuteAsync(updateTool, param);
            }

            var checkCpc = @"SELECT Id FROM dbo.CorporateProductCatalog WHERE Id = @CoperateProductCatalogId";

            var cpc = connection
                .Query<string>(checkCpc, new { VPParameter.ToolAssignDayPanningDto.CoperateProductCatalogId })
                .FirstOrDefault();

            if (cpc == null)
            {
                var cuconnectionString = ConnectionString.MapConnectionString(
                    VPParameter.ToolAssignDayPanningDto.ContractingUinit,
                    null, VPParameter.TenantProvider);
                CorporateProductCatalog mCorporateProductCatalog;
                using (var cuconnection = new SqlConnection(cuconnectionString))
                {
                    mCorporateProductCatalog = cuconnection
                        .Query<CorporateProductCatalog>(
                            "SELECT * FROM dbo.CorporateProductCatalog WHERE Id = @Id",
                            new { Id = VPParameter.PmolAssignDayPanningDto.CoperateProductCatalogId })
                        .FirstOrDefault();
                }

                if (mCorporateProductCatalog != null)
                {
                    var copyCpc =
                        @"INSERT INTO dbo.CorporateProductCatalog ( Id ,ResourceTitle ,ResourceTypeId ,ResourceFamilyId ,CpcBasicUnitOfMeasureId ,CpcMaterialId ,CpcPressureClassId ,InventoryPrice ,CpcUnitOfSizeMeasureId ,Size ,WallThickness ,MinOrderQuantity ,MaxOrderQuantity ,Weight ,Status ,ResourceNumber ,IsDeleted ,CpcBrandId ,Title ) VALUES ( @Id ,@ResourceTitle ,@ResourceTypeId ,@ResourceFamilyId ,@CpcBasicUnitOfMeasureId ,@CpcMaterialId ,@CpcPressureClassId ,@InventoryPrice ,@CpcUnitOfSizeMeasureId ,@Size ,@WallThickness ,@MinOrderQuantity ,@MaxOrderQuantity ,@Weight ,@Status ,@ResourceNumber ,@IsDeleted ,@CpcBrandId ,@Title );";
                    await connection.ExecuteAsync(copyCpc, mCorporateProductCatalog);
                }
            }
        }

        return VPParameter.ToolAssignDayPanningDto.CoperateProductCatalogId;
    }

    public async Task<IEnumerable<GetVpPo>> GetBorForVp(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

        await using var connection = new SqlConnection(connectionString);

        await using var dbConnection =
            new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);


        var projectList = dbConnection.Query<ProjectForVpDto>(
            @"SELECT ProjectTime.StartDate,ProjectTime.EndDate,ProjectDefinition.Id,ProjectDefinition.Title,ProjectDefinition.SequenceCode FROM dbo.ProjectDefinition
                                                LEFT OUTER JOIN ProjectTime 
                                                on ProjectTime.ProjectId = ProjectDefinition.Id");


        var results = new List<GetVpPo>();

        var sql = @"SELECT POResources.*
                     ,POHeader.Title AS PoTitle
                     ,POHeader.ProjectSequenceCode As ProjectSequenceCode
                     ,POHeader.SequenceId As PoSequenceId
                     ,POHeader.ExpectedDate
                     ,POHeader.RequestedDate
                     ,POHeader.DeliveryDate
                     ,PbsProduct.ProductId AS ProductSequenceId
                     ,PbsProduct.Title AS ProductTitle
                     ,PORequestType.RequestTypeId AS RequestTypeId
					 ,PORequestType.Name AS RequestTypeName
                    FROM dbo.POResources
                    LEFT OUTER JOIN dbo.POHeader
                      ON POResources.PurchesOrderId = POHeader.Id
                    LEFT OUTER JOIN dbo.Bor
                      ON POResources.BorId = Bor.Id
                    LEFT OUTER JOIN dbo.PbsProduct
                      ON Bor.PbsProductId = PbsProduct.Id
                    LEFT OUTER JOIN dbo.PORequestType
                      ON POHeader.PORequestType = PORequestType.RequestTypeId
                    WHERE PORequestType.LanguageCode = @lang
                      AND POHeader.PORequestType NOT IN ('4010e768-3e06-po02-b337-ee367a82addb','lll82458-0b40-poa3-b0f9-c2e40344clll','f4d6ba08-3937-44ca-a0a1-7cf33c03e290') 
                    AND POHeader.DeliveryDate IS NOT NULL  AND POHeader.POTypeId != '4010e768-3e06-4702-b337-ee367a82addb' ";

        var sb = new StringBuilder(sql);


        if (VPParameter.BorVpFilter.FromDate != null && VPParameter.BorVpFilter.ToDate != null)
            //sb.Append("AND( DeliveryDate BETWEEN '" + VPParameter.Filter.FromDate + "' AND '" + VPParameter.Filter.ToDate + "')");
            // sb.Append("AND((POHeader.DeliveryDate >= '" + VPParameter.BorVpFilter.FromDate + "' AND POHeader.ExpectedDate <= '" +
            //           VPParameter.BorVpFilter.ToDate + "') OR ( POHeader.DeliveryDate >= '" + VPParameter.BorVpFilter.FromDate +
            //           "' AND POHeader.DeliveryDate <= '" + VPParameter.BorVpFilter.ToDate + "'))");
            sb.Append(" AND (( POHeader.DeliveryDate BETWEEN '" + VPParameter.BorVpFilter.FromDate + "' AND '" +
                      VPParameter.BorVpFilter.ToDate + "') OR ( POHeader.ExpectedDate BETWEEN '" +
                      VPParameter.BorVpFilter.FromDate +
                      "' AND '" + VPParameter.BorVpFilter.ToDate + "') OR ( POHeader.DeliveryDate <= '" +
                      VPParameter.BorVpFilter.FromDate +
                      "' AND POHeader.ExpectedDate >= '" + VPParameter.BorVpFilter.ToDate + "')) ");
        else
            sb.Append(
                "AND datepart(mm,POHeader.DeliveryDate) =month(getdate()) AND datepart(yyyy, POHeader.DeliveryDate) = year(getdate())");

        var poResources = connection.Query<POResourcesForVpBor>(sb.ToString(), new { lang = VPParameter.Lang });

        var groupProjects = poResources.GroupBy(x => x.ProjectSequenceCode);

        foreach (var projects in groupProjects)
            if (projects.Key != null)
            {
                var projectConnectionString =
                    ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId, projects.Key,
                        VPParameter.TenantProvider);

                await using var projectConnection = new SqlConnection(projectConnectionString);
                var borList = projectConnection.Query<Bor>("SELECT * FROM Bor");

                var param = new { Id = projects.Key };
                ProjectForVpDto ProjectTime;

                ProjectTime = projectList.FirstOrDefault(x => x.SequenceCode == projects.Key);


                var projectVop = new GetVpPo
                {
                    Id = Guid.NewGuid().ToString(),
                    Title = ProjectTime.Title,
                    StartDate = ProjectTime.StartDate,
                    EndDate = ProjectTime.EndDate,
                    Type = "Project",
                    LinkId = ProjectTime.Id
                };

                results.Add(projectVop);


                foreach (var r in projects.ToList().GroupBy(x => x.BorId))
                    if (r.Key != null)
                    {
                        var borData = borList.FirstOrDefault(x => x.Id == r.Key);
                        var borVop = new GetVpPo();

                        borVop.Id = Guid.NewGuid().ToString();
                        borVop.Title = borData.Title;

                        if (borData.StartDate == null)
                            borVop.StartDate = DateTime.UtcNow;
                        else
                            borVop.StartDate = borData.StartDate;

                        if (borData.EndDate == null)
                            borVop.EndDate = borVop.StartDate.Value.AddDays(7);
                        else
                            borVop.EndDate = borData.EndDate;

                        borVop.Type = "Bor";
                        borVop.LinkId = borData.ItemId;
                        borVop.ParentId = projectVop.Id;
                        borVop.Project = projects.Key;


                        results.Add(borVop);

                        foreach (var p in r.ToList().GroupBy(x => x.PoSequenceId))
                        {
                            var labourTime = new List<GetVpPo>();
                            var toolsTime = new List<GetVpPo>();
                            var materialTime = new List<GetVpPo>();
                            var consumableTime = new List<GetVpPo>();

                            var labourResources = new List<GetVpPo>();
                            var toolsResources = new List<GetVpPo>();
                            var materialResources = new List<GetVpPo>();
                            var consumableResources = new List<GetVpPo>();

                            if (p.Key != null)
                            {
                                // var toolsQuery =
                                //     "SELECT POToolPool.*,c.Title AS RequestedCPCTitle ,d.Title AS AssignedCPCTitle FROM dbo.POToolPool LEFT OUTER JOIN dbo.CorporateProductCatalog c ON POToolPool.RequestedCPCId = c.Id LEFT OUTER JOIN dbo.CorporateProductCatalog d ON POToolPool.AssignedCPCId = d.Id WHERE POId = @Id";
                                // var Teams = await connection.QueryAsync<GetPOLabourTeam>(
                                //     "SELECT * FROM POLabourTeam WHERE POId = @Id", new {Id = p.Key});
                                // var ToolsPool =
                                //     await connection.QueryAsync<GetPOToolPool>(toolsQuery, new {Id = p.Key});
                                //
                                // foreach (var team in Teams)
                                // {
                                //     await using var connection2 =
                                //         new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);
                                //     team.PersonName = connection2
                                //         .Query<string>(
                                //             "SELECT CabPerson.FullName FROM dbo.CabPersonCompany INNER JOIN dbo.CabPerson ON CabPersonCompany.PersonId = CabPerson.Id WHERE CabPersonCompany.Id = @Id",
                                //             new {Id = team.PersonId}).FirstOrDefault();
                                // }
                                IEnumerable<GetPOLabourTeam> Teams = null;
                                IEnumerable<GetPOToolPool> ToolsPool = null;

                                var poVop = new GetVpPo();
                                poVop.Id = Guid.NewGuid().ToString();
                                poVop.Title = p.FirstOrDefault().PoTitle;
                                poVop.Type = "PO";
                                poVop.StartDate = p.FirstOrDefault().DeliveryDate;
                                if (p.FirstOrDefault().ExpectedDate == null)
                                    poVop.EndDate = p.FirstOrDefault().DeliveryDate.Value.AddDays(7);
                                else
                                    poVop.EndDate = p.FirstOrDefault().ExpectedDate;

                                poVop.ParentId = borVop.Id;
                                poVop.LinkId = p.Key;
                                poVop.Project = projects.Key;
                                poVop.PoId = p.Key;
                                poVop.Teams = Teams;
                                poVop.ToolsPool = ToolsPool;
                                poVop.RequestTypeId = p.FirstOrDefault().RequestTypeId;
                                poVop.RequestTypeName = p.FirstOrDefault().RequestTypeName;

                                results.Add(poVop);

                                foreach (var i in p.ToList().GroupBy(x => x.ResourcesType))
                                    if (i.Key != null)
                                    {
                                        if (i.Key == "c46c3a26-39a5-42cc-b07s-89655304eh6")
                                        {
                                            var laburid = Guid.NewGuid().ToString();
                                            var poLabourVop = new GetVpPo();
                                            poLabourVop.Id = laburid;
                                            poLabourVop.Title = "Labours";
                                            poLabourVop.Type = "ResourceType";
                                            poLabourVop.ParentId = poVop.Id;
                                            poLabourVop.Project = projects.Key;
                                            poLabourVop.PoId = p.Key;


                                            foreach (var k in i)
                                            {
                                                var poLabourItemVop = new GetVpPo();
                                                poLabourItemVop.Id = Guid.NewGuid().ToString();
                                                poLabourItemVop.Title = k.CTitle;
                                                poLabourItemVop.Type = "ResourceItem";
                                                poLabourItemVop.ResourceType = "Labour";
                                                var hh = new GetVpPo();
                                                if (k.RequestedDeliveryDate == null)
                                                {
                                                    poLabourItemVop.StartDate = k.DeliveryDate;
                                                    hh.StartDate = k.DeliveryDate;
                                                }
                                                else
                                                {
                                                    poLabourItemVop.StartDate = k.RequestedDeliveryDate;
                                                    hh.StartDate = k.RequestedDeliveryDate;
                                                }

                                                if (k.ExpectedDeliveryDate == null)
                                                {
                                                    poLabourItemVop.EndDate = poVop.EndDate;
                                                    hh.EndDate = poVop.EndDate;
                                                }
                                                else
                                                {
                                                    poLabourItemVop.EndDate = k.ExpectedDeliveryDate;
                                                    hh.EndDate = k.ExpectedDeliveryDate;
                                                }


                                                poLabourItemVop.ParentId = laburid;
                                                poLabourItemVop.LinkId = k.Id;
                                                poLabourItemVop.Project = projects.Key;
                                                poLabourItemVop.BorId = k.BorId;
                                                poLabourItemVop.CCPCId = k.CCPCId;
                                                poLabourItemVop.PoId = p.Key;
                                                poLabourItemVop.Quantity = k.CQuantity;
                                                poLabourItemVop.Teams = Teams;
                                                poLabourItemVop.RequestTypeId = k.RequestTypeId;
                                                poLabourItemVop.RequestTypeName = k.RequestTypeName;


                                                labourTime.Add(hh);
                                                results.Add(poLabourItemVop);
                                            }

                                            poLabourVop.StartDate = labourTime.Min(o => o.StartDate);
                                            poLabourVop.EndDate = labourTime.Max(o => o.EndDate);
                                            poLabourVop.Resources = labourResources;
                                            poLabourVop.Teams = Teams;
                                            poLabourVop.RequestTypeId = i.FirstOrDefault().RequestTypeId;
                                            poLabourVop.RequestTypeName = i.FirstOrDefault().RequestTypeName;
                                            results.Add(poLabourVop);
                                        }

                                        if (i.Key == "c46c3a26-39a5-42cc-m06g-89655304eh6")
                                        {
                                            var consumableid = Guid.NewGuid().ToString();
                                            var poconsumableVop = new GetVpPo();
                                            poconsumableVop.Id = consumableid;
                                            poconsumableVop.Title = "Consumables";
                                            poconsumableVop.Type = "ResourceType";
                                            poconsumableVop.ParentId = poVop.Id;
                                            poconsumableVop.Project = projects.Key;
                                            poconsumableVop.PoId = p.Key;


                                            foreach (var k in i)
                                            {
                                                var poconsumableItemVop = new GetVpPo();
                                                poconsumableItemVop.Id = Guid.NewGuid().ToString();
                                                poconsumableItemVop.Title = k.CTitle;
                                                poconsumableItemVop.Type = "ResourceItem";
                                                poconsumableItemVop.ResourceType = "Consumables";
                                                var hh = new GetVpPo();
                                                if (k.RequestedDeliveryDate == null)
                                                {
                                                    poconsumableItemVop.StartDate = k.DeliveryDate;
                                                    hh.StartDate = k.DeliveryDate;
                                                }
                                                else
                                                {
                                                    poconsumableItemVop.StartDate = k.RequestedDeliveryDate;
                                                    hh.StartDate = k.RequestedDeliveryDate;
                                                }

                                                if (k.ExpectedDeliveryDate == null)
                                                {
                                                    poconsumableItemVop.EndDate = poVop.EndDate;
                                                    hh.EndDate = poVop.EndDate;
                                                }
                                                else
                                                {
                                                    poconsumableItemVop.EndDate = k.ExpectedDeliveryDate;
                                                    hh.EndDate = k.ExpectedDeliveryDate;
                                                }


                                                poconsumableItemVop.ParentId = consumableid;
                                                poconsumableItemVop.LinkId = k.Id;
                                                poconsumableItemVop.Project = projects.Key;
                                                poconsumableItemVop.BorId = k.BorId;
                                                poconsumableItemVop.CCPCId = k.CCPCId;
                                                poconsumableItemVop.PoId = p.Key;
                                                poconsumableItemVop.Quantity = k.CQuantity;
                                                poconsumableItemVop.Teams = Teams;
                                                poconsumableItemVop.RequestTypeId = k.RequestTypeId;
                                                poconsumableItemVop.RequestTypeName = k.RequestTypeName;


                                                consumableTime.Add(hh);
                                                results.Add(poconsumableItemVop);
                                            }

                                            poconsumableVop.StartDate = consumableTime.Min(o => o.StartDate);
                                            poconsumableVop.EndDate = consumableTime.Max(o => o.EndDate);
                                            poconsumableVop.Resources = consumableResources;
                                            poconsumableVop.Teams = Teams;
                                            poconsumableVop.RequestTypeId = i.FirstOrDefault().RequestTypeId;
                                            poconsumableVop.RequestTypeName = i.FirstOrDefault().RequestTypeName;
                                            results.Add(poconsumableVop);
                                        }

                                        if (i.Key == "c46c3a26-39a5-42cc-n7k1-89655304eh6")
                                        {
                                            var materialid = Guid.NewGuid().ToString();
                                            var pomaterialVop = new GetVpPo();
                                            pomaterialVop.Id = materialid;
                                            pomaterialVop.Title = "Materials";
                                            pomaterialVop.Type = "ResourceType";
                                            pomaterialVop.ParentId = poVop.Id;
                                            pomaterialVop.Project = projects.Key;
                                            pomaterialVop.PoId = p.Key;


                                            foreach (var k in i)
                                            {
                                                var poMaterialItemVop = new GetVpPo();
                                                poMaterialItemVop.Id = Guid.NewGuid().ToString();
                                                poMaterialItemVop.Title = k.CTitle;
                                                poMaterialItemVop.Type = "ResourceItem";
                                                poMaterialItemVop.ResourceType = "Materials";
                                                var hh = new GetVpPo();
                                                if (k.RequestedDeliveryDate == null)
                                                {
                                                    poMaterialItemVop.StartDate = k.DeliveryDate;
                                                    hh.StartDate = k.DeliveryDate;
                                                }
                                                else
                                                {
                                                    poMaterialItemVop.StartDate = k.RequestedDeliveryDate;
                                                    hh.StartDate = k.RequestedDeliveryDate;
                                                }

                                                if (k.ExpectedDeliveryDate == null)
                                                {
                                                    poMaterialItemVop.EndDate = poVop.EndDate;
                                                    hh.EndDate = poVop.EndDate;
                                                }
                                                else
                                                {
                                                    poMaterialItemVop.EndDate = k.ExpectedDeliveryDate;
                                                    hh.EndDate = k.ExpectedDeliveryDate;
                                                }


                                                poMaterialItemVop.ParentId = materialid;
                                                poMaterialItemVop.LinkId = k.Id;
                                                poMaterialItemVop.Project = projects.Key;
                                                poMaterialItemVop.BorId = k.BorId;
                                                poMaterialItemVop.CCPCId = k.CCPCId;
                                                poMaterialItemVop.PoId = p.Key;
                                                poMaterialItemVop.Quantity = k.CQuantity;
                                                poMaterialItemVop.Teams = Teams;
                                                poMaterialItemVop.RequestTypeId = k.RequestTypeId;
                                                poMaterialItemVop.RequestTypeName = k.RequestTypeName;


                                                materialTime.Add(hh);
                                                results.Add(poMaterialItemVop);
                                            }

                                            pomaterialVop.StartDate = materialTime.Min(o => o.StartDate);
                                            pomaterialVop.EndDate = materialTime.Max(o => o.EndDate);
                                            pomaterialVop.Resources = materialResources;
                                            pomaterialVop.Teams = Teams;
                                            pomaterialVop.RequestTypeId = i.FirstOrDefault().RequestTypeId;
                                            pomaterialVop.RequestTypeName = i.FirstOrDefault().RequestTypeName;
                                            results.Add(pomaterialVop);
                                        }

                                        if (i.Key == "c46c3a26-39a5-42cc-n9wn-89655304eh6") //tools
                                        {
                                            var toolid = Guid.NewGuid().ToString();
                                            var potoolVop = new GetVpPo();
                                            potoolVop.Id = toolid;
                                            potoolVop.Title = "Tools";
                                            potoolVop.Type = "ResourceType";
                                            potoolVop.ParentId = poVop.Id;
                                            potoolVop.Project = projects.Key;
                                            potoolVop.PoId = p.Key;


                                            foreach (var k in i)
                                            {
                                                var potoolItemVop = new GetVpPo();
                                                potoolItemVop.Id = Guid.NewGuid().ToString();
                                                potoolItemVop.Title = k.CTitle;
                                                potoolItemVop.Type = "ResourceItem";

                                                var hh = new GetVpPo();

                                                if (k.RequestedDeliveryDate == null)
                                                {
                                                    potoolItemVop.StartDate = k.DeliveryDate;
                                                    hh.StartDate = k.DeliveryDate;
                                                }
                                                else
                                                {
                                                    potoolItemVop.StartDate = k.RequestedDeliveryDate;
                                                    hh.StartDate = k.RequestedDeliveryDate;
                                                }

                                                if (k.ExpectedDeliveryDate == null)
                                                {
                                                    potoolItemVop.EndDate = poVop.EndDate;
                                                    hh.EndDate = poVop.EndDate;
                                                }
                                                else
                                                {
                                                    potoolItemVop.EndDate = k.ExpectedDeliveryDate;
                                                    hh.EndDate = k.ExpectedDeliveryDate;
                                                }

                                                potoolItemVop.ResourceType = "Tools";


                                                potoolItemVop.ParentId = toolid;
                                                potoolItemVop.LinkId = k.Id;
                                                potoolItemVop.Project = projects.Key;
                                                potoolItemVop.BorId = k.BorId;
                                                potoolItemVop.CCPCId = k.CCPCId;
                                                potoolItemVop.PoId = p.Key;
                                                potoolItemVop.Quantity = k.CQuantity;
                                                potoolItemVop.Teams = Teams;
                                                potoolItemVop.RequestTypeId = k.RequestTypeId;
                                                potoolItemVop.RequestTypeName = k.RequestTypeName;


                                                toolsTime.Add(hh);
                                                results.Add(potoolItemVop);
                                            }

                                            potoolVop.StartDate = toolsTime.Min(o => o.StartDate);
                                            potoolVop.EndDate = toolsTime.Max(o => o.EndDate);
                                            potoolVop.Resources = toolsResources;
                                            potoolVop.Teams = Teams;
                                            potoolVop.RequestTypeId = i.FirstOrDefault().RequestTypeId;
                                            potoolVop.RequestTypeName = i.FirstOrDefault().RequestTypeName;
                                            results.Add(potoolVop);
                                        }
                                    }
                            }
                        }
                    }
            }

        return results;
    }

    public async Task<IEnumerable<GetVpPo>> GetBorForProjectPlanning(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);
        var cuConnectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            null, VPParameter.TenantProvider);

        await using var connection = new SqlConnection(connectionString);
        await using var cuConnection = new SqlConnection(cuConnectionString);


        var results = new List<GetVpPo>();

        var sql = @"SELECT
                  POResources.*
                 ,POHeader.Title AS PoTitle
                 ,POHeader.ProjectSequenceCode As ProjectSequenceCode
                 ,POHeader.SequenceId As PoSequenceId
                 ,POHeader.ExpectedDate
                 ,POHeader.RequestedDate
                 ,POHeader.POStatusId
                 ,POHeader.DeliveryDate
                 ,PbsProduct.ProductId AS ProductSequenceId
                 ,PbsProduct.Title AS ProductTitle
                 ,PORequestType.RequestTypeId AS RequestTypeId
				 ,PORequestType.Name AS RequestTypeName
                FROM dbo.POResources
                LEFT OUTER JOIN dbo.POHeader
                  ON POResources.PurchesOrderId = POHeader.Id
                LEFT OUTER JOIN dbo.Bor
                  ON POResources.BorId = Bor.Id
                LEFT OUTER JOIN dbo.PbsProduct
                  ON Bor.PbsProductId = PbsProduct.Id
                LEFT OUTER JOIN dbo.PORequestType
                  ON POHeader.PORequestType = PORequestType.RequestTypeId
                WHERE PORequestType.LanguageCode = @lang
                  AND POHeader.PORequestType NOT IN ('4010e768-3e06-po02-b337-ee367a82addb','lll82458-0b40-poa3-b0f9-c2e40344clll','f4d6ba08-3937-44ca-a0a1-7cf33c03e290') 
                    AND POHeader.DeliveryDate IS NOT NULL AND POHeader.POTypeId != '4010e768-3e06-4702-b337-ee367a82addb' ";

        var sb = new StringBuilder(sql);


        if (VPParameter.BorVpFilter.FromDate != null && VPParameter.BorVpFilter.ToDate != null)
            //sb.Append("AND( DeliveryDate BETWEEN '" + VPParameter.Filter.FromDate + "' AND '" + VPParameter.Filter.ToDate + "')");
            // sb.Append("AND((POHeader.DeliveryDate >= '" + VPParameter.BorVpFilter.FromDate + "' AND POHeader.ExpectedDate <= '" +
            //           VPParameter.BorVpFilter.ToDate + "') OR ( POHeader.DeliveryDate >= '" + VPParameter.BorVpFilter.FromDate +
            //           "' AND POHeader.DeliveryDate <= '" + VPParameter.BorVpFilter.ToDate + "'))");
            sb.Append(" AND (( POHeader.DeliveryDate BETWEEN '" + VPParameter.BorVpFilter.FromDate + "' AND '" +
                      VPParameter.BorVpFilter.ToDate + "') OR ( POHeader.ExpectedDate BETWEEN '" +
                      VPParameter.BorVpFilter.FromDate +
                      "' AND '" + VPParameter.BorVpFilter.ToDate + "') OR ( POHeader.DeliveryDate <= '" +
                      VPParameter.BorVpFilter.FromDate +
                      "' AND POHeader.ExpectedDate >= '" + VPParameter.BorVpFilter.ToDate + "')) ");
        
        var poResources = connection.Query<POResourcesForVpBor>(sb.ToString(), new { lang = VPParameter.Lang });

        var groupPbs = poResources.GroupBy(x => x.ProductSequenceId);

        var borResources = connection.Query<BorMaterial>(
            @"SELECT * FROM BorMaterial UNION SELECT * FROM BorConsumable UNION SELECT * FROM BorTools ");

        var productList = connection.Query<PbsProduct>("Select * From PbsProduct");
        var borList = connection.Query<Bor>("SELECT * FROM Bor");


        foreach (var pbs in groupPbs)
            if (pbs.Key != null)
            {
                // var product = connection.Query<PbsProduct>("Select * From PbsProduct Where ProductId = @ProductId ",
                //     new {ProductId = pbs.Key}).FirstOrDefault();
                var product = productList.FirstOrDefault(x => x.ProductId == pbs.Key);


                var pbsVop = new GetVpPo
                {
                    Id = Guid.NewGuid().ToString(),
                    Title = product.Title,
                    StartDate = product.StartDate,
                    EndDate = product.EndDate,
                    Type = "Pbs",
                    LinkId = product.Id,
                    Project = VPParameter.ProjectSequenceId
                };

                results.Add(pbsVop);

                foreach (var r in pbs.ToList().GroupBy(x => x.BorId))
                    if (r.Key != null)
                    {
                        // var borData = connection.Query<Bor>("SELECT * FROM Bor WHERE Id = @Id", new {Id = r.Key})
                        //     .FirstOrDefault();
                        var borData = borList.FirstOrDefault(x => x.Id == r.Key);
                        var borVop = new GetVpPo();

                        borVop.Id = Guid.NewGuid().ToString();
                        borVop.Title = borData.Title;
                        if (borData.StartDate == null)
                            borVop.StartDate = DateTime.UtcNow;
                        else
                            borVop.StartDate = borData.StartDate;

                        if (borData.EndDate == null)
                            borVop.EndDate = borVop.StartDate.Value.AddDays(7);
                        else
                            borVop.EndDate = borData.EndDate;

                        borVop.Type = "Bor";
                        borVop.LinkId = borData.ItemId;
                        borVop.ParentId = pbsVop.Id;
                        borVop.Project = VPParameter.ProjectSequenceId;

                        var approved =
                            connection.Query<string>("SELECT POStatusId FROM POHeader where Id = @Id",
                                new { Id = r.FirstOrDefault().PurchesOrderId }).FirstOrDefault();
                        if (approved == "7bcb4e8d-8e8c-487d-8170-6b91c89fc3da")
                        {
                            borVop.OrderStatus = "2"; //po is Approved 
                        }
                        else
                        {
                            var isSend = cuConnection
                                .Query<string>("SELECT SequenceId FROM POHeader where Id = @Id",
                                    new { Id = r.FirstOrDefault().PurchesOrderId }).Any();

                            borVop.OrderStatus = isSend
                                ? "1"
                                : //po is sended to cu 
                                "0"; //po is not sended to cu 
                        }


                        if (borResources.Count(x => x.Warf == 0 && x.BorProductId == r.Key) == borResources.Count())
                            borVop.IsWarfAvailable = "0"; // warf not available
                        else if (borResources.Count(x => x.Warf == 0 && x.BorProductId == r.Key) == 0)
                            borVop.IsWarfAvailable = "2"; //warf fully available
                        else
                            borVop.IsWarfAvailable = "1"; // warf particialy  available

                        results.Add(borVop);

                        foreach (var p in r.ToList().GroupBy(x => x.PoSequenceId))
                        {
                            var labourTime = new List<GetVpPo>();
                            var toolsTime = new List<GetVpPo>();
                            var materialTime = new List<GetVpPo>();
                            var consumableTime = new List<GetVpPo>();

                            var labourResources = new List<GetVpPo>();
                            var toolsResources = new List<GetVpPo>();
                            var materialResources = new List<GetVpPo>();
                            var consumableResources = new List<GetVpPo>();

                            if (p.Key != null)
                            {
                                // var toolsQuery =
                                //     "SELECT POToolPool.*,c.Title AS RequestedCPCTitle ,d.Title AS AssignedCPCTitle FROM dbo.POToolPool LEFT OUTER JOIN dbo.CorporateProductCatalog c ON POToolPool.RequestedCPCId = c.Id LEFT OUTER JOIN dbo.CorporateProductCatalog d ON POToolPool.AssignedCPCId = d.Id WHERE POId = @Id";
                                // var Teams = await connection.QueryAsync<GetPOLabourTeam>(
                                //     "SELECT * FROM POLabourTeam WHERE POId = @Id", new {Id = p.Key});
                                // var ToolsPool =
                                //     await connection.QueryAsync<GetPOToolPool>(toolsQuery, new {Id = p.Key});
                                //
                                // foreach (var team in Teams)
                                // {
                                //     await using var connection2 =
                                //         new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);
                                //     team.PersonName = connection2
                                //         .Query<string>(
                                //             "SELECT CabPerson.FullName FROM dbo.CabPersonCompany INNER JOIN dbo.CabPerson ON CabPersonCompany.PersonId = CabPerson.Id WHERE CabPersonCompany.Id = @Id",
                                //             new {Id = team.PersonId}).FirstOrDefault();
                                // }
                                IEnumerable<GetPOLabourTeam> Teams = null;
                                IEnumerable<GetPOToolPool> ToolsPool = null;

                                var poVop = new GetVpPo();
                                poVop.Id = Guid.NewGuid().ToString();
                                poVop.Title = p.FirstOrDefault().PoTitle;
                                poVop.Type = "PO";
                                poVop.StartDate = p.FirstOrDefault().DeliveryDate;
                                if (p.FirstOrDefault().ExpectedDate == null)
                                    poVop.EndDate = p.FirstOrDefault().DeliveryDate.Value.AddDays(7);
                                else
                                    poVop.EndDate = p.FirstOrDefault().ExpectedDate;

                                poVop.ParentId = borVop.Id;
                                poVop.LinkId = p.Key;
                                poVop.Project = VPParameter.ProjectSequenceId;
                                poVop.PoId = p.Key;
                                poVop.Teams = Teams;
                                poVop.ToolsPool = ToolsPool;
                                poVop.RequestTypeId = p.FirstOrDefault().RequestTypeId;
                                poVop.RequestTypeName = p.FirstOrDefault().RequestTypeName;

                                results.Add(poVop);

                                foreach (var i in p.ToList().GroupBy(x => x.ResourcesType))
                                    if (i.Key != null)
                                    {
                                        if (i.Key == "c46c3a26-39a5-42cc-b07s-89655304eh6")
                                        {
                                            var laburid = Guid.NewGuid().ToString();
                                            var poLabourVop = new GetVpPo();
                                            poLabourVop.Id = laburid;
                                            poLabourVop.Title = "Labours";
                                            poLabourVop.Type = "ResourceType";
                                            poLabourVop.ParentId = poVop.Id;
                                            poLabourVop.Project = VPParameter.ProjectSequenceId;
                                            poLabourVop.PoId = p.Key;


                                            foreach (var k in i)
                                            {
                                                var poLabourItemVop = new GetVpPo();
                                                poLabourItemVop.Id = Guid.NewGuid().ToString();
                                                poLabourItemVop.Title = k.CTitle;
                                                poLabourItemVop.Type = "ResourceItem";
                                                poLabourItemVop.ResourceType = "Labour";
                                                var hh = new GetVpPo();
                                                if (k.RequestedDeliveryDate == null)
                                                {
                                                    poLabourItemVop.StartDate = k.DeliveryDate;
                                                    hh.StartDate = k.DeliveryDate;
                                                }
                                                else
                                                {
                                                    poLabourItemVop.StartDate = k.RequestedDeliveryDate;
                                                    hh.StartDate = k.RequestedDeliveryDate;
                                                }

                                                if (k.ExpectedDeliveryDate == null)
                                                {
                                                    poLabourItemVop.EndDate = poVop.EndDate;
                                                    hh.EndDate = poVop.EndDate;
                                                }
                                                else
                                                {
                                                    poLabourItemVop.EndDate = k.ExpectedDeliveryDate;
                                                    hh.EndDate = k.ExpectedDeliveryDate;
                                                }


                                                poLabourItemVop.ParentId = laburid;
                                                poLabourItemVop.LinkId = k.Id;
                                                poLabourItemVop.Project = VPParameter.ProjectSequenceId;
                                                poLabourItemVop.BorId = k.BorId;
                                                poLabourItemVop.CCPCId = k.CCPCId;
                                                poLabourItemVop.PoId = p.Key;
                                                poLabourItemVop.Quantity = k.CQuantity;
                                                poLabourItemVop.Teams = Teams;
                                                poLabourItemVop.RequestTypeId = k.RequestTypeId;
                                                poLabourItemVop.RequestTypeName = k.RequestTypeName;
                                                poLabourItemVop.IsStock = k.IsStock;

                                                if (k.POStatusId == "7bcb4e8d-8e8c-487d-8170-6b91c89fc3da")
                                                    poLabourItemVop.IsPoApproved = true;
                                                else
                                                    poLabourItemVop.IsPoApproved = false;

                                                labourTime.Add(hh);
                                                results.Add(poLabourItemVop);
                                            }

                                            poLabourVop.StartDate = labourTime.Min(o => o.StartDate);
                                            poLabourVop.EndDate = labourTime.Max(o => o.EndDate);
                                            poLabourVop.Resources = labourResources;
                                            poLabourVop.Teams = Teams;
                                            poLabourVop.RequestTypeId = i.FirstOrDefault().RequestTypeId;
                                            poLabourVop.RequestTypeName = i.FirstOrDefault().RequestTypeName;
                                            results.Add(poLabourVop);
                                        }

                                        if (i.Key == "c46c3a26-39a5-42cc-m06g-89655304eh6")
                                        {
                                            var consumableid = Guid.NewGuid().ToString();
                                            var poconsumableVop = new GetVpPo();
                                            poconsumableVop.Id = consumableid;
                                            poconsumableVop.Title = "Consumables";
                                            poconsumableVop.Type = "ResourceType";
                                            poconsumableVop.ParentId = poVop.Id;
                                            poconsumableVop.Project = VPParameter.ProjectSequenceId;
                                            poconsumableVop.PoId = p.Key;


                                            foreach (var k in i)
                                            {
                                                var poconsumableItemVop = new GetVpPo();
                                                poconsumableItemVop.Id = Guid.NewGuid().ToString();
                                                poconsumableItemVop.Title = k.CTitle;
                                                poconsumableItemVop.Type = "ResourceItem";
                                                poconsumableItemVop.ResourceType = "Consumables";
                                                var hh = new GetVpPo();
                                                if (k.RequestedDeliveryDate == null)
                                                {
                                                    poconsumableItemVop.StartDate = k.DeliveryDate;
                                                    hh.StartDate = k.DeliveryDate;
                                                }
                                                else
                                                {
                                                    poconsumableItemVop.StartDate = k.RequestedDeliveryDate;
                                                    hh.StartDate = k.RequestedDeliveryDate;
                                                }

                                                if (k.ExpectedDeliveryDate == null)
                                                {
                                                    poconsumableItemVop.EndDate = poVop.EndDate;
                                                    hh.EndDate = poVop.EndDate;
                                                }
                                                else
                                                {
                                                    poconsumableItemVop.EndDate = k.ExpectedDeliveryDate;
                                                    hh.EndDate = k.ExpectedDeliveryDate;
                                                }


                                                poconsumableItemVop.ParentId = consumableid;
                                                poconsumableItemVop.LinkId = k.Id;
                                                poconsumableItemVop.Project = VPParameter.ProjectSequenceId;
                                                poconsumableItemVop.BorId = k.BorId;
                                                poconsumableItemVop.CCPCId = k.CCPCId;
                                                poconsumableItemVop.PoId = p.Key;
                                                poconsumableItemVop.Quantity = k.CQuantity;
                                                poconsumableItemVop.Teams = Teams;
                                                poconsumableItemVop.RequestTypeId = k.RequestTypeId;
                                                poconsumableItemVop.RequestTypeName = k.RequestTypeName;
                                                poconsumableItemVop.IsStock = k.IsStock;

                                                if (k.POStatusId == "7bcb4e8d-8e8c-487d-8170-6b91c89fc3da")
                                                    poconsumableItemVop.IsPoApproved = true;
                                                else
                                                    poconsumableItemVop.IsPoApproved = false;

                                                consumableTime.Add(hh);
                                                results.Add(poconsumableItemVop);
                                            }

                                            poconsumableVop.StartDate = consumableTime.Min(o => o.StartDate);
                                            poconsumableVop.EndDate = consumableTime.Max(o => o.EndDate);
                                            poconsumableVop.Resources = consumableResources;
                                            poconsumableVop.Teams = Teams;
                                            poconsumableVop.RequestTypeId = i.FirstOrDefault().RequestTypeId;
                                            poconsumableVop.RequestTypeName = i.FirstOrDefault().RequestTypeName;
                                            results.Add(poconsumableVop);
                                        }

                                        if (i.Key == "c46c3a26-39a5-42cc-n7k1-89655304eh6")
                                        {
                                            var materialid = Guid.NewGuid().ToString();
                                            var pomaterialVop = new GetVpPo();
                                            pomaterialVop.Id = materialid;
                                            pomaterialVop.Title = "Materials";
                                            pomaterialVop.Type = "ResourceType";
                                            pomaterialVop.ParentId = poVop.Id;
                                            pomaterialVop.Project = VPParameter.ProjectSequenceId;
                                            pomaterialVop.PoId = p.Key;


                                            foreach (var k in i)
                                            {
                                                var poMaterialItemVop = new GetVpPo();
                                                poMaterialItemVop.Id = Guid.NewGuid().ToString();
                                                poMaterialItemVop.Title = k.CTitle;
                                                poMaterialItemVop.Type = "ResourceItem";
                                                poMaterialItemVop.ResourceType = "Materials";
                                                var hh = new GetVpPo();
                                                if (k.RequestedDeliveryDate == null)
                                                {
                                                    poMaterialItemVop.StartDate = k.DeliveryDate;
                                                    hh.StartDate = k.DeliveryDate;
                                                }
                                                else
                                                {
                                                    poMaterialItemVop.StartDate = k.RequestedDeliveryDate;
                                                    hh.StartDate = k.RequestedDeliveryDate;
                                                }

                                                if (k.ExpectedDeliveryDate == null)
                                                {
                                                    poMaterialItemVop.EndDate = poVop.EndDate;
                                                    hh.EndDate = poVop.EndDate;
                                                }
                                                else
                                                {
                                                    poMaterialItemVop.EndDate = k.ExpectedDeliveryDate;
                                                    hh.EndDate = k.ExpectedDeliveryDate;
                                                }


                                                poMaterialItemVop.ParentId = materialid;
                                                poMaterialItemVop.LinkId = k.Id;
                                                poMaterialItemVop.Project = VPParameter.ProjectSequenceId;
                                                poMaterialItemVop.BorId = k.BorId;
                                                poMaterialItemVop.CCPCId = k.CCPCId;
                                                poMaterialItemVop.PoId = p.Key;
                                                poMaterialItemVop.Quantity = k.CQuantity;
                                                poMaterialItemVop.Teams = Teams;
                                                poMaterialItemVop.RequestTypeId = k.RequestTypeId;
                                                poMaterialItemVop.RequestTypeName = k.RequestTypeName;
                                                poMaterialItemVop.IsStock = k.IsStock;

                                                if (k.POStatusId == "7bcb4e8d-8e8c-487d-8170-6b91c89fc3da")
                                                    poMaterialItemVop.IsPoApproved = true;
                                                else
                                                    poMaterialItemVop.IsPoApproved = false;

                                                materialTime.Add(hh);
                                                results.Add(poMaterialItemVop);
                                            }

                                            pomaterialVop.StartDate = materialTime.Min(o => o.StartDate);
                                            pomaterialVop.EndDate = materialTime.Max(o => o.EndDate);
                                            pomaterialVop.Resources = materialResources;
                                            pomaterialVop.Teams = Teams;
                                            pomaterialVop.RequestTypeId = i.FirstOrDefault().RequestTypeId;
                                            pomaterialVop.RequestTypeName = i.FirstOrDefault().RequestTypeName;
                                            results.Add(pomaterialVop);
                                        }

                                        if (i.Key == "c46c3a26-39a5-42cc-n9wn-89655304eh6") //tools
                                        {
                                            var toolid = Guid.NewGuid().ToString();
                                            var potoolVop = new GetVpPo();
                                            potoolVop.Id = toolid;
                                            potoolVop.Title = "Tools";
                                            potoolVop.Type = "ResourceType";
                                            potoolVop.ParentId = poVop.Id;
                                            potoolVop.Project = VPParameter.ProjectSequenceId;
                                            potoolVop.PoId = p.Key;


                                            foreach (var k in i)
                                            {
                                                var potoolItemVop = new GetVpPo();
                                                potoolItemVop.Id = Guid.NewGuid().ToString();
                                                potoolItemVop.Title = k.CTitle;
                                                potoolItemVop.Type = "ResourceItem";
                                                potoolItemVop.ResourceType = "Tools";
                                                var hh = new GetVpPo();
                                                if (k.RequestedDeliveryDate == null)
                                                {
                                                    potoolItemVop.StartDate = k.DeliveryDate;
                                                    hh.StartDate = k.DeliveryDate;
                                                }
                                                else
                                                {
                                                    potoolItemVop.StartDate = k.RequestedDeliveryDate;
                                                    hh.StartDate = k.RequestedDeliveryDate;
                                                }

                                                if (k.ExpectedDeliveryDate == null)
                                                {
                                                    potoolItemVop.EndDate = poVop.EndDate;
                                                    hh.EndDate = poVop.EndDate;
                                                }
                                                else
                                                {
                                                    potoolItemVop.EndDate = k.ExpectedDeliveryDate;
                                                    hh.EndDate = k.ExpectedDeliveryDate;
                                                }

                                                potoolItemVop.ParentId = toolid;
                                                potoolItemVop.LinkId = k.Id;
                                                potoolItemVop.Project = VPParameter.ProjectSequenceId;
                                                potoolItemVop.BorId = k.BorId;
                                                potoolItemVop.CCPCId = k.CCPCId;
                                                potoolItemVop.PoId = p.Key;
                                                potoolItemVop.Quantity = k.CQuantity;
                                                potoolItemVop.Teams = Teams;
                                                potoolItemVop.RequestTypeId = k.RequestTypeId;
                                                potoolItemVop.RequestTypeName = k.RequestTypeName;
                                                potoolItemVop.IsStock = k.IsStock;

                                                if (k.POStatusId == "7bcb4e8d-8e8c-487d-8170-6b91c89fc3da")
                                                    potoolItemVop.IsPoApproved = true;
                                                else
                                                    potoolItemVop.IsPoApproved = false;
                                                toolsTime.Add(hh);
                                                results.Add(potoolItemVop);
                                            }

                                            potoolVop.StartDate = toolsTime.Min(o => o.StartDate);
                                            potoolVop.EndDate = toolsTime.Max(o => o.EndDate);
                                            potoolVop.Resources = toolsResources;
                                            potoolVop.Teams = Teams;
                                            potoolVop.RequestTypeId = i.FirstOrDefault().RequestTypeId;
                                            potoolVop.RequestTypeName = i.FirstOrDefault().RequestTypeName;
                                            results.Add(potoolVop);
                                        }
                                    }
                            }
                        }
                    }
            }

        return results;
    }

    public async Task<IEnumerable<GetVpPo>> GetResourceItemsForVp(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

        await using var dbConnection =
            new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);

        await using var connection = new SqlConnection(connectionString);

        var projectList = dbConnection.Query<ProjectForVpDto>(
            @"SELECT ProjectTime.StartDate,ProjectTime.EndDate,ProjectDefinition.Id,ProjectDefinition.Title,ProjectDefinition.SequenceCode FROM dbo.ProjectDefinition
                                                LEFT OUTER JOIN ProjectTime 
                                                on ProjectTime.ProjectId = ProjectDefinition.Id");


        var results = new List<GetVpPo>();

        var sql = @"SELECT POResources.*
                     ,POHeader.Title AS PoTitle
                     ,POHeader.ProjectSequenceCode As ProjectSequenceCode
                     ,POHeader.SequenceId As PoSequenceId
                     ,POHeader.ExpectedDate
                     ,POHeader.RequestedDate
                     ,POHeader.DeliveryDate
                     ,PbsProduct.ProductId AS ProductSequenceId
                     ,PbsProduct.Title AS ProductTitle
                     ,PORequestType.RequestTypeId AS RequestTypeId
					 ,PORequestType.Name AS RequestTypeName
                    FROM dbo.POResources
                    LEFT OUTER JOIN dbo.POHeader
                      ON POResources.PurchesOrderId = POHeader.Id
                    LEFT OUTER JOIN dbo.Bor
                      ON POResources.BorId = Bor.Id
                    LEFT OUTER JOIN dbo.PbsProduct
                      ON Bor.PbsProductId = PbsProduct.Id
                    LEFT OUTER JOIN dbo.PORequestType
                      ON POHeader.PORequestType = PORequestType.RequestTypeId
                    WHERE PORequestType.LanguageCode = @lang
                      AND POHeader.PORequestType NOT IN ('4010e768-3e06-po02-b337-ee367a82addb','lll82458-0b40-poa3-b0f9-c2e40344clll','f4d6ba08-3937-44ca-a0a1-7cf33c03e290') 
                    AND POHeader.DeliveryDate IS NOT NULL  AND POHeader.POTypeId != '4010e768-3e06-4702-b337-ee367a82addb' ";

        var sb = new StringBuilder(sql);


        if (VPParameter.BorVpFilter.FromDate != null && VPParameter.BorVpFilter.ToDate != null)
            //sb.Append("AND( DeliveryDate BETWEEN '" + VPParameter.Filter.FromDate + "' AND '" + VPParameter.Filter.ToDate + "')");
            // sb.Append("AND((POHeader.DeliveryDate >= '" + VPParameter.BorVpFilter.FromDate + "' AND POHeader.ExpectedDate <= '" +
            //           VPParameter.BorVpFilter.ToDate + "') OR ( POHeader.DeliveryDate >= '" + VPParameter.BorVpFilter.FromDate +
            //           "' AND POHeader.DeliveryDate <= '" + VPParameter.BorVpFilter.ToDate + "'))");
            sb.Append(" AND (( POHeader.DeliveryDate BETWEEN '" + VPParameter.BorVpFilter.FromDate + "' AND '" +
                      VPParameter.BorVpFilter.ToDate + "') OR ( POHeader.ExpectedDate BETWEEN '" +
                      VPParameter.BorVpFilter.FromDate +
                      "' AND '" + VPParameter.BorVpFilter.ToDate + "') OR ( POHeader.DeliveryDate <= '" +
                      VPParameter.BorVpFilter.FromDate +
                      "' AND POHeader.ExpectedDate >= '" + VPParameter.BorVpFilter.ToDate + "')) ");
        else
            sb.Append(
                "AND datepart(mm,POHeader.DeliveryDate) =month(getdate()) AND datepart(yyyy, POHeader.DeliveryDate) = year(getdate())");

        var poResources = connection.Query<POResourcesForVpBor>(sb.ToString(), new { lang = VPParameter.Lang });

        var groupProjects = poResources.GroupBy(x => x.ProjectSequenceCode);

        foreach (var projects in groupProjects)
            if (projects.Key != null)
            {
                var projectConnectionString =
                    ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId, projects.Key,
                        VPParameter.TenantProvider);

                await using var projectConnection = new SqlConnection(projectConnectionString);


                var param = new { Id = projects.Key };
                ProjectForVpDto ProjectTime;

                ProjectTime = projectList.FirstOrDefault(x => x.SequenceCode == projects.Key);


                var projectVop = new GetVpPo
                {
                    Id = Guid.NewGuid().ToString(),
                    Title = ProjectTime.Title,
                    StartDate = ProjectTime.StartDate,
                    EndDate = ProjectTime.EndDate,
                    Type = "Project",
                    LinkId = ProjectTime.Id
                };

                results.Add(projectVop);

                var borList = projectConnection.Query<Bor>("SELECT * FROM Bor");


                foreach (var r in projects.ToList().GroupBy(x => x.BorId))
                    if (r.Key != null)
                    {
                        var borData = borList.FirstOrDefault(x => x.Id == r.Key);

                        var borVop = new GetVpPo();

                        borVop.Id = Guid.NewGuid().ToString();
                        borVop.Title = borData.Title;

                        if (borData.StartDate == null)
                            borVop.StartDate = DateTime.UtcNow;
                        else
                            borVop.StartDate = borData.StartDate;

                        if (borData.EndDate == null)
                            borVop.EndDate = borVop.StartDate.Value.AddDays(7);
                        else
                            borVop.EndDate = borData.EndDate;

                        borVop.Type = "Bor";
                        borVop.LinkId = borData.ItemId;
                        borVop.ParentId = projectVop.Id;
                        borVop.Project = projects.Key;


                        results.Add(borVop);

                        var labourTime = new List<GetVpPo>();
                        var toolsTime = new List<GetVpPo>();
                        var materialTime = new List<GetVpPo>();
                        var consumableTime = new List<GetVpPo>();

                        var labourResources = new List<GetVpPo>();
                        var toolsResources = new List<GetVpPo>();
                        var materialResources = new List<GetVpPo>();
                        var consumableResources = new List<GetVpPo>();

                        var tt = r.ToList().GroupBy(x => x.ResourcesType);
                        foreach (var i in r.ToList().GroupBy(x => x.ResourcesType))
                            if (i.Key != null)
                            {
                                if (i.Key == "c46c3a26-39a5-42cc-b07s-89655304eh6")
                                {
                                    var laburid = Guid.NewGuid().ToString();
                                    var poLabourVop = new GetVpPo();
                                    poLabourVop.Id = laburid;
                                    poLabourVop.Title = "Labours";
                                    poLabourVop.Type = "ResourceType";
                                    poLabourVop.ParentId = borVop.Id;
                                    poLabourVop.Project = projects.Key;


                                    //poLabourVop.PoId = p.Key;
                                    foreach (var k in i.ToList().GroupBy(x => x.CCPCId))
                                    {
                                        var poLabourItemVop = new GetVpPo();
                                        poLabourItemVop.Id = Guid.NewGuid().ToString();
                                        poLabourItemVop.Title = k.FirstOrDefault().CTitle;
                                        poLabourItemVop.Type = "ResourceItem";
                                        poLabourItemVop.ResourceType = "Labour";
                                        var hh = new GetVpPo();


                                        poLabourItemVop.ParentId = laburid;
                                        // poLabourItemVop.LinkId = k.Id;
                                        poLabourItemVop.Project = projects.Key;
                                        poLabourItemVop.BorId = k.FirstOrDefault().BorId;
                                        poLabourItemVop.CCPCId = k.Key;


                                        // poLabourItemVop.PoId = k.PurchesOrderId;
                                        // poLabourItemVop.Quantity = k.CQuantity;
                                        //poLabourItemVop.Teams = Teams;
                                        // poLabourItemVop.RequestTypeId = k.RequestTypeId;
                                        // poLabourItemVop.RequestTypeName = k.RequestTypeName;
                                        labourTime.Add(hh);
                                        results.Add(poLabourItemVop);

                                        foreach (var b in k.ToList().GroupBy(x => x.PoSequenceId))
                                            if (b.Key != null)
                                            {
                                                var poVop = new GetVpPo();
                                                poVop.Id = Guid.NewGuid().ToString();
                                                poVop.Title = b.FirstOrDefault().PoTitle;
                                                poVop.Type = "PO";
                                                poVop.StartDate = b.FirstOrDefault().DeliveryDate;
                                                if (b.FirstOrDefault().ExpectedDate == null)
                                                    poVop.EndDate = b.FirstOrDefault().DeliveryDate.Value
                                                        .AddDays(7);
                                                else
                                                    poVop.EndDate = b.FirstOrDefault().ExpectedDate;

                                                poVop.ParentId = poLabourItemVop.Id;
                                                poVop.LinkId = b.Key;
                                                poVop.Project = projects.Key;
                                                poVop.PoId = b.Key;
                                                //poVop.Teams = Teams;
                                                //poVop.ToolsPool = ToolsPool;
                                                poVop.RequestTypeId = b.FirstOrDefault().RequestTypeId;
                                                poVop.RequestTypeName = b.FirstOrDefault().RequestTypeName;

                                                results.Add(poVop);
                                            }
                                    }

                                    poLabourVop.StartDate = labourTime.Min(o => o.StartDate);
                                    poLabourVop.EndDate = labourTime.Max(o => o.EndDate);
                                    poLabourVop.Resources = labourResources;
                                    //poLabourVop.Teams = Teams;
                                    poLabourVop.RequestTypeId = i.FirstOrDefault().RequestTypeId;
                                    poLabourVop.RequestTypeName = i.FirstOrDefault().RequestTypeName;
                                    results.Add(poLabourVop);
                                }

                                if (i.Key == "c46c3a26-39a5-42cc-m06g-89655304eh6")

                                {
                                    var consumableid = Guid.NewGuid().ToString();
                                    var poconsumableVop = new GetVpPo();
                                    poconsumableVop.Id = consumableid;
                                    poconsumableVop.Title = "Consumables";
                                    poconsumableVop.Type = "ResourceType";
                                    poconsumableVop.ParentId = borVop.Id;
                                    poconsumableVop.Project = projects.Key;


                                    //poconsumableVop.PoId = p.Key;
                                    foreach (var k in i.ToList().GroupBy(x => x.CCPCId))
                                    {
                                        var poconsumableItemVop = new GetVpPo();
                                        poconsumableItemVop.Id = Guid.NewGuid().ToString();
                                        poconsumableItemVop.Title = k.FirstOrDefault().CTitle;
                                        poconsumableItemVop.Type = "ResourceItem";
                                        poconsumableItemVop.ResourceType = "Consumables";
                                        var hh = new GetVpPo();


                                        poconsumableItemVop.ParentId = consumableid;
                                        //poconsumableItemVop.LinkId = k.Id;
                                        poconsumableItemVop.Project = projects.Key;
                                        poconsumableItemVop.BorId = k.FirstOrDefault().BorId;
                                        poconsumableItemVop.CCPCId = k.Key;


                                        // poconsumableItemVop.PoId = p.Key;
                                        // poconsumableItemVop.Quantity = k.CQuantity;
                                        // poconsumableItemVop.Teams = Teams;
                                        // poconsumableItemVop.RequestTypeId = k.RequestTypeId;
                                        // poconsumableItemVop.RequestTypeName = k.RequestTypeName;
                                        consumableTime.Add(hh);
                                        results.Add(poconsumableItemVop);

                                        foreach (var b in k.ToList().GroupBy(x => x.PoSequenceId))
                                            if (b.Key != null)
                                            {
                                                var poVop = new GetVpPo();
                                                poVop.Id = Guid.NewGuid().ToString();
                                                poVop.Title = b.FirstOrDefault().PoTitle;
                                                poVop.Type = "PO";
                                                poVop.StartDate = b.FirstOrDefault().DeliveryDate;
                                                if (b.FirstOrDefault().ExpectedDate == null)
                                                    poVop.EndDate = b.FirstOrDefault().DeliveryDate.Value.AddDays(7);
                                                else
                                                    poVop.EndDate = b.FirstOrDefault().ExpectedDate;

                                                poVop.ParentId = poconsumableItemVop.Id;
                                                poVop.LinkId = b.Key;
                                                poVop.Project = projects.Key;
                                                poVop.PoId = b.Key;
                                                //poVop.Teams = Teams;
                                                //poVop.ToolsPool = ToolsPool;
                                                poVop.RequestTypeId = b.FirstOrDefault().RequestTypeId;
                                                poVop.RequestTypeName = b.FirstOrDefault().RequestTypeName;

                                                results.Add(poVop);
                                            }
                                    }

                                    poconsumableVop.StartDate = consumableTime.Min(o => o.StartDate);
                                    poconsumableVop.EndDate = consumableTime.Max(o => o.EndDate);
                                    poconsumableVop.Resources = consumableResources;
                                    // poconsumableVop.Teams = Teams;
                                    poconsumableVop.RequestTypeId = i.FirstOrDefault().RequestTypeId;
                                    poconsumableVop.RequestTypeName = i.FirstOrDefault().RequestTypeName;
                                    results.Add(poconsumableVop);
                                }

                                if (i.Key == "c46c3a26-39a5-42cc-n7k1-89655304eh6")
                                {
                                    var materialid = Guid.NewGuid().ToString();
                                    var pomaterialVop = new GetVpPo();
                                    pomaterialVop.Id = materialid;
                                    pomaterialVop.Title = "Materials";
                                    pomaterialVop.Type = "ResourceType";
                                    pomaterialVop.ParentId = borVop.Id;
                                    pomaterialVop.Project = projects.Key;


                                    // pomaterialVop.PoId = p.Key;
                                    foreach (var k in i.ToList().GroupBy(x => x.CCPCId))
                                    {
                                        var poMaterialItemVop = new GetVpPo();
                                        poMaterialItemVop.Id = Guid.NewGuid().ToString();
                                        poMaterialItemVop.Title = k.FirstOrDefault().CTitle;
                                        poMaterialItemVop.Type = "ResourceItem";
                                        poMaterialItemVop.ResourceType = "Materials";
                                        var hh = new GetVpPo();


                                        poMaterialItemVop.ParentId = materialid;
                                        //poMaterialItemVop.LinkId = k.Id;
                                        poMaterialItemVop.Project = projects.Key;
                                        poMaterialItemVop.BorId = k.FirstOrDefault().BorId;
                                        poMaterialItemVop.CCPCId = k.Key;


                                        // poMaterialItemVop.PoId = p.Key;
                                        // poMaterialItemVop.Quantity = k.CQuantity;
                                        // poMaterialItemVop.Teams = Teams;
                                        // poMaterialItemVop.RequestTypeId = k.RequestTypeId;
                                        // poMaterialItemVop.RequestTypeName = k.RequestTypeName;
                                        materialTime.Add(hh);
                                        results.Add(poMaterialItemVop);

                                        foreach (var b in k.ToList().GroupBy(x => x.PoSequenceId))
                                            if (b.Key != null)
                                            {
                                                var poVop = new GetVpPo();
                                                poVop.Id = Guid.NewGuid().ToString();
                                                poVop.Title = b.FirstOrDefault().PoTitle;
                                                poVop.Type = "PO";
                                                poVop.StartDate = b.FirstOrDefault().DeliveryDate;
                                                if (b.FirstOrDefault().ExpectedDate == null)
                                                    poVop.EndDate = b.FirstOrDefault().DeliveryDate.Value.AddDays(7);
                                                else
                                                    poVop.EndDate = b.FirstOrDefault().ExpectedDate;

                                                poVop.ParentId = poMaterialItemVop.Id;
                                                poVop.LinkId = b.Key;
                                                poVop.Project = projects.Key;
                                                poVop.PoId = b.Key;
                                                //poVop.Teams = Teams;
                                                //poVop.ToolsPool = ToolsPool;
                                                poVop.RequestTypeId = b.FirstOrDefault().RequestTypeId;
                                                poVop.RequestTypeName = b.FirstOrDefault().RequestTypeName;

                                                results.Add(poVop);
                                            }
                                    }

                                    pomaterialVop.StartDate = materialTime.Min(o => o.StartDate);
                                    pomaterialVop.EndDate = materialTime.Max(o => o.EndDate);
                                    pomaterialVop.Resources = materialResources;
                                    // pomaterialVop.Teams = Teams;
                                    pomaterialVop.RequestTypeId = i.FirstOrDefault().RequestTypeId;
                                    pomaterialVop.RequestTypeName = i.FirstOrDefault().RequestTypeName;
                                    results.Add(pomaterialVop);
                                }

                                if (i.Key == "c46c3a26-39a5-42cc-n9wn-89655304eh6") //tools
                                {
                                    var toolid = Guid.NewGuid().ToString();
                                    var potoolVop = new GetVpPo();
                                    potoolVop.Id = toolid;
                                    potoolVop.Title = "Tools";
                                    potoolVop.Type = "ResourceType";
                                    potoolVop.ParentId = borVop.Id;
                                    potoolVop.Project = projects.Key;


                                    //potoolVop.PoId = p.Key;
                                    foreach (var k in i.ToList().GroupBy(x => x.CCPCId))
                                    {
                                        var potoolItemVop = new GetVpPo();
                                        potoolItemVop.Id = Guid.NewGuid().ToString();
                                        potoolItemVop.Title = k.FirstOrDefault().CTitle;
                                        potoolItemVop.Type = "ResourceItem";

                                        var hh = new GetVpPo();


                                        potoolItemVop.ResourceType = "Tools";


                                        potoolItemVop.ParentId = toolid;
                                        // potoolItemVop.LinkId = k.Id;
                                        potoolItemVop.Project = projects.Key;
                                        potoolItemVop.BorId = k.FirstOrDefault().BorId;
                                        potoolItemVop.CCPCId = k.Key;


                                        // potoolItemVop.PoId = p.Key;
                                        // potoolItemVop.Quantity = k.CQuantity;
                                        // potoolItemVop.Teams = Teams;
                                        // potoolItemVop.RequestTypeId = k.RequestTypeId;
                                        // potoolItemVop.RequestTypeName = k.RequestTypeName;
                                        toolsTime.Add(hh);
                                        results.Add(potoolItemVop);

                                        foreach (var b in k.ToList().GroupBy(x => x.PoSequenceId))
                                            if (b.Key != null)
                                            {
                                                var poVop = new GetVpPo();
                                                poVop.Id = Guid.NewGuid().ToString();
                                                poVop.Title = b.FirstOrDefault().PoTitle;
                                                poVop.Type = "PO";
                                                poVop.StartDate = b.FirstOrDefault().DeliveryDate;
                                                if (b.FirstOrDefault().ExpectedDate == null)
                                                    poVop.EndDate = b.FirstOrDefault().DeliveryDate.Value.AddDays(7);
                                                else
                                                    poVop.EndDate = b.FirstOrDefault().ExpectedDate;

                                                poVop.ParentId = potoolItemVop.Id;
                                                poVop.LinkId = b.Key;
                                                poVop.Project = projects.Key;
                                                poVop.PoId = b.Key;
                                                //poVop.Teams = Teams;
                                                //poVop.ToolsPool = ToolsPool;
                                                poVop.RequestTypeId = b.FirstOrDefault().RequestTypeId;
                                                poVop.RequestTypeName = b.FirstOrDefault().RequestTypeName;

                                                results.Add(poVop);
                                            }
                                    }

                                    potoolVop.StartDate = toolsTime.Min(o => o.StartDate);
                                    potoolVop.EndDate = toolsTime.Max(o => o.EndDate);
                                    potoolVop.Resources = toolsResources;
                                    // potoolVop.Teams = Teams;
                                    potoolVop.RequestTypeId = i.FirstOrDefault().RequestTypeId;
                                    potoolVop.RequestTypeName = i.FirstOrDefault().RequestTypeName;
                                    results.Add(potoolVop);
                                }
                            }
                    }
            }

        return results;
    }

    public async Task<IEnumerable<GetVpPo>> GetPoForProjectPlanning(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

        await using var connection = new SqlConnection(connectionString);


        var results = new List<GetVpPo>();

        var sql = @"SELECT
                  POResources.*
                 ,POHeader.Title AS PoTitle
                 ,POHeader.ProjectSequenceCode As ProjectSequenceCode
                 ,POHeader.SequenceId As PoSequenceId
                 ,POHeader.ExpectedDate
                 ,POHeader.RequestedDate
                 ,POHeader.DeliveryDate
                 ,PbsProduct.ProductId AS ProductSequenceId
                 ,PbsProduct.Title AS ProductTitle
                 ,PORequestType.RequestTypeId AS RequestTypeId
				 ,PORequestType.Name AS RequestTypeName
                FROM dbo.POResources
                LEFT OUTER JOIN dbo.POHeader
                  ON POResources.PurchesOrderId = POHeader.Id
                LEFT OUTER JOIN dbo.Bor
                  ON POResources.BorId = Bor.Id
                LEFT OUTER JOIN dbo.PbsProduct
                  ON Bor.PbsProductId = PbsProduct.Id
                LEFT OUTER JOIN dbo.PORequestType
                  ON POHeader.PORequestType = PORequestType.RequestTypeId
                WHERE PORequestType.LanguageCode = @lang
                  AND POHeader.PORequestType NOT IN ('4010e768-3e06-po02-b337-ee367a82addb','lll82458-0b40-poa3-b0f9-c2e40344clll','f4d6ba08-3937-44ca-a0a1-7cf33c03e290') 
                    AND POHeader.DeliveryDate IS NOT NULL AND POHeader.POTypeId != '4010e768-3e06-4702-b337-ee367a82addb' ";

        var sb = new StringBuilder(sql);


        if (VPParameter.BorVpFilter.FromDate != null && VPParameter.BorVpFilter.ToDate != null)
            //sb.Append("AND( DeliveryDate BETWEEN '" + VPParameter.Filter.FromDate + "' AND '" + VPParameter.Filter.ToDate + "')");
            // sb.Append("AND((POHeader.DeliveryDate >= '" + VPParameter.BorVpFilter.FromDate + "' AND POHeader.ExpectedDate <= '" +
            //           VPParameter.BorVpFilter.ToDate + "') OR ( POHeader.DeliveryDate >= '" + VPParameter.BorVpFilter.FromDate +
            //           "' AND POHeader.DeliveryDate <= '" + VPParameter.BorVpFilter.ToDate + "'))");
            sb.Append(" AND (( POHeader.DeliveryDate BETWEEN '" + VPParameter.BorVpFilter.FromDate + "' AND '" +
                      VPParameter.BorVpFilter.ToDate + "') OR ( POHeader.ExpectedDate BETWEEN '" +
                      VPParameter.BorVpFilter.FromDate +
                      "' AND '" + VPParameter.BorVpFilter.ToDate + "') OR ( POHeader.DeliveryDate <= '" +
                      VPParameter.BorVpFilter.FromDate +
                      "' AND POHeader.ExpectedDate >= '" + VPParameter.BorVpFilter.ToDate + "')) ");
        else
            sb.Append(
                " AND datepart(mm,POHeader.DeliveryDate) =month(getdate()) AND datepart(yyyy, POHeader.DeliveryDate) = year(getdate())");

        var poResources = connection.Query<POResourcesForVpBor>(sql, new { lang = VPParameter.Lang });

        var groupPo = poResources.GroupBy(x => x.PoSequenceId);

        var borList = connection.Query<Bor>("SELECT * FROM Bor");

        foreach (var po in groupPo)
            if (po.Key != null)
            {
                // var toolsQuery =
                //                      "SELECT POToolPool.*,c.Title AS RequestedCPCTitle ,d.Title AS AssignedCPCTitle FROM dbo.POToolPool LEFT OUTER JOIN dbo.CorporateProductCatalog c ON POToolPool.RequestedCPCId = c.Id LEFT OUTER JOIN dbo.CorporateProductCatalog d ON POToolPool.AssignedCPCId = d.Id WHERE POId = @Id";
                //                  var Teams = await connection.QueryAsync<GetPOLabourTeam>(
                //                      "SELECT * FROM POLabourTeam WHERE POId = @Id", new {Id = po.Key});
                //                  var ToolsPool =
                //                      await connection.QueryAsync<GetPOToolPool>(toolsQuery, new {Id = po.Key});
                //
                //                  foreach (var team in Teams)
                //                  {
                //                      await using var connection2 =
                //                          new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);
                //                      team.PersonName = connection2
                //                          .Query<string>(
                //                              "SELECT CabPerson.FullName FROM dbo.CabPersonCompany INNER JOIN dbo.CabPerson ON CabPersonCompany.PersonId = CabPerson.Id WHERE CabPersonCompany.Id = @Id",
                //                              new {Id = team.PersonId}).FirstOrDefault();
                //                  }
                IEnumerable<GetPOLabourTeam> Teams = null;
                IEnumerable<GetPOToolPool> ToolsPool = null;

                var poVop = new GetVpPo();
                poVop.Id = Guid.NewGuid().ToString();
                poVop.Title = po.FirstOrDefault().PoTitle;
                poVop.Type = "PO";
                poVop.StartDate = po.FirstOrDefault().DeliveryDate;
                if (po.FirstOrDefault().ExpectedDate == null)
                    poVop.EndDate = po.FirstOrDefault().DeliveryDate.Value.AddDays(7);
                else
                    poVop.EndDate = po.FirstOrDefault().ExpectedDate;

                poVop.ParentId = null;
                poVop.LinkId = po.Key;
                poVop.Project = VPParameter.ProjectSequenceId;
                poVop.PoId = po.Key;
                poVop.Teams = Teams;
                poVop.ToolsPool = ToolsPool;
                poVop.RequestTypeId = po.FirstOrDefault().RequestTypeId;
                poVop.RequestTypeName = po.FirstOrDefault().RequestTypeName;

                results.Add(poVop);

                foreach (var r in po.ToList().GroupBy(x => x.BorId))
                {
                    var labourTime = new List<GetVpPo>();
                    var toolsTime = new List<GetVpPo>();
                    var materialTime = new List<GetVpPo>();
                    var consumableTime = new List<GetVpPo>();

                    var labourResources = new List<GetVpPo>();
                    var toolsResources = new List<GetVpPo>();
                    var materialResources = new List<GetVpPo>();
                    var consumableResources = new List<GetVpPo>();
                    if (r.Key != null)
                    {
                        var borData = borList.FirstOrDefault(x => x.Id == r.Key);
                        var borVop = new GetVpPo();

                        borVop.Id = Guid.NewGuid().ToString();
                        borVop.Title = borData.Title;
                        if (borData.StartDate == null)
                            borVop.StartDate = DateTime.UtcNow;
                        else
                            borVop.StartDate = borData.StartDate;

                        if (borData.EndDate == null)
                            borVop.EndDate = borVop.StartDate.Value.AddDays(7);
                        else
                            borVop.EndDate = borData.EndDate;

                        borVop.Type = "Bor";
                        borVop.LinkId = borData.ItemId;
                        borVop.ParentId = poVop.Id;
                        borVop.Project = VPParameter.ProjectSequenceId;


                        results.Add(borVop);

                        foreach (var i in r.ToList().GroupBy(x => x.ResourcesType))
                            if (i.Key != null)
                            {
                                if (i.Key == "c46c3a26-39a5-42cc-b07s-89655304eh6")
                                {
                                    var laburid = Guid.NewGuid().ToString();
                                    var poLabourVop = new GetVpPo();
                                    poLabourVop.Id = laburid;
                                    poLabourVop.Title = "Labours";
                                    poLabourVop.Type = "ResourceType";
                                    poLabourVop.ParentId = borVop.Id;
                                    poLabourVop.Project = VPParameter.ProjectSequenceId;
                                    poLabourVop.PoId = po.Key;


                                    foreach (var k in i)
                                    {
                                        var poLabourItemVop = new GetVpPo();
                                        poLabourItemVop.Id = Guid.NewGuid().ToString();
                                        poLabourItemVop.Title = k.CTitle;
                                        poLabourItemVop.Type = "ResourceItem";
                                        poLabourItemVop.ResourceType = "Labour";
                                        var hh = new GetVpPo();
                                        if (k.RequestedDeliveryDate == null)
                                        {
                                            poLabourItemVop.StartDate = k.DeliveryDate;
                                            hh.StartDate = k.DeliveryDate;
                                        }
                                        else
                                        {
                                            poLabourItemVop.StartDate = k.RequestedDeliveryDate;
                                            hh.StartDate = k.RequestedDeliveryDate;
                                        }

                                        if (k.ExpectedDeliveryDate == null)
                                        {
                                            poLabourItemVop.EndDate = poVop.EndDate;
                                            hh.EndDate = poVop.EndDate;
                                        }
                                        else
                                        {
                                            poLabourItemVop.EndDate = k.ExpectedDeliveryDate;
                                            hh.EndDate = k.ExpectedDeliveryDate;
                                        }


                                        poLabourItemVop.ParentId = laburid;
                                        poLabourItemVop.LinkId = k.Id;
                                        poLabourItemVop.Project = VPParameter.ProjectSequenceId;
                                        poLabourItemVop.BorId = k.BorId;
                                        poLabourItemVop.CCPCId = k.CCPCId;
                                        poLabourItemVop.PoId = po.Key;
                                        poLabourItemVop.Quantity = k.CQuantity;
                                        poLabourItemVop.Teams = Teams;
                                        poLabourItemVop.RequestTypeId = k.RequestTypeId;
                                        poLabourItemVop.RequestTypeName = k.RequestTypeName;


                                        labourTime.Add(hh);
                                        results.Add(poLabourItemVop);
                                    }

                                    poLabourVop.StartDate = labourTime.Min(o => o.StartDate);
                                    poLabourVop.EndDate = labourTime.Max(o => o.EndDate);
                                    poLabourVop.Resources = labourResources;
                                    poLabourVop.Teams = Teams;
                                    poLabourVop.RequestTypeId = i.FirstOrDefault().RequestTypeId;
                                    poLabourVop.RequestTypeName = i.FirstOrDefault().RequestTypeName;
                                    results.Add(poLabourVop);
                                }

                                if (i.Key == "c46c3a26-39a5-42cc-m06g-89655304eh6")
                                {
                                    var consumableid = Guid.NewGuid().ToString();
                                    var poconsumableVop = new GetVpPo();
                                    poconsumableVop.Id = consumableid;
                                    poconsumableVop.Title = "Consumables";
                                    poconsumableVop.Type = "ResourceType";
                                    poconsumableVop.ParentId = borVop.Id;
                                    poconsumableVop.Project = VPParameter.ProjectSequenceId;
                                    poconsumableVop.PoId = po.Key;


                                    foreach (var k in i)
                                    {
                                        var poconsumableItemVop = new GetVpPo();
                                        poconsumableItemVop.Id = Guid.NewGuid().ToString();
                                        poconsumableItemVop.Title = k.CTitle;
                                        poconsumableItemVop.Type = "ResourceItem";
                                        poconsumableItemVop.ResourceType = "Consumables";
                                        var hh = new GetVpPo();
                                        if (k.RequestedDeliveryDate == null)
                                        {
                                            poconsumableItemVop.StartDate = k.DeliveryDate;
                                            hh.StartDate = k.DeliveryDate;
                                        }
                                        else
                                        {
                                            poconsumableItemVop.StartDate = k.RequestedDeliveryDate;
                                            hh.StartDate = k.RequestedDeliveryDate;
                                        }

                                        if (k.ExpectedDeliveryDate == null)
                                        {
                                            poconsumableItemVop.EndDate = poVop.EndDate;
                                            hh.EndDate = poVop.EndDate;
                                        }
                                        else
                                        {
                                            poconsumableItemVop.EndDate = k.ExpectedDeliveryDate;
                                            hh.EndDate = k.ExpectedDeliveryDate;
                                        }


                                        poconsumableItemVop.ParentId = consumableid;
                                        poconsumableItemVop.LinkId = k.Id;
                                        poconsumableItemVop.Project = VPParameter.ProjectSequenceId;
                                        poconsumableItemVop.BorId = k.BorId;
                                        poconsumableItemVop.CCPCId = k.CCPCId;
                                        poconsumableItemVop.PoId = po.Key;
                                        poconsumableItemVop.Quantity = k.CQuantity;
                                        poconsumableItemVop.Teams = Teams;
                                        poconsumableItemVop.RequestTypeId = k.RequestTypeId;
                                        poconsumableItemVop.RequestTypeName = k.RequestTypeName;


                                        consumableTime.Add(hh);
                                        results.Add(poconsumableItemVop);
                                    }

                                    poconsumableVop.StartDate = consumableTime.Min(o => o.StartDate);
                                    poconsumableVop.EndDate = consumableTime.Max(o => o.EndDate);
                                    poconsumableVop.Resources = consumableResources;
                                    poconsumableVop.Teams = Teams;
                                    poconsumableVop.RequestTypeId = i.FirstOrDefault().RequestTypeId;
                                    poconsumableVop.RequestTypeName = i.FirstOrDefault().RequestTypeName;
                                    results.Add(poconsumableVop);
                                }

                                if (i.Key == "c46c3a26-39a5-42cc-n7k1-89655304eh6")
                                {
                                    var materialid = Guid.NewGuid().ToString();
                                    var pomaterialVop = new GetVpPo();
                                    pomaterialVop.Id = materialid;
                                    pomaterialVop.Title = "Materials";
                                    pomaterialVop.Type = "ResourceType";
                                    pomaterialVop.ParentId = borVop.Id;
                                    pomaterialVop.Project = VPParameter.ProjectSequenceId;
                                    pomaterialVop.PoId = po.Key;


                                    foreach (var k in i)
                                    {
                                        var poMaterialItemVop = new GetVpPo();
                                        poMaterialItemVop.Id = Guid.NewGuid().ToString();
                                        poMaterialItemVop.Title = k.CTitle;
                                        poMaterialItemVop.Type = "ResourceItem";
                                        poMaterialItemVop.ResourceType = "Materials";
                                        var hh = new GetVpPo();
                                        if (k.RequestedDeliveryDate == null)
                                        {
                                            poMaterialItemVop.StartDate = k.DeliveryDate;
                                            hh.StartDate = k.DeliveryDate;
                                        }
                                        else
                                        {
                                            poMaterialItemVop.StartDate = k.RequestedDeliveryDate;
                                            hh.StartDate = k.RequestedDeliveryDate;
                                        }

                                        if (k.ExpectedDeliveryDate == null)
                                        {
                                            poMaterialItemVop.EndDate = poVop.EndDate;
                                            hh.EndDate = poVop.EndDate;
                                        }
                                        else
                                        {
                                            poMaterialItemVop.EndDate = k.ExpectedDeliveryDate;
                                            hh.EndDate = k.ExpectedDeliveryDate;
                                        }


                                        poMaterialItemVop.ParentId = materialid;
                                        poMaterialItemVop.LinkId = k.Id;
                                        poMaterialItemVop.Project = VPParameter.ProjectSequenceId;
                                        poMaterialItemVop.BorId = k.BorId;
                                        poMaterialItemVop.CCPCId = k.CCPCId;
                                        poMaterialItemVop.PoId = po.Key;
                                        poMaterialItemVop.Quantity = k.CQuantity;
                                        poMaterialItemVop.Teams = Teams;
                                        poMaterialItemVop.RequestTypeId = k.RequestTypeId;
                                        poMaterialItemVop.RequestTypeName = k.RequestTypeName;


                                        materialTime.Add(hh);
                                        results.Add(poMaterialItemVop);
                                    }

                                    pomaterialVop.StartDate = materialTime.Min(o => o.StartDate);
                                    pomaterialVop.EndDate = materialTime.Max(o => o.EndDate);
                                    pomaterialVop.Resources = materialResources;
                                    pomaterialVop.Teams = Teams;
                                    pomaterialVop.RequestTypeId = i.FirstOrDefault().RequestTypeId;
                                    pomaterialVop.RequestTypeName = i.FirstOrDefault().RequestTypeName;
                                    results.Add(pomaterialVop);
                                }

                                if (i.Key == "c46c3a26-39a5-42cc-n9wn-89655304eh6") //tools
                                {
                                    var toolid = Guid.NewGuid().ToString();
                                    var potoolVop = new GetVpPo();
                                    potoolVop.Id = toolid;
                                    potoolVop.Title = "Tools";
                                    potoolVop.Type = "ResourceType";
                                    potoolVop.ParentId = borVop.Id;
                                    potoolVop.Project = VPParameter.ProjectSequenceId;
                                    potoolVop.PoId = po.Key;


                                    foreach (var k in i)
                                    {
                                        var potoolItemVop = new GetVpPo();
                                        potoolItemVop.Id = Guid.NewGuid().ToString();
                                        potoolItemVop.Title = k.CTitle;
                                        potoolItemVop.Type = "ResourceItem";
                                        potoolItemVop.ResourceType = "Tools";
                                        var hh = new GetVpPo();
                                        if (k.RequestedDeliveryDate == null)
                                        {
                                            potoolItemVop.StartDate = k.DeliveryDate;
                                            hh.StartDate = k.DeliveryDate;
                                        }
                                        else
                                        {
                                            potoolItemVop.StartDate = k.RequestedDeliveryDate;
                                            hh.StartDate = k.RequestedDeliveryDate;
                                        }

                                        if (k.ExpectedDeliveryDate == null)
                                        {
                                            potoolItemVop.EndDate = poVop.EndDate;
                                            hh.EndDate = poVop.EndDate;
                                        }
                                        else
                                        {
                                            potoolItemVop.EndDate = k.ExpectedDeliveryDate;
                                            hh.EndDate = k.ExpectedDeliveryDate;
                                        }


                                        potoolItemVop.ParentId = toolid;
                                        potoolItemVop.LinkId = k.Id;
                                        potoolItemVop.Project = VPParameter.ProjectSequenceId;
                                        potoolItemVop.BorId = k.BorId;
                                        potoolItemVop.CCPCId = k.CCPCId;
                                        potoolItemVop.PoId = po.Key;
                                        potoolItemVop.Quantity = k.CQuantity;
                                        potoolItemVop.Teams = Teams;
                                        potoolItemVop.RequestTypeId = k.RequestTypeId;
                                        potoolItemVop.RequestTypeName = k.RequestTypeName;


                                        toolsTime.Add(hh);
                                        results.Add(potoolItemVop);
                                    }

                                    potoolVop.StartDate = toolsTime.Min(o => o.StartDate);
                                    potoolVop.EndDate = toolsTime.Max(o => o.EndDate);
                                    potoolVop.Resources = toolsResources;
                                    potoolVop.Teams = Teams;
                                    potoolVop.RequestTypeId = i.FirstOrDefault().RequestTypeId;
                                    potoolVop.RequestTypeName = i.FirstOrDefault().RequestTypeName;
                                    results.Add(potoolVop);
                                }
                            }
                    }
                }
            }

        return results;
    }

    public async Task<string> TeamAssignForDayPlanning(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(
            VPParameter.PmolAssignDayPanningDto.ContractingUnit,
            VPParameter.PmolAssignDayPanningDto.ProjectSequenceCode, VPParameter.TenantProvider);

        await using var connection = new SqlConnection(connectionString);

        if (VPParameter.AssignPmolTeam.PmolId != null)
        {
            var cpc = connection.Query<CorporateProductCatalog>("Select * From CorporateProductCatalog ")
                .FirstOrDefault();
            var update = "UPDATE dbo.PMolPlannedWorkLabour SET IsDeleted = 1 WHERE PmolId = @PmolId";
            await connection.ExecuteAsync(update, new { VPParameter.AssignPmolTeam.PmolId });

            const string sql =
                "INSERT INTO dbo.PMolPlannedWorkLabour ( Id ,CoperateProductCatalogId ,RequiredQuantity ,ConsumedQuantity ,CpcBasicUnitofMeasureId ,PmolId ,Type ,IsDeleted ) VALUES ( @Id ,@CoperateProductCatalogId ,0.0 ,0.0 ,@CpcBasicUnitofMeasureId ,@PmolId ,@Type ,0 )";

            var param = new
            {
                Id = Guid.NewGuid().ToString(),
                CoperateProductCatalogId = cpc.Id,
                CpcBasicUnitofMeasureId = cpc.CpcBasicUnitOfMeasureId,
                VPParameter.AssignPmolTeam.PmolId,
                Type = "Planned"
            };

            await connection.ExecuteAsync(sql, param);

            foreach (var teams in VPParameter.AssignPmolTeam.PmolTeamMember)
            {
                const string teamSql =
                    "INSERT INTO dbo.PmolTeamRole ( Id ,CabPersonId ,RoleId ,RequiredQuantity ,ConsumedQuantity ,Type ,PmolLabourId ,IsDeleted ) VALUES ( @Id ,@CabPersonId ,@RoleId ,0.0 ,0.0 ,@Type ,@PmolLabourId ,0 )";

                var teamParam = new
                {
                    Id = Guid.NewGuid().ToString(),
                    CabPersonId = teams.Id,
                    RoleId = "5e622d-4783-95e6-4092004eb5e-aff848e",
                    Type = "Planned",
                    PmolLabourId = param.Id
                };

                await connection.ExecuteAsync(teamSql, teamParam);
            }
        }

        return VPParameter.AssignPmolTeam.PmolId;
    }

    public async Task<List<PmolShortcutpaneDataDto>> VpShortcutPaneData(VPParameter VPParameter)
    {
        //var data = new List<PmolShortcutpaneDataDto>();

        var pr = new List<PmolShortcutpaneDataDto>
        {
            // new PmolShortcutpaneDataDto
            // {
            //     Id = "01",
            //     Name = "all",
            //     Type = "1",
            //     Value = 01
            // },
            new()
            {
                Id = "94282458-0b40-poa3-b0f9-c2e40344c8f1",
                Name = "purchaseRequest",
                Type = "1",
                Value = 02
            },
            new()
            {
                Id = "343482458-0spr-poa3-b0f9-c2e40344clll",
                Name = "purchaseOrder",
                Type = "1",
                Value = 05
            },
            new()
            {
                Id = "4010e768-3e06-po02-b337-ee367a82addb",
                Name = "returnRequest",
                Type = "1",
                Value = 03
            },
            new()
            {
                Id = "lll82458-0b40-poa3-b0f9-c2e40344clll",
                Name = "capacityRequest",
                Type = "1",
                Value = 04
            },


            new()
            {
                Id = "07",
                Name = "bor",
                Type = "2",
                Value = 07
            },
            new()
            {
                Id = "08",
                Name = "purchaseRequest",
                Type = "2",
                Value = 08
            },
            new()
            {
                Id = "09",
                Name = "bor",
                Type = "2",
                Value = 09
            }
        };

        //data.AddRange(pr);

        return pr;
    }

    public async Task<IEnumerable<AvailableLWorkers>> AvailableTeamsDayPlanning(VPParameter VPParameter)
    {
        var availableLWorkers = new List<AvailableLWorkers>();

        var endDate = VPParameter.GetTeamDto.EndDate;

        var startDate = VPParameter.GetTeamDto.StartDate;

        using (var connection =
               new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
        {
            if (VPParameter.GetTeamDto.BuId != null)
            {
                var projectSelect =
                    @"SELECT ProjectDefinition.Title ,ProjectDefinition.ProjectConnectionString ,ProjectDefinition.SequenceCode ,CabCompany.SequenceCode AS ContractingUnitId FROM dbo.ProjectDefinition LEFT OUTER JOIN dbo.CabCompany ON ProjectDefinition.ContractingUnitId = CabCompany.Id LEFT OUTER JOIN dbo.ProjectClassification ON ProjectDefinition.Id = ProjectClassification.ProjectId WHERE ProjectClassification.ProjectClassificationBuisnessUnit = @BuId AND ProjectDefinition.IsDeleted = 0 ORDER BY ProjectDefinition.SequenceCode";

                var mProjectDefinition = connection
                    .Query<ProjectDefinition>(projectSelect, new { BuID = VPParameter.GetTeamDto.BuId })
                    .ToList();

                var cabquery = @"SELECT DISTINCT
                                          VpHR.PersonId AS CabPersonCompanyId
                                         ,VpHR.ProjectSequenceCode
                                         ,CabPersonCompany.PersonId AS Id
                                         ,CabPerson.FullName AS Name
                                         ,HRHeader.SequenceId
                                         ,VpHR.StartDate
                                         ,VpHR.EndDate
                                         ,HRHeader.CpcLabourItemId As PreferedCpc
                                        FROM dbo.VpHR
                                        INNER JOIN dbo.CabPersonCompany
                                          ON VpHR.PersonId = CabPersonCompany.Id
                                        LEFT OUTER JOIN dbo.CabPerson
                                          ON CabPersonCompany.PersonId = CabPerson.Id
                                        INNER JOIN dbo.HRHeader
                                          ON VpHR.PersonId = HRHeader.PersonId
                                        LEFT OUTER JOIN HRContractorList 
                                          ON HRHeader.Id = HRContractorList.HRId
                                           WHERE @Date BETWEEN HRContractorList.StartDate AND HRContractorList.EndDate";

                var allcablist = connection.Query<HRList>(cabquery,new{Date = DateTime.UtcNow.Date}).ToList();

                var absence = @"SELECT 
                             AbsenceHeader.Id
                            ,AbsenceHeader.Person as CabPersonCompanyId
                            ,AbsenceHeader.StartDate
                            ,AbsenceHeader.EndDate
                            FROM dbo.AbsenceHeader";

                var allabsence = connection.Query<HRList>(absence).ToList();

                var vehical =
                    @"SELECT DISTINCT VpWH.CPCId AS CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber,@CuID AS CuId FROM dbo.VpWH LEFT OUTER JOIN dbo.CorporateProductCatalog ON VpWH.CPCId = CorporateProductCatalog.Id WHERE CorporateProductCatalog.ResourceFamilyId = '0c355800-91fd-4d99-8010-921a42f0ba04' AND VpWH.ProjectSequenceCode = @ProjectSequenceCode AND @date BETWEEN VpWH.StartDate AND VpWH.EndDate";

                var toolquery = @"SELECT DISTINCT
                                          VpWH.Id
                                         ,VpWH.CPCId AS CoperateProductCatalogId
                                         ,CorporateProductCatalog.ResourceNumber
                                         ,CorporateProductCatalog.Title
                                         ,StockHeader.AvailableQuantity
                                         ,@CuID AS CuId
                                         ,VpWH.StartDate
                                         ,VpWH.EndDate
                                         ,CorporateProductCatalog.ResourceFamilyId
                                         ,VpWH.ProjectSequenceCode
                                        FROM dbo.VpWH
                                        LEFT OUTER JOIN dbo.StockHeader
                                          ON VpWH.CPCId = StockHeader.CPCId
                                        LEFT OUTER JOIN dbo.CorporateProductCatalog
                                          ON VpWH.CPCId = CorporateProductCatalog.Id";

                for (var date = startDate.Date; date <= endDate.Date; date = date.AddDays(1))
                {
                    var cablist = new List<HRList>();
                    var newCablist = new List<HRList>();
                    var labour = new List<AvailableLabour>();
                    var tool = new List<PomlVehicle>();
                    var vehicals = new List<PomlVehicle>();
                    var tools = new List<PomlVehicle>();

                    var groupProjects = mProjectDefinition.GroupBy(r => r.ContractingUnitId);

                    foreach (var c in groupProjects)
                    {
                        var cuconnectionString = ConnectionString.MapConnectionString(c.Key,
                            null, VPParameter.TenantProvider);
                        await using var cuconnection = new SqlConnection(cuconnectionString);

                        var alltools = cuconnection
                            .Query<PomlVehicle>(toolquery, new { CuID = VPParameter.ContractingUnitSequenceId })
                            .ToList();

                        var allpmolTime = cuconnection.Query<PmolAssignTime>("Select * from PmolAssignTime");

                        foreach (var i in c)
                        {
                            var tools1 = alltools.Where(e =>
                                (e.ProjectSequenceCode == i.SequenceCode) & (e.StartDate <= date) &
                                (e.EndDate >= date) & (e.ResourceFamilyId != "0c355800-91fd-4d99-8010-921a42f0ba04"));

                            var cablist1 = allcablist.Where(e =>
                                (e.ProjectSequenceCode == i.SequenceCode) & (e.StartDate <= date) &
                                (e.EndDate >= date));

                            var absencefordate = allabsence.Where(e => (e.StartDate <= date) & (e.EndDate >= date));

                            var cablist2 = new List<HRList>();

                            foreach (var item in cablist1)
                            {
                                var absenceId = absencefordate
                                    .Where(e => e.CabPersonCompanyId == item.CabPersonCompanyId).FirstOrDefault();

                                var pmolTime = allpmolTime.Where(e =>
                                    (e.CabPersonId == item.Id) & (e.ExecutionDate == date));

                                var assignTime = pmolTime.Sum(x => x.AssignTime.ToDouble());

                                item.Precentage = (assignTime / 8 * 100).ToString("0.00");

                                if (absenceId != null) item.Absence = true;

                                var cabPearson = new HRList();
                                cabPearson.Id = item.Id;
                                cabPearson.Name = item.Name;
                                cabPearson.HRId = item.HRId;
                                cabPearson.CabPersonCompanyId = item.CabPersonCompanyId;
                                cabPearson.SequenceId = item.SequenceId;
                                cabPearson.Absence = item.Absence;
                                cabPearson.ProjectSequenceCode = item.ProjectSequenceCode;
                                cabPearson.Precentage = item.Precentage;
                                cabPearson.StartDate = item.StartDate;
                                cabPearson.EndDate = item.EndDate;
                                cabPearson.PreferedCpc = item.PreferedCpc;
                                cabPearson.ProjectList = pmolTime.Select(x => x.ProjectSequenceId).Distinct().ToList();

                                cablist2.Add(cabPearson);
                            }

                            var labourquery =
                                @"SELECT PmolTeamRole.CabPersonId ,PMol.ExecutionDate FROM dbo.PmolTeamRole INNER JOIN dbo.PMolPlannedWorkLabour ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id INNER JOIN dbo.PMol ON PMolPlannedWorkLabour.PmolId = PMol.Id WHERE PMol.ExecutionDate = @date AND PmolTeamRole.IsDeleted = 0 and PMolPlannedWorkLabour.IsDeleted = 0";

                            var toolsquery =
                                @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId,AllocatedQuantity FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id WHERE PMol.ExecutionDate = @date AND PMolPlannedWorkTools.IsDeleted = 0";

                            using var pconnection = new SqlConnection(i.ProjectConnectionString);

                            var labour1 = pconnection.Query<AvailableLabour>(labourquery, new { date = date.Date })
                                .ToList();
                            var tool1 = pconnection.Query<PomlVehicle>(toolsquery, new { date = date.Date }).ToList();

                            if (labour1.Any()) labour.AddRange(labour1);

                            if (tool1.Any()) tool.AddRange(tool1);

                            if (cablist2.Any())
                                // cablist2.AddRange(cablist1);
                                cablist.AddRange(cablist2);

                            var vehicals1 = alltools.Where(e =>
                                (e.ProjectSequenceCode == i.SequenceCode) & (e.StartDate <= date) &
                                (e.EndDate >= date) & (e.ResourceFamilyId == "0c355800-91fd-4d99-8010-921a42f0ba04") ||
                                e.ResourceFamilyId == "2210e768-human-kknk-truck-ee367a82ad17");

                            if (vehicals1.Any()) vehicals.AddRange(vehicals1);

                            if (tools1.Any()) tools.AddRange(tools1);
                        }
                    }

                    if (tool.Any())
                    {
                        vehicals = vehicals
                            .Where(x => tool.All(c => c.CoperateProductCatalogId != x.CoperateProductCatalogId))
                            .ToList();

                        tools = tools.Where(x =>
                            tool.All(c => c.CoperateProductCatalogId != x.CoperateProductCatalogId)).ToList();
                        // foreach (var i in tools)
                        // {
                        //     List<PomlVehicle> tool2 = new  List<PomlVehicle>();
                        //     
                        //     tool2 = tool.Where(c => c.CoperateProductCatalogId == i.CoperateProductCatalogId).ToList();
                        //
                        //     int allocatedQuantity = 0;
                        //     
                        //     foreach (var n in tool2)
                        //     {
                        //         if (n.AllocatedQuantity != "0")
                        //         {
                        //             allocatedQuantity = allocatedQuantity + n.AllocatedQuantity.ToInt();
                        //         }
                        //     }
                        //
                        //     i.ConsumedQuantity = allocatedQuantity.ToString();
                        // }
                    }

                    // if (labour.Any())
                    // {
                    //     var groupteams = labour.GroupBy(r => r.ExecutionDate);
                    //
                    //     foreach(var n in groupteams)
                    //     {
                    //         var cabpearsonList = new List<HRList>();
                    //         var availableLWorker = new AvailableLWorkers();
                    //         
                    //         Parallel.ForEach(cablist, b =>
                    //         {
                    //
                    //             var i = 0;
                    //             foreach (var c in n)
                    //             {
                    //                 i += 1;
                    //                 if (c.CabPersonId == b.Id && b.Absence == false) break;
                    //
                    //                 if (i == n.Count()) cabpearsonList.Add(b);
                    //             }
                    //         });
                    //
                    //         availableLWorker.day = date;
                    //         availableLWorker.Workers = cabpearsonList.OrderBy(e => e.Name).ToList();
                    //         availableLWorker.Vehicle =  vehicals.ToList();
                    //         availableLWorker.Tool =  tools.ToList();
                    //         availableLWorkers.Add(availableLWorker);
                    //     }
                    // }
                    //
                    // else
                    // {
                    //     var availableLWorker = new AvailableLWorkers
                    //     {
                    //         day = date,
                    //         Workers =  cablist.OrderBy(e => e.Name).ToList(),
                    //         Vehicle =  vehicals.ToList(),
                    //         Tool = tools.ToList()
                    //     };
                    //     availableLWorkers.Add(availableLWorker);
                    // }

                    if (cablist.Any())
                    {
                        foreach (var cabItem in cablist.GroupBy(x => x.Id))
                        {
                            var cabPearson = new HRList();
                            cabPearson.Id = cabItem.Key;
                            cabPearson.Name = cabItem.FirstOrDefault().Name;
                            cabPearson.HRId = cabItem.FirstOrDefault().HRId;
                            cabPearson.CabPersonCompanyId = cabItem.FirstOrDefault().CabPersonCompanyId;
                            cabPearson.SequenceId = cabItem.FirstOrDefault().SequenceId;
                            cabPearson.Absence = cabItem.FirstOrDefault().Absence;
                            cabPearson.ProjectSequenceCode = cabItem.FirstOrDefault().ProjectSequenceCode;
                            cabPearson.Precentage = cabItem.Sum(x => x.Precentage.ToDouble()).ToString();
                            cabPearson.StartDate = cabItem.FirstOrDefault().StartDate;
                            cabPearson.EndDate = cabItem.FirstOrDefault().EndDate;
                            cabPearson.PreferedCpc = cabItem.FirstOrDefault().PreferedCpc;
                            cabPearson.ProjectList = cabItem.SelectMany(c => c.ProjectList).Distinct().ToList();
                            
                            newCablist.Add(cabPearson);
                        }
                    }
                    if (VPParameter.GetTeamDto.PersonName != null)
                    {
                        VPParameter.GetTeamDto.PersonName = VPParameter.GetTeamDto.PersonName.Replace("'", "''");
                        newCablist = newCablist.Where(x => x.Name.Contains(VPParameter.GetTeamDto.PersonName)).ToList();
                    }
                    if (VPParameter.GetTeamDto.IsPlanned != "0")
                    {
                        newCablist = VPParameter.GetTeamDto.IsPlanned switch
                        {
                            "2" => newCablist.Where(x => x.Precentage.ToDouble() > 0).ToList(),
                            "1" => newCablist.Where(x => x.Precentage.ToDouble() <= 0).ToList(),
                            _ => newCablist
                        };
                    }
                    if (VPParameter.GetTeamDto.PreferedCpc != null)
                    {
                        newCablist = newCablist.Where(x => x.PreferedCpc == VPParameter.GetTeamDto.PreferedCpc).ToList();
                    }
                    
                    var availableLWorker = new AvailableLWorkers
                    {
                        day = date,
                        Workers = newCablist.OrderBy(e => e.Name).ToList(),
                        Vehicle = vehicals.ToList(),
                        Tool = tools.ToList()
                    };
                    availableLWorkers.Add(availableLWorker);
                }
            }
        }

        return availableLWorkers;
    }

    public async Task<IEnumerable<AvailableLWorkers>> AvailableTeamsDayPlanningProject(VPParameter VPParameter)
    {
        var availableLWorkers = new List<AvailableLWorkers>();

        var endDate = VPParameter.GetTeamDto.EndDate;

        var startDate = VPParameter.GetTeamDto.StartDate;

        using (var connection =
               new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
        {
            var cabquery =
                @"SELECT DISTINCT VpHR.PersonId AS CabPersonCompanyId,VpHR.ProjectSequenceCode,CabPersonCompany.PersonId AS Id ,CabPerson.FullName AS Name ,HRHeader.SequenceId,HRHeader.CpcLabourItemId As PreferedCpc FROM dbo.VpHR INNER JOIN dbo.CabPersonCompany ON VpHR.PersonId = CabPersonCompany.Id LEFT OUTER JOIN dbo.CabPerson ON CabPersonCompany.PersonId = CabPerson.Id INNER JOIN dbo.HRHeader ON VpHR.PersonId = HRHeader.PersonId WHERE VpHR.ProjectSequenceCode = @ProjectSequenceCode AND  @date BETWEEN VpHR.StartDate AND VpHR.EndDate";

            var vehical =
                @"SELECT DISTINCT VpWH.CPCId AS CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber,@CuID AS CuId FROM dbo.VpWH LEFT OUTER JOIN dbo.CorporateProductCatalog ON VpWH.CPCId = CorporateProductCatalog.Id WHERE CorporateProductCatalog.ResourceFamilyId = '0c355800-91fd-4d99-8010-921a42f0ba04' AND VpWH.ProjectSequenceCode = @ProjectSequenceCode AND @date BETWEEN VpWH.StartDate AND VpWH.EndDate";

            //string toolquery = @"SELECT StockHeader.Id ,StockHeader.CPCId AS CoperateProductCatalogId ,CorporateProductCatalog.ResourceNumber ,CorporateProductCatalog.Title ,@CuID AS CuId ,AvailableQuantity FROM dbo.StockHeader LEFT OUTER JOIN dbo.CorporateProductCatalog ON StockHeader.CPCId = CorporateProductCatalog.Id WHERE CorporateProductCatalog.ResourceFamilyId = '58ed2b7d-471a-496b-93bb-450d0c71d029' AND StockHeader.TypeId = 'c46c3a26-39a5-42cc-n9wn-89655304eh6'";

            var toolquery =
                @"SELECT DISTINCT VpWH.Id ,VpWH.CPCId AS CoperateProductCatalogId ,CorporateProductCatalog.ResourceNumber ,CorporateProductCatalog.Title ,StockHeader.AvailableQuantity ,@CuID AS CuId FROM dbo.VpWH LEFT OUTER JOIN dbo.StockHeader ON VpWH.CPCId = StockHeader.CPCId LEFT OUTER JOIN dbo.CorporateProductCatalog ON VpWH.CPCId = CorporateProductCatalog.Id WHERE VpWH.ProjectSequenceCode = @ProjectSequenceCode AND @date BETWEEN VpWH.StartDate AND VpWH.EndDate AND CorporateProductCatalog.ResourceFamilyId != '0c355800-91fd-4d99-8010-921a42f0ba04'";

            for (var date = startDate.Date; date <= endDate.Date; date = date.AddDays(1))
            {
                var cablist = new List<HRList>();
                var labour = new List<AvailableLabour>();
                var tool = new List<PomlVehicle>();
                var vehicals = new List<PomlVehicle>();
                var tools = new List<PomlVehicle>();

                var cuconnectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
                    null, VPParameter.TenantProvider);

                var projectConnectionString = ConnectionString.MapConnectionString(
                    VPParameter.ContractingUnitSequenceId,
                    VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

                await using var cuconnection = new SqlConnection(cuconnectionString);

                var tools1 = cuconnection.Query<PomlVehicle>(toolquery,
                    new
                    {
                        lang = VPParameter.Lang, date, CuID = VPParameter.ContractingUnitSequenceId,
                        ProjectSequenceCode = VPParameter.ProjectSequenceId
                    }).ToList();

                var cablist1 = connection.Query<HRList>(cabquery,
                        new { lang = VPParameter.Lang, ProjectSequenceCode = VPParameter.ProjectSequenceId, date })
                    .ToList();

                var cablist2 = new List<HRList>();

                foreach (var item in cablist1)
                {
                    var absence =
                        @"SELECT AbsenceHeader.Id FROM dbo.AbsenceHeader where AbsenceHeader.Person = @Id AND @date BETWEEN AbsenceHeader.StartDate AND AbsenceHeader.EndDate";

                    HRList absenceId;

                    absenceId = connection
                        .Query<HRList>(absence, new { Id = item.CabPersonCompanyId, date })
                        .FirstOrDefault();
                    if (absenceId != null) item.Absence = true;

                    var pmolTime = cuconnection.Query<PmolAssignTime>(
                        "Select * from PmolAssignTime Where ExecutionDate = @ExecutionDate AND CabPersonId = @CabPersonId",
                        new { CabPersonId = item.Id, ExecutionDate = date });

                    var assignTime = pmolTime.Sum(x => x.AssignTime.ToDouble());

                    item.Precentage = (assignTime / 8 * 100).ToString("0.00");

                    var cabPearson = new HRList();
                    cabPearson.Id = item.Id;
                    cabPearson.Name = item.Name;
                    cabPearson.HRId = item.HRId;
                    cabPearson.CabPersonCompanyId = item.CabPersonCompanyId;
                    cabPearson.SequenceId = item.SequenceId;
                    cabPearson.Absence = item.Absence;
                    cabPearson.ProjectSequenceCode = item.ProjectSequenceCode;
                    cabPearson.Precentage = item.Precentage;
                    cabPearson.StartDate = item.StartDate;
                    cabPearson.EndDate = item.EndDate;
                    cabPearson.PreferedCpc = item.PreferedCpc;
                    cabPearson.ProjectList = pmolTime.Select(x => x.ProjectSequenceId).Distinct().ToList();


                    cablist2.Add(cabPearson);
                }

                var labourquery =
                    @"SELECT PmolTeamRole.CabPersonId ,PMol.ExecutionDate FROM dbo.PmolTeamRole INNER JOIN dbo.PMolPlannedWorkLabour ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id INNER JOIN dbo.PMol ON PMolPlannedWorkLabour.PmolId = PMol.Id WHERE PMol.ExecutionDate = @date AND PmolTeamRole.IsDeleted = 0 and PMolPlannedWorkLabour.IsDeleted = 0";

                var toolsquery =
                    @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId,RequiredQuantity AS ConsumeQuantity FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id WHERE PMol.ExecutionDate = @date AND PMolPlannedWorkTools.IsDeleted = 0";

                using var pconnection = new SqlConnection(projectConnectionString);

                var labour1 = pconnection.Query<AvailableLabour>(labourquery, new { date = date.Date })
                    .ToList();
                var tool1 = pconnection.Query<PomlVehicle>(toolsquery, new { date = date.Date }).ToList();

                if (labour1.Any()) labour.AddRange(labour1);

                if (tool1.Any()) tool.AddRange(tool1);

                if (cablist2.Any()) cablist.AddRange(cablist2);

                var vehicals1 = cuconnection.Query<PomlVehicle>(vehical,
                    new
                    {
                        lang = VPParameter.Lang, date, CuID = VPParameter.ContractingUnitSequenceId,
                        ProjectSequenceCode = VPParameter.ProjectSequenceId
                    }).ToList();

                if (vehicals1.Any()) vehicals.AddRange(vehicals1);
                if (tools1.Any()) tools.AddRange(tools1);
                if (tool.Any())
                {
                    vehicals = vehicals
                        .Where(x => tool.All(c => c.CoperateProductCatalogId != x.CoperateProductCatalogId)).ToList();

                    tools = tools.Where(x =>
                        tool.All(c => c.CoperateProductCatalogId != x.CoperateProductCatalogId)).ToList();

                    // foreach (var i in tools)
                    // {
                    //     List<PomlVehicle> tool2 = new  List<PomlVehicle>();
                    //             
                    //     tool2 = tool.Where(c => c.CoperateProductCatalogId == i.CoperateProductCatalogId).ToList();
                    //
                    //     int consumeQuantity = 0;
                    //             
                    //     foreach (var n in tool2)
                    //     {
                    //         if (n.ConsumedQuantity != "0")
                    //         {
                    //             consumeQuantity = consumeQuantity + n.ConsumedQuantity.ToInt();
                    //         }
                    //     }
                    //
                    //     i.ConsumedQuantity = consumeQuantity.ToString();
                    // }
                }

                // if (labour.Any()) 
                // {var groupteams = labour.GroupBy(r => r.ExecutionDate);
                //
                //     foreach(var n in groupteams)
                //     {
                //         var cabpearsonList = new List<HRList>();
                //         var availableLWorker = new AvailableLWorkers();
                //                 
                //         Parallel.ForEach(cablist, b =>
                //         {
                //
                //             var i = 0;
                //             foreach (var c in n)
                //             {
                //                 i += 1;
                //                 if (c.CabPersonId == b.Id && b.Absence == false) break;
                //
                //                 if (i == n.Count()) cabpearsonList.Add(b);
                //             }
                //         });
                //
                //         availableLWorker.day = date;
                //         availableLWorker.Workers = cabpearsonList.OrderBy(e => e.Name).ToList();
                //         availableLWorker.Vehicle =  vehicals.ToList();
                //         availableLWorker.Tool =  tools.ToList();
                //         availableLWorkers.Add(availableLWorker);
                //     }
                // }
                // else
                // {
                //     var availableLWorker = new AvailableLWorkers
                //     {
                //         day = date,
                //         Workers =  cablist.OrderBy(e => e.Name).ToList(),
                //         Vehicle =  vehicals.ToList(),
                //         Tool = tools.ToList()
                //     };
                //     availableLWorkers.Add(availableLWorker);
                // }

                if (VPParameter.GetTeamDto.PersonName != null)
                {
                    VPParameter.GetTeamDto.PersonName = VPParameter.GetTeamDto.PersonName.Replace("'", "''");
                    cablist = cablist.Where(x => x.Name.Contains(VPParameter.GetTeamDto.PersonName)).ToList();
                }
                if (VPParameter.GetTeamDto.IsPlanned != "0")
                {
                    cablist = VPParameter.GetTeamDto.IsPlanned switch
                    {
                        "2" => cablist.Where(x => x.Precentage.ToDouble() > 0).ToList(),
                        "1" => cablist.Where(x => x.Precentage.ToDouble() <= 0).ToList(),
                        _ => cablist
                    };
                }
                if (VPParameter.GetTeamDto.PreferedCpc != null)
                {
                    cablist = cablist.Where(x => x.PreferedCpc == VPParameter.GetTeamDto.PreferedCpc).ToList();
                }
                var availableLWorker = new AvailableLWorkers
                {
                    day = date,
                    Workers = cablist.DistinctBy(e => e.Id).OrderBy(e => e.Name).ToList(),
                    Vehicle = vehicals.ToList(),
                    Tool = tools.ToList()
                };
                availableLWorkers.Add(availableLWorker);
            }
        }

        return availableLWorkers;
    }

    public async Task<IEnumerable<AvailableLWorkers>> AvailableTeamsDayPlanningCuHr(VPParameter VPParameter)
    {
        var availableLWorkers = new List<AvailableLWorkers>();

        var endDate = VPParameter.GetTeamDto.EndDate;

        var startDate = VPParameter.GetTeamDto.StartDate;

        using (var connection =
               new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
        {
            if (VPParameter.GetTeamDto.BuId != null)
            {
                var allProjects =
                    connection.Query<ProjectDefinition>("Select Id,Title,SequenceCode From ProjectDefinition");
                
                var projectSelect =
                    @"SELECT ProjectDefinition.Title ,ProjectDefinition.ProjectConnectionString ,ProjectDefinition.SequenceCode ,CabCompany.SequenceCode AS ContractingUnitId FROM dbo.ProjectDefinition LEFT OUTER JOIN dbo.CabCompany ON ProjectDefinition.ContractingUnitId = CabCompany.Id LEFT OUTER JOIN dbo.ProjectClassification ON ProjectDefinition.Id = ProjectClassification.ProjectId WHERE ProjectClassification.ProjectClassificationBuisnessUnit = @BuId AND ProjectDefinition.IsDeleted = 0 ORDER BY ProjectDefinition.SequenceCode";

                var mProjectDefinition = connection
                    .Query<ProjectDefinition>(projectSelect, new { BuID = VPParameter.GetTeamDto.BuId })
                    .ToList();

                var cabquery = @"SELECT DISTINCT
                                          HRHeader.PersonId AS CabPersonCompanyId
                                         ,CabPersonCompany.PersonId AS Id
                                         ,CabPerson.FullName AS Name
                                         ,HRHeader.SequenceId
                                         ,HRContractorList.StartDate
                                         ,HRContractorList.EndDate
                                         ,HRHeader.CpcLabourItemId As PreferedCpc
                                        FROM dbo.HRHeader 
                                        LEFT OUTER JOIN dbo.CabPersonCompany
                                          ON HRHeader.PersonId = CabPersonCompany.Id
                                        LEFT OUTER JOIN dbo.CabPerson
                                          ON CabPersonCompany.PersonId = CabPerson.Id
                                        LEFT OUTER JOIN HRContractorList 
                                          ON HRHeader.Id = HRContractorList.HRId";

                var allcablist = connection.Query<HRList>(cabquery).ToList();

                const string absence = @"SELECT 
                             AbsenceHeader.Id
                            ,AbsenceHeader.Person as CabPersonCompanyId
                            ,AbsenceHeader.StartDate
                            ,AbsenceHeader.EndDate
                            FROM dbo.AbsenceHeader";

                var allabsence = connection.Query<HRList>(absence).ToList();

                var vehical =
                    @"SELECT DISTINCT VpWH.CPCId AS CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber,@CuID AS CuId FROM dbo.VpWH LEFT OUTER JOIN dbo.CorporateProductCatalog ON VpWH.CPCId = CorporateProductCatalog.Id WHERE CorporateProductCatalog.ResourceFamilyId = '0c355800-91fd-4d99-8010-921a42f0ba04' AND VpWH.ProjectSequenceCode = @ProjectSequenceCode AND @date BETWEEN VpWH.StartDate AND VpWH.EndDate";

                var toolquery = @"SELECT DISTINCT
                                          VpWH.Id
                                         ,VpWH.CPCId AS CoperateProductCatalogId
                                         ,CorporateProductCatalog.ResourceNumber
                                         ,CorporateProductCatalog.Title
                                         ,StockHeader.AvailableQuantity
                                         ,@CuID AS CuId
                                         ,VpWH.StartDate
                                         ,VpWH.EndDate
                                         ,CorporateProductCatalog.ResourceFamilyId
                                         ,VpWH.ProjectSequenceCode
                                        FROM dbo.VpWH
                                        LEFT OUTER JOIN dbo.StockHeader
                                          ON VpWH.CPCId = StockHeader.CPCId
                                        LEFT OUTER JOIN dbo.CorporateProductCatalog
                                          ON VpWH.CPCId = CorporateProductCatalog.Id";

                for (var date = startDate.Date; date <= endDate.Date; date = date.AddDays(1))
                {
                    var cablist = new List<HRList>();
                    var newCablist = new List<HRList>();
                    var labour = new List<AvailableLabour>();
                    var tool = new List<PomlVehicle>();
                    var vehicals = new List<PomlVehicle>();
                    var tools = new List<PomlVehicle>();

                    var groupProjects = mProjectDefinition.GroupBy(r => r.ContractingUnitId);

                    foreach (var c in groupProjects)
                    {
                        var cuconnectionString = ConnectionString.MapConnectionString(c.Key,
                            null, VPParameter.TenantProvider);
                        await using var cuconnection = new SqlConnection(cuconnectionString);

                        var alltools = cuconnection
                            .Query<PomlVehicle>(toolquery, new { CuID = VPParameter.ContractingUnitSequenceId })
                            .ToList();

                        var allpmolTime = cuconnection.Query<PmolAssignTime>("Select * from PmolAssignTime");

                        foreach (var i in c)
                        {
                            var tools1 = alltools.Where(e =>
                                (e.ProjectSequenceCode == i.SequenceCode) & (e.StartDate <= date) &
                                (e.EndDate >= date) & (e.ResourceFamilyId != "0c355800-91fd-4d99-8010-921a42f0ba04"));

                            var cablist1 = allcablist.Where(e => (e.StartDate <= date &
                                                                 e.EndDate >= date) || (e.StartDate <= date &&
                                                                 e.EndDate == null)).DistinctBy(x => x.Id).ToList();

                            
                            var absencefordate = allabsence.Where(e => (e.StartDate <= date) & (e.EndDate >= date));

                            var cablist2 = new List<HRList>();

                            foreach (var item in cablist1)
                            {
                                var absenceId = absencefordate.FirstOrDefault(e => e.CabPersonCompanyId == item.CabPersonCompanyId);

                                var pmolTime = allpmolTime.Where(e =>
                                    (e.CabPersonId == item.Id) & (e.ExecutionDate == date)).ToList();

                                pmolTime.ForEach(x => x.ProjectTitle = allProjects.FirstOrDefault(b => b.SequenceCode == x.ProjectSequenceId)!.Title);
                                var assignTime = pmolTime.Sum(x => x.AssignTime.ToDouble());

                                item.Precentage = (assignTime / 8 * 100).ToString("0.00");

                                if (absenceId != null) item.Absence = true;

                                var cabPearson = new HRList
                                {
                                    Id = item.Id,
                                    Name = item.Name,
                                    HRId = item.HRId,
                                    CabPersonCompanyId = item.CabPersonCompanyId,
                                    SequenceId = item.SequenceId,
                                    Absence = item.Absence,
                                    ProjectSequenceCode = item.ProjectSequenceCode,
                                    Precentage = item.Precentage,
                                    StartDate = item.StartDate,
                                    EndDate = item.EndDate,
                                    PreferedCpc = item.PreferedCpc,
                                    ProjectList = pmolTime.Select(t => t.ProjectTitle).Distinct().ToList()
                                };
                                
                                cablist2.Add(cabPearson);
                            }

                            var labourquery =
                                @"SELECT PmolTeamRole.CabPersonId ,PMol.ExecutionDate FROM dbo.PmolTeamRole INNER JOIN dbo.PMolPlannedWorkLabour ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id INNER JOIN dbo.PMol ON PMolPlannedWorkLabour.PmolId = PMol.Id WHERE PMol.ExecutionDate = @date AND PmolTeamRole.IsDeleted = 0 and PMolPlannedWorkLabour.IsDeleted = 0";

                            var toolsquery =
                                @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId,AllocatedQuantity FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id WHERE PMol.ExecutionDate = @date AND PMolPlannedWorkTools.IsDeleted = 0";

                            using var pconnection = new SqlConnection(i.ProjectConnectionString);

                            var labour1 = pconnection.Query<AvailableLabour>(labourquery, new { date = date.Date })
                                .ToList();
                            var tool1 = pconnection.Query<PomlVehicle>(toolsquery, new { date = date.Date }).ToList();

                            if (labour1.Any()) labour.AddRange(labour1);

                            if (tool1.Any()) tool.AddRange(tool1);

                            if (cablist2.Any())
                                // cablist2.AddRange(cablist1);
                                cablist.AddRange(cablist2);

                            var vehicals1 = alltools.Where(e =>
                                (e.ProjectSequenceCode == i.SequenceCode) & (e.StartDate <= date) &
                                (e.EndDate >= date) & (e.ResourceFamilyId == "0c355800-91fd-4d99-8010-921a42f0ba04") ||
                                e.ResourceFamilyId == "2210e768-human-kknk-truck-ee367a82ad17");

                            if (vehicals1.Any()) vehicals.AddRange(vehicals1);

                            if (tools1.Any()) tools.AddRange(tools1);
                        }
                    }

                    if (tool.Any())
                    {
                        vehicals = vehicals
                            .Where(x => tool.All(c => c.CoperateProductCatalogId != x.CoperateProductCatalogId))
                            .ToList();

                        tools = tools.Where(x =>
                            tool.All(c => c.CoperateProductCatalogId != x.CoperateProductCatalogId)).ToList();

                    }

                    if (cablist.Any())
                    {
                        foreach (var cabItem in cablist.GroupBy(x => x.Id))
                        {
                            var cabPearson = new HRList();
                            cabPearson.Id = cabItem.Key;
                            cabPearson.Name = cabItem.FirstOrDefault().Name;
                            cabPearson.HRId = cabItem.FirstOrDefault().HRId;
                            cabPearson.CabPersonCompanyId = cabItem.FirstOrDefault().CabPersonCompanyId;
                            cabPearson.SequenceId = cabItem.FirstOrDefault().SequenceId;
                            cabPearson.Absence = cabItem.FirstOrDefault().Absence;
                            cabPearson.ProjectSequenceCode = cabItem.FirstOrDefault().ProjectSequenceCode;
                            cabPearson.Precentage = cabItem.Sum(x => x.Precentage.ToDouble()).ToString();
                            cabPearson.StartDate = cabItem.FirstOrDefault().StartDate;
                            cabPearson.EndDate = cabItem.FirstOrDefault().EndDate;
                            cabPearson.PreferedCpc = cabItem.FirstOrDefault().PreferedCpc;
                            cabPearson.ProjectList = cabItem.SelectMany(c => c.ProjectList).Distinct().ToList();

                            newCablist.Add(cabPearson);
                        }
                    }

                    if (VPParameter.GetTeamDto.PersonName != null)
                    {
                        VPParameter.GetTeamDto.PersonName = VPParameter.GetTeamDto.PersonName.Replace("'", "''");
                        newCablist = newCablist.Where(x => x.Name.Contains(VPParameter.GetTeamDto.PersonName))
                            .ToList();
                    }

                    if (VPParameter.GetTeamDto.IsPlanned != "0")
                    {
                        newCablist = VPParameter.GetTeamDto.IsPlanned switch
                        {
                            "2" => newCablist.Where(x => x.Precentage.ToDouble() > 0).ToList(),
                            "1" => newCablist.Where(x => x.Precentage.ToDouble() <= 0).ToList(),
                            _ => newCablist
                        };
                    }

                    if (VPParameter.GetTeamDto.PreferedCpc != null)
                    {
                        newCablist = newCablist.Where(x => x.PreferedCpc == VPParameter.GetTeamDto.PreferedCpc)
                            .ToList();
                    }

                    var availableLWorker = new AvailableLWorkers
                    {
                        day = date,
                        Workers = newCablist.OrderBy(e => e.Name).ToList(),
                        Vehicle = vehicals.ToList(),
                        Tool = tools.ToList()
                    };
                    availableLWorkers.Add(availableLWorker);
                }
                
            }

            return availableLWorkers;
        }

    }
    
    public async Task<IEnumerable<AvailableLWorkers>> AvailableTeamsDayPlanningProjectCuhr(VPParameter VPParameter)
    {
        var availableLWorkers = new List<AvailableLWorkers>();

        var endDate = VPParameter.GetTeamDto.EndDate;

        var startDate = VPParameter.GetTeamDto.StartDate;

        using (var connection =
               new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
        {
            var allProjects =
                connection.Query<ProjectDefinition>("Select Id,Title,SequenceCode From ProjectDefinition");
            
            var cabquery = @"SELECT DISTINCT
                                          HRHeader.PersonId AS CabPersonCompanyId
                                         ,CabPersonCompany.PersonId AS Id
                                         ,CabPerson.FullName AS Name
                                         ,HRHeader.SequenceId
                                         ,HRContractorList.StartDate
                                         ,HRContractorList.EndDate
                                         ,HRHeader.CpcLabourItemId As PreferedCpc
                                        FROM dbo.HRHeader 
                                        LEFT OUTER JOIN dbo.CabPersonCompany
                                          ON HRHeader.PersonId = CabPersonCompany.Id
                                        LEFT OUTER JOIN dbo.CabPerson
                                          ON CabPersonCompany.PersonId = CabPerson.Id
                                        LEFT OUTER JOIN HRContractorList 
                                          ON HRHeader.Id = HRContractorList.HRId Where @date BETWEEN HRContractorList.StartDate AND HRContractorList.EndDate OR HRContractorList.StartDate <= @date AND HRContractorList.EndDate IS NULL";
            // var cabquery =
            //     @"SELECT DISTINCT VpHR.PersonId AS CabPersonCompanyId,VpHR.ProjectSequenceCode,CabPersonCompany.PersonId AS Id ,CabPerson.FullName AS Name ,HRHeader.SequenceId,HRHeader.CpcLabourItemId As PreferedCpc FROM dbo.VpHR INNER JOIN dbo.CabPersonCompany ON VpHR.PersonId = CabPersonCompany.Id LEFT OUTER JOIN dbo.CabPerson ON CabPersonCompany.PersonId = CabPerson.Id INNER JOIN dbo.HRHeader ON VpHR.PersonId = HRHeader.PersonId WHERE VpHR.ProjectSequenceCode = @ProjectSequenceCode AND  @date BETWEEN VpHR.StartDate AND VpHR.EndDate";

            var vehical =
                @"SELECT DISTINCT VpWH.CPCId AS CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber,@CuID AS CuId FROM dbo.VpWH LEFT OUTER JOIN dbo.CorporateProductCatalog ON VpWH.CPCId = CorporateProductCatalog.Id WHERE CorporateProductCatalog.ResourceFamilyId = '0c355800-91fd-4d99-8010-921a42f0ba04' AND VpWH.ProjectSequenceCode = @ProjectSequenceCode AND @date BETWEEN VpWH.StartDate AND VpWH.EndDate";

            //string toolquery = @"SELECT StockHeader.Id ,StockHeader.CPCId AS CoperateProductCatalogId ,CorporateProductCatalog.ResourceNumber ,CorporateProductCatalog.Title ,@CuID AS CuId ,AvailableQuantity FROM dbo.StockHeader LEFT OUTER JOIN dbo.CorporateProductCatalog ON StockHeader.CPCId = CorporateProductCatalog.Id WHERE CorporateProductCatalog.ResourceFamilyId = '58ed2b7d-471a-496b-93bb-450d0c71d029' AND StockHeader.TypeId = 'c46c3a26-39a5-42cc-n9wn-89655304eh6'";

            var toolquery =
                @"SELECT DISTINCT VpWH.Id ,VpWH.CPCId AS CoperateProductCatalogId ,CorporateProductCatalog.ResourceNumber ,CorporateProductCatalog.Title ,StockHeader.AvailableQuantity ,@CuID AS CuId FROM dbo.VpWH LEFT OUTER JOIN dbo.StockHeader ON VpWH.CPCId = StockHeader.CPCId LEFT OUTER JOIN dbo.CorporateProductCatalog ON VpWH.CPCId = CorporateProductCatalog.Id WHERE VpWH.ProjectSequenceCode = @ProjectSequenceCode AND @date BETWEEN VpWH.StartDate AND VpWH.EndDate AND CorporateProductCatalog.ResourceFamilyId != '0c355800-91fd-4d99-8010-921a42f0ba04'";

            for (var date = startDate.Date; date <= endDate.Date; date = date.AddDays(1))
            {
                var cablist = new List<HRList>();
                var labour = new List<AvailableLabour>();
                var tool = new List<PomlVehicle>();
                var vehicals = new List<PomlVehicle>();
                var tools = new List<PomlVehicle>();

                var cuconnectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
                    null, VPParameter.TenantProvider);

                var projectConnectionString = ConnectionString.MapConnectionString(
                    VPParameter.ContractingUnitSequenceId,
                    VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

                await using var cuconnection = new SqlConnection(cuconnectionString);

                var tools1 = cuconnection.Query<PomlVehicle>(toolquery,
                    new
                    {
                        lang = VPParameter.Lang, date, CuID = VPParameter.ContractingUnitSequenceId,
                        ProjectSequenceCode = VPParameter.ProjectSequenceId
                    }).ToList();

                var cablist1 = connection.Query<HRList>(cabquery,
                        new { lang = VPParameter.Lang, date }).DistinctBy(x => x.Id)
                    .ToList();

                var cablist2 = new List<HRList>();

                foreach (var item in cablist1)
                {
                    var absence =
                        @"SELECT AbsenceHeader.Id FROM dbo.AbsenceHeader where AbsenceHeader.Person = @Id AND @date BETWEEN AbsenceHeader.StartDate AND AbsenceHeader.EndDate";

                    HRList absenceId;

                    absenceId = connection
                        .Query<HRList>(absence, new { Id = item.CabPersonCompanyId, date })
                        .FirstOrDefault();
                    if (absenceId != null) item.Absence = true;

                    var pmolTime = cuconnection.Query<PmolAssignTime>(
                        "Select * from PmolAssignTime Where ExecutionDate = @ExecutionDate AND CabPersonId = @CabPersonId",
                        new { CabPersonId = item.Id, ExecutionDate = date }).ToList();
                    
                    pmolTime.ForEach(x => x.ProjectTitle = allProjects.FirstOrDefault(b => b.SequenceCode == x.ProjectSequenceId)!.Title);

                    var assignTime = pmolTime.Sum(x => x.AssignTime.ToDouble());

                    item.Precentage = (assignTime / 8 * 100).ToString("0.00");

                    var cabPearson = new HRList
                    {
                        Id = item.Id,
                        Name = item.Name,
                        HRId = item.HRId,
                        CabPersonCompanyId = item.CabPersonCompanyId,
                        SequenceId = item.SequenceId,
                        Absence = item.Absence,
                        ProjectSequenceCode = item.ProjectSequenceCode,
                        Precentage = item.Precentage,
                        StartDate = item.StartDate,
                        EndDate = item.EndDate,
                        PreferedCpc = item.PreferedCpc,
                        ProjectList = pmolTime.Select(t => t.ProjectTitle).Distinct().ToList()
                    };

                    

                    cablist2.Add(cabPearson);
                }

                var labourquery =
                    @"SELECT PmolTeamRole.CabPersonId ,PMol.ExecutionDate FROM dbo.PmolTeamRole INNER JOIN dbo.PMolPlannedWorkLabour ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id INNER JOIN dbo.PMol ON PMolPlannedWorkLabour.PmolId = PMol.Id WHERE PMol.ExecutionDate = @date AND PmolTeamRole.IsDeleted = 0 and PMolPlannedWorkLabour.IsDeleted = 0";

                var toolsquery =
                    @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId,RequiredQuantity AS ConsumeQuantity FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id WHERE PMol.ExecutionDate = @date AND PMolPlannedWorkTools.IsDeleted = 0";

                using var pconnection = new SqlConnection(projectConnectionString);

                var labour1 = pconnection.Query<AvailableLabour>(labourquery, new { date = date.Date })
                    .ToList();
                var tool1 = pconnection.Query<PomlVehicle>(toolsquery, new { date = date.Date }).ToList();

                if (labour1.Any()) labour.AddRange(labour1);

                if (tool1.Any()) tool.AddRange(tool1);

                if (cablist2.Any()) cablist.AddRange(cablist2);

                var vehicals1 = cuconnection.Query<PomlVehicle>(vehical,
                    new
                    {
                        lang = VPParameter.Lang, date, CuID = VPParameter.ContractingUnitSequenceId,
                        ProjectSequenceCode = VPParameter.ProjectSequenceId
                    }).ToList();

                if (vehicals1.Any()) vehicals.AddRange(vehicals1);
                if (tools1.Any()) tools.AddRange(tools1);
                if (tool.Any())
                {
                    vehicals = vehicals
                        .Where(x => tool.All(c => c.CoperateProductCatalogId != x.CoperateProductCatalogId)).ToList();

                    tools = tools.Where(x =>
                        tool.All(c => c.CoperateProductCatalogId != x.CoperateProductCatalogId)).ToList();

                    
                }

                
                if (VPParameter.GetTeamDto.PersonName != null)
                {
                    VPParameter.GetTeamDto.PersonName = VPParameter.GetTeamDto.PersonName.Replace("'", "''");
                    cablist = cablist.Where(x => x.Name.Contains(VPParameter.GetTeamDto.PersonName)).ToList();
                }
                if (VPParameter.GetTeamDto.IsPlanned != "0")
                {
                    cablist = VPParameter.GetTeamDto.IsPlanned switch
                    {
                        "2" => cablist.Where(x => x.Precentage.ToDouble() > 0).ToList(),
                        "1" => cablist.Where(x => x.Precentage.ToDouble() <= 0).ToList(),
                        _ => cablist
                    };
                }
                if (VPParameter.GetTeamDto.PreferedCpc != null)
                {
                    cablist = cablist.Where(x => x.PreferedCpc == VPParameter.GetTeamDto.PreferedCpc).ToList();
                }
                var availableLWorker = new AvailableLWorkers
                {
                    day = date,
                    Workers = cablist.DistinctBy(e => e.Id).OrderBy(e => e.Name).ToList(),
                    Vehicle = vehicals.ToList(),
                    Tool = tools.ToList()
                };
                availableLWorkers.Add(availableLWorker);
            }
        }

        return availableLWorkers;
    }
    

    public async Task<ProjectsWithPmolDto> ProjectsWithPmol(VPParameter VPParameter)
    {
        await using var dbconnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);

        var db = new List<ProjectDefinition>();
        var excludeProjects = new List<ProjectDefinition>();

        var teamsData = new List<PmolData>();

        var teamsWithPmol = new ProjectsWithPmolDto();
        string env = null;

        var exceptionLst = new List<DatabasesException>();

        var selectBu =
            @"SELECT OrganizationTaxonomy.Id FROM dbo.OrganizationTaxonomy LEFT OUTER JOIN dbo.CabPersonCompany ON OrganizationTaxonomy.PersonId = CabPersonCompany.Id LEFT OUTER JOIN dbo.OrganizationTaxonomy c ON OrganizationTaxonomy.ParentId = c.Id WHERE Oid = @UserId AND OrganizationTaxonomy.OrganizationTaxonomyLevelId = 'oo10e768-3e06-po02-b337-ee367a82admn' AND c.Title = @Cu";

        var buId = dbconnection.Query<string>(selectBu,
                new { VPParameter.UserId, Cu = VPParameter.ProjectsPmol.ContractingUnit.FirstOrDefault() })
            .FirstOrDefault();

        var selectProject =
            @"SELECT ProjectDefinition.Id, ProjectDefinition.Title,ProjectDefinition.SequenceCode,ProjectDefinition.ProjectConnectionString ,ProjectDefinition.ProjectManagerId ,CabCompany.SequenceCode AS ContractingUnitId FROM dbo.ProjectDefinition LEFT OUTER JOIN CabCompany ON ProjectDefinition.ContractingUnitId = CabCompany.Id LEFT OUTER JOIN dbo.ProjectClassification ON ProjectDefinition.Id = ProjectClassification.ProjectId  WHERE ProjectDefinition.IsDeleted = 0 AND ProjectClassification.ProjectClassificationBuisnessUnit = @BuId ";

        var sb2 = new StringBuilder(selectProject);

        if (VPParameter.ProjectsPmol.ProjectSequenceCode != null)
        {
            sb2.Append(" And ProjectDefinition.SequenceCode = @SequenceCode ");

        }

        if (VPParameter.ProjectsPmol.ContractingUnit.Any())
            sb2.Append(" And CabCompany.SequenceCode IN @ContractingUnits ORDER BY ProjectDefinition.SequenceCode ");
        else
            sb2.Append(" ORDER BY ProjectDefinition.SequenceCode ");


        if (VPParameter.ProjectsPmol.BuId != null)
            db = dbconnection
                .Query<ProjectDefinition>(
                    sb2.ToString(),
                    new
                    {
                        Oid = VPParameter.UserId, ContractingUnits = VPParameter.ProjectsPmol.ContractingUnit,
                        BuID = VPParameter.ProjectsPmol.BuId,
                        SequenceCode = VPParameter.ProjectsPmol.ProjectSequenceCode
                    }).ToList();
        else
            // db = dbconnection
            //     .Query<ProjectDefinition>(
            //         sb2.ToString(),
            //         new
            //         {
            //             Oid = VPParameter.UserId, ContractingUnits = VPParameter.ProjectsPmol.ContractingUnit,
            //             BuID = buId
            //         }).ToList();
            return null;

        var memberselect = @"SELECT CabPerson.Id,CabPerson.FullName As Name,cpc.Id AS CabPersonCompanyId FROM dbo.CabPerson INNER JOIN dbo.CabPersonCompany cpc ON CabPerson.Id = cpc.PersonId";
        
        IEnumerable<PmolTeamMeber> members;

        members = dbconnection.Query<PmolTeamMeber>(memberselect);
        
        var roles = dbconnection.Query<Roles>("SELECT * FROM Role WHERE LanguageCode = @lang",
            new { lang = VPParameter.Lang });

        var vehical =
            @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber,PMolPlannedWorkTools.PmolId FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id INNER JOIN dbo.CorporateProductCatalog ON PMolPlannedWorkTools.CoperateProductCatalogId = CorporateProductCatalog.Id WHERE CorporateProductCatalog.ResourceFamilyId = '0c355800-91fd-4d99-8010-921a42f0ba04' AND PMolPlannedWorkTools.IsDeleted = 0 AND PMolPlannedWorkTools.PmolId = @PmolId";

        var tool =
            @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber,PMolPlannedWorkTools.PmolId FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id INNER JOIN dbo.CorporateProductCatalog ON PMolPlannedWorkTools.CoperateProductCatalogId = CorporateProductCatalog.Id WHERE PMolPlannedWorkTools.IsDeleted = 0 AND CorporateProductCatalog.ResourceFamilyId != '0c355800-91fd-4d99-8010-921a42f0ba04' AND PMolPlannedWorkTools.PmolId = @PmolId";

        if (db.Any())
            foreach (var project in db)
                try
                {
                    var projectTeams = new List<PmolTeamMeber>();
                    var projectLabourCpc = new List<LabourCpc>();

                    var teamQuery = @"SELECT                                
                                                 PmolTeamRole.CabPersonId As Id
                                                ,PmolTeamRole.RoleId
                                                ,PmolTeamRole.Id As TeamRoleId
                                                FROM dbo.PMolPlannedWorkLabour                               
                                                LEFT OUTER JOIN dbo.PmolTeamRole
                                                  ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id
                                                WHERE PMolPlannedWorkLabour.IsDeleted = 0
                                                AND PmolTeamRole.IsDeleted = 0
                                                AND PmolTeamRole.CabPersonId IS NOT NULL AND PMolPlannedWorkLabour.PmolId = @PmolId ";

                    var cpcQuery = @"SELECT
                                      CorporateProductCatalog.Id
                                     ,CorporateProductCatalog.ResourceTitle
                                     ,CorporateProductCatalog.ResourceTypeId
                                     ,CorporateProductCatalog.ResourceFamilyId
                                     ,CorporateProductCatalog.CpcBasicUnitOfMeasureId
                                     ,CorporateProductCatalog.Title
                                    FROM dbo.PMolPlannedWorkLabour
                                    INNER JOIN dbo.CorporateProductCatalog
                                      ON PMolPlannedWorkLabour.CoperateProductCatalogId = CorporateProductCatalog.Id
                                      WHERE PMolPlannedWorkLabour.PmolId = @PmolId";
                    
                    
                    var siteManager = dbconnection.Query<SiteManagerParams>(
                        "SELECT CabPersonId AS Id ,cp.FullName AS Name ,hh.BgColor ,hh.FontColor FROM ProjectTeamRole LEFT OUTER JOIN ProjectTeam pt ON ProjectTeamRole.ProjectTeamId = pt.Id LEFT OUTER JOIN CabPerson cp ON ProjectTeamRole.CabPersonId = cp.Id LEFT OUTER JOIN CabPersonCompany cc ON cp.Id = cc.PersonId LEFT OUTER JOIN HRHeader hh ON cc.Id = hh.PersonId WHERE pt.ProjectId = @ProjectId AND ProjectTeamRole.RoleId = 'yyyyyyy-a513-45e0-a431-170dbd4yyyy'",
                        new { ProjectId = project.Id }).FirstOrDefault();
                    if (siteManager != null) project.SiteManager = siteManager;

                    await using var connection = new SqlConnection(project.ProjectConnectionString);

                    IEnumerable<PmolData> pmolList = null;

                    if (VPParameter.ProjectsPmol.CabPersonId != null)
                        pmolList = connection.Query<PmolData>(
                             @"SELECT PMol.Id ,PMol.ProjectMoleculeId ,PMol.Name ,PMol.ForemanMobileNumber ,PMol.ExecutionDate ,PMol.ForemanId ,PMol.Comment ,PMol.IsDeleted ,PMol.TypeId ,PMol.StatusId ,PMol.Title ,PMol.BorId ,PMol.EndDateTime ,PMol.IsFinished ,PMol.StartDateTime ,PMol.IsBreak ,PMol.PmolType ,PMol.ProductId ,PMol.ProjectSequenceCode ,PMol.ParentId ,PMol.ExecutionEndTime ,PMol.ExecutionStartTime ,PMol.LocationId ,PbsProduct.Name AS ProductName FROM dbo.PMol LEFT OUTER JOIN dbo.PbsProduct ON PMol.ProductId = PbsProduct.Id LEFT OUTER JOIN PMolPlannedWorkLabour ppwl ON PMol.Id = ppwl.PmolId LEft OUTER JOIN PmolTeamRole ptr ON ppwl.Id = ptr.PmolLabourId WHERE PMol.IsDeleted = 0 AND PMol.ExecutionDate = @ExecutionDate AND ptr.CabPersonId = @CabPersonId",
                                new { VPParameter.ProjectsPmol.ExecutionDate, VPParameter.ProjectsPmol.CabPersonId })
                            .ToList();

                    if (VPParameter.ProjectsPmol.CabPersonId == null)
                        pmolList = connection.Query<PmolData>(
                            @"SELECT PMol.Id ,PMol.ProjectMoleculeId ,PMol.Name ,PMol.ForemanMobileNumber ,PMol.ExecutionDate ,PMol.ForemanId ,PMol.Comment ,PMol.IsDeleted ,PMol.TypeId ,PMol.StatusId ,PMol.Title ,PMol.BorId ,PMol.EndDateTime ,PMol.IsFinished ,PMol.StartDateTime ,PMol.IsBreak ,PMol.PmolType ,PMol.ProductId ,PMol.ProjectSequenceCode ,PMol.ParentId ,PMol.ExecutionEndTime ,PMol.ExecutionStartTime ,PMol.LocationId ,PbsProduct.Name AS ProductName FROM dbo.PMol LEFT OUTER JOIN dbo.PbsProduct ON PMol.ProductId = PbsProduct.Id WHERE PMol.IsDeleted = 0 AND PMol.ExecutionDate = @ExecutionDate ",
                            new { VPParameter.ProjectsPmol.ExecutionDate }).ToList();

                    if (!pmolList.Any()) excludeProjects.Add(project);

                    var rfqPmolList = connection.Query<PmolRfq>("Select * from PmolRfq");

                    foreach (var pmol in pmolList)
                    {
                        var teams = connection.Query<PmolTeamMeber>(teamQuery,
                            new
                            {
                                PmolId = pmol.Id
                            }).ToList();

                        foreach (var person in teams)
                        {
                            person.Name = members.FirstOrDefault(x => x.Id == person.Id).Name;
                            person.CabPersonCompanyId = members.FirstOrDefault(x => x.Id == person.Id).CabPersonCompanyId;
                            person.ProjectSequenceId = project.SequenceCode;
                            person.PmolId = pmol.Id;
                            person.RoleName = roles.FirstOrDefault(x => x.RoleId == person.RoleId)?.RoleName;

                        }

                        pmol.Team = teams.OrderBy(t => t.Name).ToList();
                        
                        projectTeams.AddRange(pmol.Team);
                        
                        var cpc = connection.Query<LabourCpc>(cpcQuery,
                            new
                            {
                                PmolId = pmol.Id
                            }).ToList();

                        projectLabourCpc.AddRange(cpc);
                        var vehicals = connection.Query<PomlVehicle>(vehical,
                                new
                                {
                                    PmolId = pmol.Id
                                })
                            .ToList();

                        var tools = connection.Query<PomlVehicle>(tool,
                                new
                                {
                                    PmolId = pmol.Id
                                })
                            .ToList();

                        var selectProduct = @"with name_tree as
                                                             (SELECT
                                                               PbsProduct.Id
                                                              ,PbsProduct.Name
                                                              ,PbsProduct.Title
                                                              ,PbsProduct.ParentId
                                                             FROM dbo.PbsProduct
                                                             WHERE PbsProduct.Id = @Id
                                                               UNION ALL
                                                               SELECT c.Id, c.Name,CONCAT(c.Title,' > ',p.Title),c.ParentId
                                                               FROM dbo.PbsProduct c
                                                               JOIN name_tree p on p.ParentId = c.ProductId)
                                                               select Title
                                                               from name_tree WHERE ParentId IS NULL";

                        pmol.ProductTaxonomy = connection
                            .Query<string>(selectProduct, new { Id = pmol.ProductId }).FirstOrDefault();

                        pmol.PomlVehical = vehicals;
                        pmol.PomlTool = tools;
                        pmol.ContractingUinit = project.ContractingUnitId;
                        pmol.ProjectTitle = project.Title;
                        pmol.ProjectSequenceId = project.SequenceCode;
                        pmol.ProjectManager = dbconnection
                            .Query<string>("SELECT FullName FROM CabPerson  WHERE Id = @Id",
                                new { Id = project.ProjectManagerId }).FirstOrDefault();


                        if (pmol.LocationId != null && pmol.ExecutionStartTime != null)
                        {
                            var mapLocation = connection
                                .Query<Position>(
                                    "SELECT * FROM Position LEFT OUTER JOIN MapLocation ml ON Position.Id = ml.PositionId WHERE ml.Id = @Id",
                                    new { Id = pmol.LocationId }).FirstOrDefault();

                            if (mapLocation != null)
                                if (mapLocation.Lat != "0" || mapLocation.Lon != "0")
                                {
                                    var forecast = await VPParameter._iShiftRepository.GetWeatherForecast(
                                        mapLocation.Lat.ToDouble(), mapLocation.Lon.ToDouble(),
                                        DateTime.Parse(pmol.ExecutionDate), pmol.ExecutionStartTime,
                                        VPParameter.TenantProvider, VPParameter.Configuration);


                                    pmol.Forecast = forecast;
                                }
                        }

                        pmol.IsRFQGenerated = rfqPmolList.Any(x => x.PmolId == pmol.Id);
                    }

                    teamsData.AddRange(pmolList);
                    project.Team = projectTeams.DistinctBy(x => x.Id).ToList();
                    project.LabourCpc = projectLabourCpc.DistinctBy(x => x.Id).ToList();
                    project.ProjectConnectionString = null;
                }
                catch (Exception ex)
                {
                    var mDatabasesException = new DatabasesException();
                    mDatabasesException.DatabaseName = project.SequenceCode;
                    mDatabasesException.Exception = ex;
                    exceptionLst.Add(mDatabasesException);
                }


        if (VPParameter.ProjectsPmol.PmolTypeId != null)
        {
            teamsData = teamsData.Where(e => e.TypeId == VPParameter.ProjectsPmol.PmolTypeId).ToList();
        }
        db = db.Except(excludeProjects).ToList();

        if (VPParameter.ProjectsPmol.SiteManagerId != null)
        {
            db = db.Where(x => x.SiteManager != null).ToList();
            db = db.Where(x => x.SiteManager.Id == VPParameter.ProjectsPmol.SiteManagerId).ToList();
        }
        teamsWithPmol.Projects = db;
        teamsWithPmol.Pmol = teamsData;
        teamsWithPmol.IsRfqGenerated = teamsData.Any(x => x.IsRFQGenerated == false);

        return teamsWithPmol;
    }

    public async Task<ProjectsWithPmolDto> ProjectsWithPmolProjectLevel(VPParameter VPParameter)
    {
        await using var dbconnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);

        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

        await using var projectConnection = new SqlConnection(connectionString);


        var db = new List<ProjectDefinition>();
        var excludeProjects = new List<ProjectDefinition>();

        var teamsData = new List<PmolData>();

        var teamsWithPmol = new ProjectsWithPmolDto();
        string env = null;

        var exceptionLst = new List<DatabasesException>();

        // string selectBu = @"SELECT OrganizationTaxonomy.Id FROM dbo.OrganizationTaxonomy LEFT OUTER JOIN dbo.CabPersonCompany ON OrganizationTaxonomy.PersonId = CabPersonCompany.Id LEFT OUTER JOIN dbo.OrganizationTaxonomy c ON OrganizationTaxonomy.ParentId = c.Id WHERE Oid = @UserId AND OrganizationTaxonomy.OrganizationTaxonomyLevelId = 'oo10e768-3e06-po02-b337-ee367a82admn' AND c.Title = @Cu";
        //
        // var buId = dbconnection.Query<string>(selectBu, new {VPParameter.UserId,Cu = VPParameter.ProjectsPmol.ContractingUnit.FirstOrDefault()}).FirstOrDefault();

        var selectProject =
            @"SELECT ProjectDefinition.Id, ProjectDefinition.Title,ProjectDefinition.SequenceCode,ProjectDefinition.ProjectConnectionString ,ProjectDefinition.ProjectManagerId ,CabCompany.SequenceCode AS ContractingUnitId FROM dbo.ProjectDefinition LEFT OUTER JOIN CabCompany ON ProjectDefinition.ContractingUnitId = CabCompany.Id LEFT OUTER JOIN dbo.ProjectClassification ON ProjectDefinition.Id = ProjectClassification.ProjectId  WHERE ProjectDefinition.IsDeleted = 0 AND ProjectDefinition.SequenceCode = @SequenceId";

        var sb2 = new StringBuilder(selectProject);

        // if (VPParameter.ProjectsPmol.ContractingUnit.Any())
        // {
        //     sb2.Append(" And CabCompany.SequenceCode IN @ContractingUnits ORDER BY ProjectDefinition.SequenceCode ");
        // }
        // else
        // {
        //     sb2.Append(" ORDER BY ProjectDefinition.SequenceCode ");
        // }


        db = dbconnection
            .Query<ProjectDefinition>(
                sb2.ToString(),
                new
                {
                    SequenceId = VPParameter.ProjectSequenceId
                }).ToList();


        var memberselect = @"SELECT CabPerson.Id,CabPerson.FullName As Name,cpc.Id AS CabPersonCompanyId FROM dbo.CabPerson INNER JOIN dbo.CabPersonCompany cpc ON CabPerson.Id = cpc.PersonId";
        IEnumerable<PmolTeamMeber> members;
        members = dbconnection.Query<PmolTeamMeber>(memberselect);

        var roles = dbconnection.Query<Roles>("SELECT * FROM Role WHERE LanguageCode = @lang",
            new { lang = VPParameter.Lang });

        var vehical =
            @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber,PMolPlannedWorkTools.PmolId FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id INNER JOIN dbo.CorporateProductCatalog ON PMolPlannedWorkTools.CoperateProductCatalogId = CorporateProductCatalog.Id WHERE CorporateProductCatalog.ResourceFamilyId = '0c355800-91fd-4d99-8010-921a42f0ba04' AND PMolPlannedWorkTools.IsDeleted = 0 AND PMolPlannedWorkTools.PmolId = @PmolId";

        var tool =
            @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber,PMolPlannedWorkTools.PmolId FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id INNER JOIN dbo.CorporateProductCatalog ON PMolPlannedWorkTools.CoperateProductCatalogId = CorporateProductCatalog.Id WHERE PMolPlannedWorkTools.IsDeleted = 0 AND CorporateProductCatalog.ResourceFamilyId != '0c355800-91fd-4d99-8010-921a42f0ba04' AND PMolPlannedWorkTools.PmolId = @PmolId";

        if (db.Any())
            foreach (var project in db)
                try
                {
                    
                    var projectTeams = new List<PmolTeamMeber>();

                    var teamQuery = @"SELECT                                
                                                 PmolTeamRole.CabPersonId As Id
                                                ,PmolTeamRole.RoleId 
                                                ,PmolTeamRole.Id As TeamRoleId
                                                FROM dbo.PMolPlannedWorkLabour                               
                                                LEFT OUTER JOIN dbo.PmolTeamRole
                                                  ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id
                                                WHERE PMolPlannedWorkLabour.IsDeleted = 0
                                                AND PmolTeamRole.IsDeleted = 0
                                                AND PmolTeamRole.CabPersonId IS NOT NULL AND PMolPlannedWorkLabour.PmolId = @PmolId ";

                    var siteManager = dbconnection.Query<SiteManagerParams>(
                        "SELECT CabPersonId AS Id ,cp.FullName AS Name ,hh.BgColor ,hh.FontColor FROM ProjectTeamRole LEFT OUTER JOIN ProjectTeam pt ON ProjectTeamRole.ProjectTeamId = pt.Id LEFT OUTER JOIN CabPerson cp ON ProjectTeamRole.CabPersonId = cp.Id LEFT OUTER JOIN CabPersonCompany cc ON cp.Id = cc.PersonId LEFT OUTER JOIN HRHeader hh ON cc.Id = hh.PersonId WHERE pt.ProjectId = @ProjectId AND ProjectTeamRole.RoleId = 'yyyyyyy-a513-45e0-a431-170dbd4yyyy'",
                        new { ProjectId = project.Id }).FirstOrDefault();
                    if (siteManager != null) project.SiteManager = siteManager;

                    await using var connection = new SqlConnection(project.ProjectConnectionString);

                    IEnumerable<PmolData> pmolList = null;

                    if (VPParameter.ProjectsPmol.CabPersonId != null)
                        pmolList = connection.Query<PmolData>(
                                @"SELECT PMol.Id ,PMol.ProjectMoleculeId ,PMol.Name ,PMol.ForemanMobileNumber ,PMol.ExecutionDate ,PMol.ForemanId ,PMol.Comment ,PMol.IsDeleted ,PMol.TypeId ,PMol.StatusId ,PMol.Title ,PMol.BorId ,PMol.EndDateTime ,PMol.IsFinished ,PMol.StartDateTime ,PMol.IsBreak ,PMol.PmolType ,PMol.ProductId ,PMol.ProjectSequenceCode ,PMol.ParentId ,PMol.ExecutionEndTime ,PMol.ExecutionStartTime ,PMol.LocationId ,PbsProduct.Name AS ProductName FROM dbo.PMol LEFT OUTER JOIN dbo.PbsProduct ON PMol.ProductId = PbsProduct.Id LEFT OUTER JOIN PMolPlannedWorkLabour ppwl ON PMol.Id = ppwl.PmolId LEft OUTER JOIN PmolTeamRole ptr ON ppwl.Id = ptr.PmolLabourId WHERE PMol.IsDeleted = 0 AND PMol.ExecutionDate = @ExecutionDate AND ptr.CabPersonId = @CabPersonId",
                                new { VPParameter.ProjectsPmol.ExecutionDate, VPParameter.ProjectsPmol.CabPersonId })
                            .ToList();

                    if (VPParameter.ProjectsPmol.CabPersonId == null)
                        pmolList = connection.Query<PmolData>(
                            @"SELECT PMol.Id ,PMol.ProjectMoleculeId ,PMol.Name ,PMol.ForemanMobileNumber ,PMol.ExecutionDate ,PMol.ForemanId ,PMol.Comment ,PMol.IsDeleted ,PMol.TypeId ,PMol.StatusId ,PMol.Title ,PMol.BorId ,PMol.EndDateTime ,PMol.IsFinished ,PMol.StartDateTime ,PMol.IsBreak ,PMol.PmolType ,PMol.ProductId ,PMol.ProjectSequenceCode ,PMol.ParentId ,PMol.ExecutionEndTime ,PMol.ExecutionStartTime ,PMol.LocationId ,PbsProduct.Name AS ProductName FROM dbo.PMol LEFT OUTER JOIN dbo.PbsProduct ON PMol.ProductId = PbsProduct.Id WHERE PMol.IsDeleted = 0 AND PMol.ExecutionDate = @ExecutionDate",
                            new { VPParameter.ProjectsPmol.ExecutionDate }).ToList();
                    if (!pmolList.Any()) excludeProjects.Add(project);

                    var rfqPmolList = connection.Query<PmolRfq>("Select * from PmolRfq");

                    foreach (var pmol in pmolList)
                    {
                        var teams = connection.Query<PmolTeamMeber>(teamQuery,
                            new
                            {
                                PmolId = pmol.Id
                            }).ToList();

                        foreach (var person in teams)
                        {
                            person.Name = members.FirstOrDefault(x => x.Id == person.Id).Name;
                            person.CabPersonCompanyId = members.FirstOrDefault(x => x.Id == person.Id).CabPersonCompanyId;
                            person.ProjectSequenceId = project.SequenceCode;
                            person.PmolId = pmol.Id;
                            person.RoleName = roles.FirstOrDefault(x => x.RoleId == person.RoleId)?.RoleName;
                        }

                        pmol.Team = teams.OrderBy(t => t.Name).ToList();
                        projectTeams.AddRange(pmol.Team);

                        var vehicals = connection.Query<PomlVehicle>(vehical,
                                new
                                {
                                    PmolId = pmol.Id
                                })
                            .ToList();

                        var tools = connection.Query<PomlVehicle>(tool,
                                new
                                {
                                    PmolId = pmol.Id
                                })
                            .ToList();

                        var selectProduct = @"with name_tree as
                                                             (SELECT
                                                               PbsProduct.Id
                                                              ,PbsProduct.Name
                                                              ,PbsProduct.Title
                                                              ,PbsProduct.ParentId
                                                             FROM dbo.PbsProduct
                                                             WHERE PbsProduct.Id = @Id
                                                               UNION ALL
                                                               SELECT c.Id, c.Name,CONCAT(c.Title,' > ',p.Title),c.ParentId
                                                               FROM dbo.PbsProduct c
                                                               JOIN name_tree p on p.ParentId = c.ProductId)
                                                               select Title
                                                               from name_tree WHERE ParentId IS NULL";

                        pmol.ProductTaxonomy = connection
                            .Query<string>(selectProduct, new { Id = pmol.ProductId }).FirstOrDefault();

                        pmol.PomlVehical = vehicals;
                        pmol.PomlTool = tools;
                        pmol.ContractingUinit = project.ContractingUnitId;
                        pmol.ProjectTitle = project.Title;
                        pmol.ProjectManager = dbconnection
                            .Query<string>("SELECT FullName FROM CabPerson  WHERE Id = @Id",
                                new { Id = project.ProjectManagerId }).FirstOrDefault();

                        if (pmol.LocationId != null && pmol.ExecutionStartTime != null)
                        {
                            var mapLocation = connection
                                .Query<Position>(
                                    "SELECT * FROM Position LEFT OUTER JOIN MapLocation ml ON Position.Id = ml.PositionId WHERE ml.Id = @Id",
                                    new { Id = pmol.LocationId }).FirstOrDefault();

                            if (mapLocation != null)
                                if (mapLocation.Lat != "0" || mapLocation.Lon != "0")
                                {
                                    var forecast = await VPParameter._iShiftRepository.GetWeatherForecast(
                                        mapLocation.Lat.ToDouble(), mapLocation.Lon.ToDouble(),
                                        DateTime.Parse(pmol.ExecutionDate), pmol.ExecutionStartTime,
                                        VPParameter.TenantProvider, VPParameter.Configuration);


                                    pmol.Forecast = forecast;
                                }
                        }

                        pmol.IsRFQGenerated = rfqPmolList.Any(x => x.PmolId == pmol.Id);
                    }

                    teamsData.AddRange(pmolList);
                    project.Team = projectTeams.DistinctBy(x => x.Id).ToList();
                    project.ProjectConnectionString = null;
                }
                catch (Exception ex)
                {
                    var mDatabasesException = new DatabasesException();
                    mDatabasesException.DatabaseName = project.SequenceCode;
                    mDatabasesException.Exception = ex;
                    exceptionLst.Add(mDatabasesException);
                }


        db = db.Except(excludeProjects).ToList();
        
        if (VPParameter.ProjectsPmol.SiteManagerId != null)
        {
            db = db.Where(x => x.SiteManager != null).ToList();

            db = db.Where(x => x.SiteManager.Id == VPParameter.ProjectsPmol.SiteManagerId).ToList();
        }
        teamsWithPmol.Projects = db;
        teamsWithPmol.Pmol = teamsData;
        teamsWithPmol.IsRfqGenerated = teamsData.Any(x => x.IsRFQGenerated == false);


        return teamsWithPmol;
    }

    public async Task<List<ProjectDefinition>> GetProjectsForProjectsDayPlanning(VPParameter VPParameter)
    {
        var selectProject =
            @"SELECT ProjectDefinition.Title,ProjectDefinition.SequenceCode,ProjectDefinition.ProjectConnectionString ,CabCompany.SequenceCode AS ContractingUnitId FROM dbo.ProjectDefinition LEFT OUTER JOIN CabCompany ON ProjectDefinition.ContractingUnitId = CabCompany.Id WHERE ProjectDefinition.IsDeleted = 0 AND ProjectManagerId = (SELECT PersonId FROM CabPersonCompany WHERE Oid = @Oid) ORDER BY ProjectDefinition.SequenceCode";
        await using var dbconnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);
        var projects = dbconnection
            .Query<ProjectDefinition>(
                selectProject, new { Oid = VPParameter.UserId })
            .ToList();

        return projects;
    }

    public async Task<List<DayPlanningFilter>> DayPlanningFilterForProjectDayPlanning(VPParameter VPParameter)
    {
        try
        {
            var mDayPlanningFilter = new List<DayPlanningFilter>();

            if (VPParameter.DayPlanningFilterDto.Project == null)
            {
                var selectProject =
                    @"SELECT ProjectDefinition.Title, ProjectDefinition.ProjectConnectionString,ProjectDefinition.SequenceCode,CabCompany.SequenceCode AS ContractingUnitId FROM dbo.ProjectDefinition LEFT OUTER JOIN CabCompany ON ProjectDefinition.ContractingUnitId = CabCompany.Id WHERE  ProjectDefinition.IsDeleted = 0 AND ProjectDefinition.ProjectManagerId = (SELECT PersonId FROM CabPersonCompany WHERE Oid = @Oid) ";

                var sb2 = new StringBuilder(selectProject);

                if (VPParameter.DayPlanningFilterDto.ContractingUnit.Any())
                    sb2.Append(
                        " And CabCompany.SequenceCode IN @ContractingUnits ORDER BY ProjectDefinition.SequenceCode ");
                else
                    sb2.Append(" ORDER BY ProjectDefinition.SequenceCode ");


                CabCompany mCabCompany;
                var mProjectDefinition = new List<ProjectDefinition>();
                await using (var connection =
                             new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
                {
                    mProjectDefinition = connection
                        .Query<ProjectDefinition>(selectProject,
                            new
                            {
                                ContractingUnits = VPParameter.DayPlanningFilterDto.ContractingUnit,
                                Oid = VPParameter.UserId
                            }).ToList();
                }

                var selectPmol =
                    @"SELECT PMol.Id ,PMol.ProjectMoleculeId ,PMol.Name ,PMol.ForemanMobileNumber ,PMol.ExecutionDate ,PMol.ForemanId ,PMol.Comment ,PMol.IsDeleted ,PMol.TypeId ,PMol.StatusId ,PMol.Title ,PMol.BorId ,PMol.EndDateTime ,PMol.IsFinished ,PMol.StartDateTime ,PMol.IsBreak ,PMol.PmolType ,PMol.ProductId ,PMol.ProjectSequenceCode ,PMol.ParentId ,PMol.ExecutionEndTime ,PMol.ExecutionStartTime ,PMol.LocationId ,PbsProduct.Name AS ProductName FROM dbo.PMol LEFT OUTER JOIN dbo.PbsProduct ON PMol.ProductId = PbsProduct.Id WHERE PMol.IsDeleted = 0 AND PMol.ExecutionDate IS NULL";
                var sb = new StringBuilder(selectPmol);

                if (VPParameter.DayPlanningFilterDto.PmolStatus != null) sb.Append(" AND StatusId = @Status");

                sb.Append(" ORDER BY PbsProduct.ProductId,ProjectMoleculeId");
                foreach (var n in mProjectDefinition)
                {
                    var mPMol = new List<DayPlanPmol>();

                    await using (var connection =
                                 new SqlConnection(n.ProjectConnectionString))
                    {
                        mPMol = connection.Query<DayPlanPmol>(sb.ToString(),
                            new { Status = VPParameter.DayPlanningFilterDto.PmolStatus }).ToList();
                    }

                    var dayPlanningFilter = new DayPlanningFilter();
                    if (mPMol.Any())
                    {
                        foreach (var r in mPMol)
                        {
                            r.ContractingUinit = n.ContractingUnitId;
                            r.ProjectSequenceCode = n.SequenceCode;
                        }

                        dayPlanningFilter.Project = n.Title;
                        //dayPlanningFilter.Pmol = mPMol;
                        mDayPlanningFilter.Add(dayPlanningFilter);
                    }
                }
            }
            else
            {
                var selectProject =
                    @"SELECT ProjectDefinition.Title, ProjectDefinition.ProjectConnectionString, CabCompany.SequenceCode AS ContractingUnitId FROM dbo.ProjectDefinition LEFT OUTER JOIN CabCompany ON ProjectDefinition.ContractingUnitId = CabCompany.Id WHERE ProjectDefinition.IsDeleted = 0 AND ProjectDefinition.SequenceCode = @Id  ORDER BY ProjectDefinition.SequenceCode";

                var mProjectDefinition = new List<ProjectDefinition>();
                using (var connection =
                       new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
                {
                    mProjectDefinition = connection.Query<ProjectDefinition>(selectProject,
                        new { Id = VPParameter.DayPlanningFilterDto.Project }).ToList();
                }

                foreach (var n in mProjectDefinition)
                {
                    var mPMol = new List<DayPlanPmol>();
                    var selectPmol =
                        @"SELECT PMol.Id ,PMol.ProjectMoleculeId ,PMol.Name ,PMol.ForemanMobileNumber ,PMol.ExecutionDate ,PMol.ForemanId ,PMol.Comment ,PMol.IsDeleted ,PMol.TypeId ,PMol.StatusId ,PMol.Title ,PMol.BorId ,PMol.EndDateTime ,PMol.IsFinished ,PMol.StartDateTime ,PMol.IsBreak ,PMol.PmolType ,PMol.ProductId ,PMol.ProjectSequenceCode ,PMol.ParentId ,PMol.ExecutionEndTime ,PMol.ExecutionStartTime ,PMol.LocationId ,PbsProduct.Name AS ProductName FROM dbo.PMol LEFT OUTER JOIN dbo.PbsProduct ON PMol.ProductId = PbsProduct.Id WHERE PMol.IsDeleted = 0 AND PMol.ExecutionDate IS NULL";
                    var sb = new StringBuilder(selectPmol);

                    if (VPParameter.DayPlanningFilterDto.PmolStatus != null) sb.Append(" AND StatusId = @Status");

                    sb.Append(" ORDER BY PbsProduct.ProductId,ProjectMoleculeId");
                    using (var connection =
                           new SqlConnection(n.ProjectConnectionString))
                    {
                        mPMol = connection.Query<DayPlanPmol>(sb.ToString(),
                            new { Status = VPParameter.DayPlanningFilterDto.PmolStatus }).ToList();
                    }

                    var dayPlanningFilter = new DayPlanningFilter();
                    if (mPMol.Any())
                    {
                        foreach (var r in mPMol)
                        {
                            r.ContractingUinit = n.ContractingUnitId;
                            r.ProjectSequenceCode = n.SequenceCode;
                        }

                        dayPlanningFilter.Project = n.Title;
                        //dayPlanningFilter.Pmol = mPMol;
                        mDayPlanningFilter.Add(dayPlanningFilter);
                    }
                }
            }


            return mDayPlanningFilter;
        }
        catch (Exception e)
        {
            //Console.WriteLine(e);
            throw;
        }
    }

    public async Task<string> PmolExecutionDateSet(VPParameter VPParameter)
    {
        if (VPParameter.PmolDrag.ProjectSequenceCode != null)
        {
            var connectionString = ConnectionString.MapConnectionString(
                VPParameter.PmolDrag.ContractingUnit,
                VPParameter.PmolDrag.ProjectSequenceCode, VPParameter.TenantProvider);

            await using var connection = new SqlConnection(connectionString);

            await connection.ExecuteAsync(
                "Update PMol Set ExecutionDate = @ExecutionDate , ExecutionStartTime = @ExecutionStartTime , ExecutionEndTime = @ExecutionEndTime Where ProjectMoleculeId = @PmolId ",
                new
                {
                    VPParameter.PmolDrag.PmolId, VPParameter.PmolDrag.ExecutionDate, ExecutionStartTime = "8:00",
                    ExecutionEndTime = "17:00"
                });
        }

        return VPParameter.PmolDrag.PmolId;
    }

    public async Task<string> UpdatePmolStartEndDate(VPParameter VPParameter)
    {
        if (VPParameter.PmolDrag.ProjectSequenceCode != null)
        {
            var connectionString = ConnectionString.MapConnectionString(
                VPParameter.PmolDrag.ContractingUnit,
                VPParameter.PmolDrag.ProjectSequenceCode, VPParameter.TenantProvider);

            await using var connection = new SqlConnection(connectionString);

            await connection.ExecuteAsync(
                "Update PMol Set ExecutionStartTime = @ExecutionStartTime , ExecutionEndTime = @ExecutionEndTime  Where ProjectMoleculeId = @PmolId ",
                new
                {
                    VPParameter.PmolDrag.PmolId, VPParameter.PmolDrag.ExecutionStartTime,
                    VPParameter.PmolDrag.ExecutionEndTime
                });
            
            await using var dbConnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);

            var teamId = dbConnection
                .Query<string>(@"SELECT OrganizationTeamId FROM dbo.OrganizationTeamPmol WHERE PmolId = @Id", new {VPParameter.PmolDrag.Id })
                .FirstOrDefault();

            if (teamId != null)
            {
                var pmolLabourId = connection.Query<string>(@"SELECT Id FROM dbo.PMolPlannedWorkLabour WHERE PmolId = @Id", new { VPParameter.PmolDrag.Id }).FirstOrDefault();
                if (VPParameter.PmolDrag.ExecutionDate != null)
                    await UpdateLabourRequiredTime(VPParameter, teamId, pmolLabourId, connectionString,
                        VPParameter.PmolDrag.ExecutionDate.Value,false);
            }
        }

        return VPParameter.PmolDrag.PmolId;
    }

    public async Task<string> AddTeamMemberToProjectPmols(VPParameter VPParameter)
    {
        if (VPParameter.AddTeamMember.ProjectSequenceCode != null)
        {
            var connectionString = ConnectionString.MapConnectionString(
                VPParameter.AddTeamMember.ContractingUnit,
                VPParameter.AddTeamMember.ProjectSequenceCode, VPParameter.TenantProvider);

            var cuConnectionString = ConnectionString.MapConnectionString(
                VPParameter.AddTeamMember.ContractingUnit,
                null, VPParameter.TenantProvider);

            await using var connection = new SqlConnection(connectionString);

            await using var dbConnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);
            await using var cuConnection = new SqlConnection(cuConnectionString);


            var projectId = dbConnection.Query<ProjectDefinition>(
                "Select * From ProjectDefinition Where SequenceCode = @SequenceCode",
                new { SequenceCode = VPParameter.AddTeamMember.ProjectSequenceCode }).FirstOrDefault();

            var cabPersonOid = dbConnection
                .Query<string>("SELECT Oid FROM dbo.CabPersonCompany  WHERE PersonId = @PersonId",
                    new { VPParameter.AddTeamMember.PersonId })
                .FirstOrDefault();

            var isProjectMember = dbConnection.Query<string>(
                "SELECT ProjectTeamRole.Id FROM ProjectTeamRole LEFT OUTER JOIN ProjectTeam pt ON ProjectTeamRole.ProjectTeamId = pt.Id WHERE pt.ProjectId = @projectId AND ProjectTeamRole.CabPersonId = @personId",
                new { projectId = projectId.Id, personId = VPParameter.AddTeamMember.PersonId });

            if (!isProjectMember.Any())
            {
                var existingUserRole = dbConnection
                    .Query<UserRole>("Select * from UserRole WHERE ApplicationUserOid = @Id AND RoleId = @RoleId",
                        new { Id = cabPersonOid, RoleId = "4837043c-119c-47e1-bbf2-1f32557fdf30" }).FirstOrDefault();
                string userRoleId = null;
                if (existingUserRole != null)
                {
                    userRoleId = existingUserRole.Id;
                }
                else
                {
                    var userRoleSql = @"INSERT INTO dbo.UserRole
                                            (
                                              Id
                                             ,RoleId
                                             ,ApplicationUserOid
                                            )
                                            VALUES
                                            (
                                              @Id
                                             ,@RoleId
                                             ,@ApplicationUserOid
                                            )";

                    var userRole = new UserRole
                    {
                        ApplicationUserOid = cabPersonOid,
                        Id = Guid.NewGuid().ToString(),
                        RoleId = "4837043c-119c-47e1-bbf2-1f32557fdf30" //user
                    };

                    await dbConnection.ExecuteAsync(userRoleSql, userRole);
                    userRoleId = userRole.Id;
                }


                var insertQuery = @"INSERT INTO dbo.ProjectTeamRole
                    (
                        Id
                        ,ProjectTeamId
                        ,CabPersonId
                        ,RoleId
                        ,status
                        ,IsAccessGranted
                    )
                    VALUES
                    (
                        @Id
                        ,@ProjectTeamId
                        ,@CabPersonId
                        ,@RoleId
                        ,@status
                        ,@IsAccessGranted
                    )";

                var isTeamExist = dbConnection
                    .Query<ProjectTeam>("Select * FROM ProjectTeam Where ProjectId = @ProjectId",
                        new { ProjectId = projectId.Id }).FirstOrDefault();

                if (isTeamExist != null)
                {
                    var param1 = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        ProjectTeamId = isTeamExist.Id,
                        CabPersonId = VPParameter.AddTeamMember.PersonId,
                        RoleId = "4837043c-119c-47e1-bbf2-1f32557fdf30", //user
                        status = "2",
                        IsAccessGranted = true
                    };

                    await dbConnection.ExecuteAsync(insertQuery, param1);
                }
                else
                {
                    var insertProjectTeam = @"INSERT INTO dbo.ProjectTeam
                                                (
                                                  Id
                                                 ,ContractingUnitId
                                                 ,ProjectId
                                                )
                                                VALUES
                                                (
                                                 @Id
                                                 ,@ContractingUnitId
                                                 ,@ProjectId
                                                )";

                    var param2 = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        projectId.ContractingUnitId,
                        ProjectId = projectId.Id
                    };

                    await dbConnection.ExecuteAsync(insertProjectTeam, param2);

                    var param1 = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        ProjectTeamId = param2.Id,
                        CabPersonId = VPParameter.AddTeamMember.PersonId,
                        RoleId = "4837043c-119c-47e1-bbf2-1f32557fdf30", //user
                        status = "2",
                        IsAccessGranted = true
                    };

                    await dbConnection.ExecuteAsync(insertQuery, param1);
                }


                var roleSql = @"INSERT INTO dbo.ProjectUserRole
                                            (
                                              Id
                                             ,ProjectDefinitionId
                                             ,UsrRoleId
                                            )
                                            VALUES 
                                            (
                                             @Id
                                             ,@ProjectDefinitionId
                                             ,@UsrRoleId
                                            )";

                var existingProjectRole = dbConnection
                    .Query<ProjectUserRole>(
                        "Select * From ProjectUserRole Where UsrRoleId = @UsrRoleId AND ProjectDefinitionId = @ProjectDefinitionId",
                        new { UsrRoleId = userRoleId, ProjectDefinitionId = projectId.Id })
                    .FirstOrDefault();

                if (existingProjectRole == null)
                {
                    var projectUserRole = new ProjectUserRole
                    {
                        Id = Guid.NewGuid().ToString(),
                        ProjectDefinitionId = projectId.Id,
                        UsrRoleId = userRoleId
                    };

                    await dbConnection.ExecuteAsync(roleSql, projectUserRole);
                }
            }


            var pmolList = connection.Query<PmolData>(
                @"SELECT PMol.Id ,PMol.ProjectMoleculeId ,PMol.Name ,PMol.ForemanMobileNumber ,PMol.ExecutionDate ,PMol.ForemanId ,PMol.Comment ,PMol.IsDeleted ,PMol.TypeId ,PMol.StatusId ,PMol.Title ,PMol.BorId ,PMol.EndDateTime ,PMol.IsFinished ,PMol.StartDateTime ,PMol.IsBreak ,PMol.PmolType ,PMol.ProductId ,PMol.ProjectSequenceCode ,PMol.ParentId ,PMol.ExecutionEndTime ,PMol.ExecutionStartTime ,PMol.LocationId ,PbsProduct.Name AS ProductName FROM dbo.PMol LEFT OUTER JOIN dbo.PbsProduct ON PMol.ProductId = PbsProduct.Id WHERE PMol.IsDeleted = 0 AND PMol.ExecutionDate = @ExecutionDate ",
                new { VPParameter.AddTeamMember.ExecutionDate });

            foreach (var item in pmolList)
            {
                var isExistPmolTeam = connection.Query<string>(
                    "SELECT PmolTeamRole.Id FROM  PmolTeamRole  LEFT OUTER JOIN PMolPlannedWorkLabour ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id WHERE PMolPlannedWorkLabour.PmolId = @pmolId AND PmolTeamRole.CabPersonId = @personId AND PmolTeamRole.IsDeleted = 0 AND PMolPlannedWorkLabour.IsDeleted = 0",
                    new { pmolId = item.Id, personId = VPParameter.AddTeamMember.PersonId });

                var startTime = item.ExecutionStartTime;
                var endTime = item.ExecutionEndTime;

                double pmolTime;
                if (startTime != null && endTime != null)
                {
                    var d1 = DateTime.Parse(endTime) - DateTime.Parse(startTime);

                    pmolTime = d1.TotalHours;
                }
                else
                {
                    pmolTime = 0;
                }

                if (!isExistPmolTeam.Any())
                {
                    var pmolTimeInsert =
                        @"INSERT INTO dbo.PmolAssignTime ( Id ,CabPersonId ,PmolId ,ExecutionDate ,ProjectSequenceId ,AssignTime ) VALUES ( @Id ,@CabPersonId ,@PmolId ,@ExecutionDate ,@ProjectSequenceId ,@AssignTime )";

                    var labourItem = connection.Query<string>(
                        "Select Id From PMolPlannedWorkLabour Where PmolId = @PmolId AND IsDeleted = 0 ",
                        new { PmolId = item.Id });

                    if (labourItem.Any())
                    {
                        var insertSql =
                            @"INSERT INTO dbo.PmolTeamRole ( Id ,CabPersonId ,RoleId ,RequiredQuantity ,ConsumedQuantity ,Type ,PmolLabourId ,IsDeleted ) VALUES ( @Id ,@CabPersonId ,@RoleId ,0.0 ,0.0 ,@Type ,@PmolLabourId ,0 )";


                        var teamParam = new
                        {
                            Id = Guid.NewGuid().ToString(),
                            CabPersonId = VPParameter.AddTeamMember.PersonId,
                            RoleId = "4837043c-119c-47e1-bbf2-1f32557fdf30", //user
                            Type = "Planned",
                            PmolLabourId = labourItem.FirstOrDefault()
                        };

                        var timeParam = new
                        {
                            Id = Guid.NewGuid().ToString(),
                            CabPersonId = VPParameter.AddTeamMember.PersonId,
                            PmolId = item.Id,
                            ExecutionDate = DateTime.Parse(item.ExecutionDate),
                            ProjectSequenceId = VPParameter.AddTeamMember.ProjectSequenceCode,
                            AssignTime = pmolTime.ToString()
                        };

                        await connection.ExecuteAsync(insertSql, teamParam);
                        await cuConnection.ExecuteAsync(pmolTimeInsert, timeParam);
                    }
                    else
                    {
                        var labourInsertSql =
                            @"INSERT INTO dbo.PMolPlannedWorkLabour ( Id ,CoperateProductCatalogId ,RequiredQuantity ,ConsumedQuantity ,CpcBasicUnitofMeasureId ,PmolId ,Type ,IsDeleted ) VALUES ( @Id ,@CoperateProductCatalogId ,0.0 ,0.0 ,@CpcBasicUnitofMeasureId ,@PmolId ,@Type ,0 )";

                        var labourTeamParam = new
                        {
                            Id = Guid.NewGuid().ToString(),
                            CoperateProductCatalogId = VPParameter.Configuration.GetValue<string>("DefaultCpc"),
                            CpcBasicUnitofMeasureId = "cce5fd6a-91e1-4fc0-b3f6-2c462eaf2500",
                            PmolId = item.Id,
                            Type = "Planned"
                        };

                        await connection.ExecuteAsync(labourInsertSql, labourTeamParam);

                        var insertSql =
                            @"INSERT INTO dbo.PmolTeamRole ( Id ,CabPersonId ,RoleId ,RequiredQuantity ,ConsumedQuantity ,Type ,PmolLabourId ,IsDeleted ) VALUES ( @Id ,@CabPersonId ,@RoleId ,0.0 ,0.0 ,@Type ,@PmolLabourId ,0 )";

                        var teamParam = new
                        {
                            Id = Guid.NewGuid().ToString(),
                            CabPersonId = VPParameter.AddTeamMember.PersonId,
                            RoleId = "4837043c-119c-47e1-bbf2-1f32557fdf30",
                            Type = "Planned",
                            PmolLabourId = labourTeamParam.Id
                        };

                        await connection.ExecuteAsync(insertSql, teamParam);

                        var timeParam = new
                        {
                            Id = Guid.NewGuid().ToString(),
                            CabPersonId = VPParameter.AddTeamMember.PersonId,
                            PmolId = item.Id,
                            ExecutionDate = DateTime.Parse(item.ExecutionDate),
                            ProjectSequenceId = VPParameter.AddTeamMember.ProjectSequenceCode,
                            AssignTime = pmolTime.ToString()
                        };

                        await cuConnection.ExecuteAsync(pmolTimeInsert, timeParam);
                    }
                }
            }
        }

        return VPParameter.AddTeamMember.ProjectSequenceCode;
    }

    public async Task<string> AddMultipleMembersToPmol(VPParameter VPParameter,bool isPmol)
    {
        VPParameter.IsPmol = isPmol;
        var connectionString = ConnectionString.MapConnectionString(
            VPParameter.AddMutipleTeamMembers.ContractingUnit,
            VPParameter.AddMutipleTeamMembers.ProjectSequenceCode, VPParameter.TenantProvider);
        
        var cuConnectionString = ConnectionString.MapConnectionString(
            VPParameter.AddMutipleTeamMembers.ContractingUnit,
            null, VPParameter.TenantProvider);

        await using var connection = new SqlConnection(connectionString);
        
        await using var dbconnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);
        
        await using var cuConnection = new SqlConnection(cuConnectionString);


        string buIdQuery = @"SELECT
                              ProjectClassification.ProjectClassificationBuisnessUnit
                            FROM dbo.ProjectDefinition
                            LEFT OUTER JOIN dbo.ProjectClassification
                              ON ProjectDefinition.Id = ProjectClassification.ProjectId
                            WHERE ProjectDefinition.SequenceCode = @ProjectSequenceCode";

        var buId = dbconnection.Query<string>(buIdQuery, new {VPParameter.AddMutipleTeamMembers.ProjectSequenceCode}).FirstOrDefault();
        
        const string thisWeekTeamsSql = @"SELECT
                                          ParentId
                                         ,PersonId
                                        FROM OrganizationTaxonomy
                                        WHERE PersonId IS NOT NULL
                                        AND ParentId IN (SELECT Id FROM dbo.OrganizationTaxonomy WHERE ParentId = @buId AND (EndDate = @EndDate OR EndDate IS NULL))
                                        AND OrganizationTaxonomyLevelId = 'we10e768-3e06-po02-b337-ee367a82adwe'
                                        ORDER BY ModifiedDate";
        
        var param1 = new
        {
            StartDate = VPParameter.AddMutipleTeamMembers.ExecutionDate
                .AddDays(-(int)VPParameter.AddMutipleTeamMembers.ExecutionDate.DayOfWeek + 1).Date,
            EndDate = VPParameter.AddMutipleTeamMembers.ExecutionDate
                .AddDays(-(int)VPParameter.AddMutipleTeamMembers.ExecutionDate.DayOfWeek + 1).AddDays(6).Date,
            VPParameter.AddMutipleTeamMembers.PmolId,
            buId
        };

        var thisWeekTeamsData = dbconnection.Query<OrganizationTaxonomy>(thisWeekTeamsSql, param1).ToList();

        var newTeamPersonData = VPParameter.AddMutipleTeamMembers.Team.Select(e => e.CabPersonCompanyId).ToList();

        const string pmolCurrentPersonSql = @"SELECT
                                                  OrganizationTaxonomy.PersonId
                                                FROM dbo.OrganizationTaxonomy
                                                WHERE ParentId = (SELECT TOP(1) OrganizationTeamId FROM OrganizationTeamPmol WHERE PmolId = @PmolId AND OrganizationTeamPmol.ExecutionDate BETWEEN @Startdate AND @Enddate AND OrganizationTeamId IS NOT NULL ORDER BY ExecutionDate DESC)";

        var pmolCurrentPersonData = dbconnection.Query<string>(pmolCurrentPersonSql, param1).ToList();

        if (pmolCurrentPersonData.Any())
        {
            await dbconnection.ExecuteAsync(@"DELETE FROM dbo.OrganizationTeamPmol WHERE PmolId = @PmolId", param1);
        }
        
        //newTeamPersonData.AddRange(pmolCurrentPersonData);

        var groupThisWeekTeamsData = thisWeekTeamsData.GroupBy(e => e.ParentId);

        var check = false;
        
        string teamId = null;
        foreach (var i in groupThisWeekTeamsData)
        {
            var a = i.Select(e => e.PersonId).ToList();
            
            check = a.All(newTeamPersonData.Contains) && a.Count == newTeamPersonData.Count;

            if (check)
            {
                teamId = i.Key;
                break;
            }
        }

        if (check)
        {
            
            var addTeamMembers = VPParameter.AddMutipleTeamMembers.Team.Select(i => new AddTeamMember
            {
                CabPersonCompanyId = i.CabPersonCompanyId,
                PersonId = i.PersonId,
                ProjectSequenceCode = VPParameter.AddMutipleTeamMembers.ProjectSequenceCode,
                ContractingUnit = VPParameter.AddMutipleTeamMembers.ContractingUnit,
                PmolId = VPParameter.AddMutipleTeamMembers.PmolId,
                ExecutionDate = VPParameter.AddMutipleTeamMembers.ExecutionDate,
                IsExist = i.IsExist,
                RoleId  = i.RoleId
            });

            if (!isPmol)
            {
                await connection.ExecuteAsync("UPDATE dbo.PMolPlannedWorkLabour SET IsDeleted = 1 WHERE PmolId = @PmolId;UPDATE dbo.PmolTeamRole SET IsDeleted = 1 WHERE PmolLabourId IN (SELECT Id FROM PMolPlannedWorkLabour WHERE PmolId = @PmolId);",
                    new {VPParameter.AddMutipleTeamMembers.PmolId});
                
                foreach (var addTeamMember in addTeamMembers)
                {
                    VPParameter.AddTeamMember = addTeamMember;

                    await AddTeamMemberToPmolPmolChanges(VPParameter);
                }
            }
            else
            {
                var pmolTimeInsert =
                    @"INSERT INTO dbo.PmolAssignTime ( Id ,CabPersonId ,PmolId ,ExecutionDate ,ProjectSequenceId ,AssignTime ) VALUES ( @Id ,@CabPersonId ,@PmolId ,@ExecutionDate ,@ProjectSequenceId ,@AssignTime )";
                
                var item = connection
                    .Query<Pmol>("Select * from Pmol Where Id = @Id", new { Id = VPParameter.AddMutipleTeamMembers.PmolId })
                    .FirstOrDefault();

                var startTime = item?.ExecutionStartTime;
                var endTime = item?.ExecutionEndTime;

                double pmolTime;
                if (startTime != null && endTime != null)
                {
                    var d1 = DateTime.Parse(endTime) - DateTime.Parse(startTime);
                    pmolTime = d1.TotalHours;
                }
                else
                {
                    pmolTime = 0;
                }
                
                foreach (var addTeamMember in VPParameter.AddMutipleTeamMembers.Team)
                {
                    if (addTeamMember.IsExist == false)
                    {
                        
                        var timeParam = new
                        {
                            Id = Guid.NewGuid().ToString(),
                            CabPersonId = addTeamMember.PersonId,
                            VPParameter.AddMutipleTeamMembers.PmolId,
                            item?.ExecutionDate,
                            ProjectSequenceId = VPParameter.AddMutipleTeamMembers.ProjectSequenceCode,
                            AssignTime = pmolTime.ToString()
                        };

                        await cuConnection.ExecuteAsync(pmolTimeInsert, timeParam);
                    }
                }
                
            }
            
            var insert =
                @"INSERT INTO OrganizationTeamPmol ( Id ,OrganizationTeamId ,PmolId ,ExecutionDate ,ContractingUnit ,Project ) VALUES ( @Id ,@OrganizationTeamId ,@PmolId ,@ExecutionDate,@ContractingUnit ,@Project)";

            var param = new
            {
                Id = Guid.NewGuid(),
                OrganizationTeamId = teamId,
                VPParameter.AddMutipleTeamMembers.PmolId,
                VPParameter.AddMutipleTeamMembers.ExecutionDate,
                VPParameter.AddMutipleTeamMembers.ContractingUnit,
                Project = VPParameter.AddMutipleTeamMembers.ProjectSequenceCode
            };

            await dbconnection.ExecuteAsync(insert, param);
        }

        else
        {
            await connection.ExecuteAsync("UPDATE dbo.PMolPlannedWorkLabour SET IsDeleted = 1 WHERE PmolId = @PmolId;UPDATE dbo.PmolTeamRole SET IsDeleted = 1 WHERE PmolLabourId IN (SELECT Id FROM PMolPlannedWorkLabour WHERE PmolId = @PmolId);",
                new {VPParameter.AddMutipleTeamMembers.PmolId});
            
            var addTeamMembers = VPParameter.AddMutipleTeamMembers.Team.Select(i => new AddTeamMember
            {
                CabPersonCompanyId = i.CabPersonCompanyId,
                PersonId = i.PersonId,
                ProjectSequenceCode = VPParameter.AddMutipleTeamMembers.ProjectSequenceCode,
                ContractingUnit = VPParameter.AddMutipleTeamMembers.ContractingUnit,
                PmolId = VPParameter.AddMutipleTeamMembers.PmolId,
                ExecutionDate = VPParameter.AddMutipleTeamMembers.ExecutionDate,
                IsExist = i.IsExist,
                RoleId = i.RoleId
            });

            foreach (var addTeamMember in addTeamMembers)
            {
                VPParameter.AddTeamMember = addTeamMember;
                await AddTeamMemberToPmol(VPParameter);
            }
            
        }
        
        var labourItem = connection.Query<string>(
            "Select Id From PMolPlannedWorkLabour Where PmolId = @PmolId AND IsDeleted = 0 ",
            new { VPParameter.AddMutipleTeamMembers.PmolId }).FirstOrDefault();

        var pmolTeamId = dbconnection.Query<string>(@"SELECT OrganizationTeamId FROM dbo.OrganizationTeamPmol WHERE PmolId = @PmolId", new {VPParameter.AddMutipleTeamMembers.PmolId}).FirstOrDefault();
        
        await UpdateLabourRequiredTime(VPParameter,pmolTeamId,labourItem,connectionString,VPParameter.AddMutipleTeamMembers.ExecutionDate,true);

        return VPParameter.AddMutipleTeamMembers.ProjectSequenceCode;
    }

    public async Task<string> AddTeamMemberToPmol(VPParameter VPParameter)
    {
        if (VPParameter.AddTeamMember.ProjectSequenceCode != null)
        {
            await AddTeamMemberToPmolPmolChanges(VPParameter);
            
            var connectionString = ConnectionString.MapConnectionString(
                VPParameter.AddTeamMember.ContractingUnit,
                VPParameter.AddTeamMember.ProjectSequenceCode, VPParameter.TenantProvider);

            var cuConnectionString = ConnectionString.MapConnectionString(
                VPParameter.AddTeamMember.ContractingUnit,
                null, VPParameter.TenantProvider);
            await using var connection = new SqlConnection(connectionString);

            await using var cuConnection = new SqlConnection(cuConnectionString);


            await using var dbConnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);
            
            var selectTeam = @"SELECT OrganizationTeamId FROM dbo.OrganizationTeamPmol WHERE PmolId = @Id";

            var teamID = dbConnection.Query<string>(selectTeam, new { Id = VPParameter.AddTeamMember.PmolId })
                .FirstOrDefault();

            var name = dbConnection.Query<string>("SELECT FullName FROM dbo.CabPerson WHERE Id = @Id",
                new { Id = VPParameter.AddTeamMember.PersonId }).FirstOrDefault();

            var mPmolAssignDayPanningDto = new PmolAssignDayPanningDto
            {
                TeamId = teamID,
                ProjectSequenceCode = VPParameter.AddTeamMember.ProjectSequenceCode,
                PersonId = VPParameter.AddTeamMember.PersonId,
                PersonName = name,
                ContractingUnit = VPParameter.AddTeamMember.ContractingUnit,
                ExecutionDate = VPParameter.AddTeamMember.ExecutionDate,
                CabPersonCompanyId = VPParameter.AddTeamMember.CabPersonCompanyId
            };

            VPParameter.PmolAssignDayPanningDto = mPmolAssignDayPanningDto;

            var newTeamId = await CreateNewTeamProjectPlanning(VPParameter);

            if (newTeamId != teamID)
            {
                var pmol = connection
                    .Query<Pmol>(
                        "SELECT ExecutionDate,ExecutionStartTime,ExecutionEndTime FROM dbo.PMol WHERE Id = @Id",
                        new { Id = VPParameter.AddTeamMember.PmolId }).FirstOrDefault();
                if (pmol != null)
                {
                    var insert =
                        @"INSERT INTO OrganizationTeamPmol ( Id ,OrganizationTeamId ,PmolId ,ExecutionDate ,StartTime ,EndTime ,ContractingUnit ,Project ) VALUES ( @Id ,@OrganizationTeamId ,@PmolId ,@ExecutionDate ,@StartTime ,@EndTime ,@ContractingUnit ,@Project)";

                    var param = new
                    {
                        Id = Guid.NewGuid(),
                        OrganizationTeamId = newTeamId,
                        VPParameter.AddTeamMember.PmolId,
                        pmol.ExecutionDate,
                        StartTime = pmol.ExecutionStartTime,
                        EndTime = pmol.ExecutionEndTime,
                        VPParameter.AddTeamMember.ContractingUnit,
                        Project = VPParameter.AddTeamMember.ProjectSequenceCode
                    };

                    var day = VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek.ToString();

                    await dbConnection.ExecuteAsync(insert, param);
                }
            }
        }


        return VPParameter.AddTeamMember.ProjectSequenceCode;
    }

    public async Task<string> AddTeamMemberToPmolPmolChanges(VPParameter VPParameter)
    {
        
            var connectionString = ConnectionString.MapConnectionString(
                VPParameter.AddTeamMember.ContractingUnit,
                VPParameter.AddTeamMember.ProjectSequenceCode, VPParameter.TenantProvider);

            var cuConnectionString = ConnectionString.MapConnectionString(
                VPParameter.AddTeamMember.ContractingUnit,
                null, VPParameter.TenantProvider);
            await using var connection = new SqlConnection(connectionString);

            await using var cuConnection = new SqlConnection(cuConnectionString);


            await using var dbConnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);

            var projectId = dbConnection.Query<ProjectDefinition>(
                "Select * From ProjectDefinition Where SequenceCode = @SequenceCode",
                new { SequenceCode = VPParameter.AddTeamMember.ProjectSequenceCode }).FirstOrDefault();

            var cabPersonOid = dbConnection
                .Query<string>("SELECT Oid FROM dbo.CabPersonCompany  WHERE PersonId = @PersonId",
                    new { VPParameter.AddTeamMember.PersonId })
                .FirstOrDefault();

            var isProjectMember = dbConnection.Query<string>(
                "SELECT ProjectTeamRole.Id FROM ProjectTeamRole LEFT OUTER JOIN ProjectTeam pt ON ProjectTeamRole.ProjectTeamId = pt.Id WHERE pt.ProjectId = @projectId AND ProjectTeamRole.CabPersonId = @personId",
                new { projectId = projectId.Id, personId = VPParameter.AddTeamMember.PersonId });

            if (!isProjectMember.Any())
            {
                var existingUserRole = dbConnection
                    .Query<UserRole>("Select * from UserRole WHERE ApplicationUserOid = @Id AND RoleId = @RoleId",
                        new { Id = cabPersonOid, RoleId = "4837043c-119c-47e1-bbf2-1f32557fdf30" }).FirstOrDefault();
                string userRoleId = null;
                if (existingUserRole != null)
                {
                    userRoleId = existingUserRole.Id;
                }
                else
                {
                    var userRoleSql = @"INSERT INTO dbo.UserRole
                                            (
                                              Id
                                             ,RoleId
                                             ,ApplicationUserOid
                                            )
                                            VALUES
                                            (
                                              @Id
                                             ,@RoleId
                                             ,@ApplicationUserOid
                                            )";

                    var userRole = new UserRole
                    {
                        ApplicationUserOid = cabPersonOid,
                        Id = Guid.NewGuid().ToString(),
                        RoleId = "4837043c-119c-47e1-bbf2-1f32557fdf30" //user
                    };

                    await dbConnection.ExecuteAsync(userRoleSql, userRole);
                    userRoleId = userRole.Id;
                }


                var insertQuery = @"INSERT INTO dbo.ProjectTeamRole
                    (
                        Id
                        ,ProjectTeamId
                        ,CabPersonId
                        ,RoleId
                        ,status
                        ,IsAccessGranted
                    )
                    VALUES
                    (
                        @Id
                        ,@ProjectTeamId
                        ,@CabPersonId
                        ,@RoleId
                        ,@status
                        ,@IsAccessGranted
                    )";

                var isTeamExist = dbConnection
                    .Query<ProjectTeam>("Select * FROM ProjectTeam Where ProjectId = @ProjectId",
                        new { ProjectId = projectId.Id }).FirstOrDefault();

                if (isTeamExist != null)
                {
                    var param1 = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        ProjectTeamId = isTeamExist.Id,
                        CabPersonId = VPParameter.AddTeamMember.PersonId,
                        RoleId = "4837043c-119c-47e1-bbf2-1f32557fdf30", //user
                        status = "2",
                        IsAccessGranted = true
                    };

                    // await dbConnection.ExecuteAsync(insertQuery, param1);
                }
                else
                {
                    var insertProjectTeam = @"INSERT INTO dbo.ProjectTeam
                                                (
                                                  Id
                                                 ,ContractingUnitId
                                                 ,ProjectId
                                                )
                                                VALUES
                                                (
                                                 @Id
                                                 ,@ContractingUnitId
                                                 ,@ProjectId
                                                )";

                    var param2 = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        projectId.ContractingUnitId,
                        ProjectId = projectId.Id
                    };

                    await dbConnection.ExecuteAsync(insertProjectTeam, param2);

                    var param1 = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        ProjectTeamId = param2.Id,
                        CabPersonId = VPParameter.AddTeamMember.PersonId,
                        RoleId = "Foreman", 
                        status = "2",
                        IsAccessGranted = true
                    };

                    await dbConnection.ExecuteAsync(insertQuery, param1);
                }


                var roleSql = @"INSERT INTO dbo.ProjectUserRole
                                            (
                                              Id
                                             ,ProjectDefinitionId
                                             ,UsrRoleId
                                            )
                                            VALUES 
                                            (
                                             @Id
                                             ,@ProjectDefinitionId
                                             ,@UsrRoleId
                                            )";

                var existingProjectRole = dbConnection
                    .Query<ProjectUserRole>(
                        "Select * From ProjectUserRole Where UsrRoleId = @UsrRoleId AND ProjectDefinitionId = @ProjectDefinitionId",
                        new { UsrRoleId = userRoleId, ProjectDefinitionId = projectId.Id })
                    .FirstOrDefault();

                if (existingProjectRole == null)
                {
                    var projectUserRole = new ProjectUserRole
                    {
                        Id = Guid.NewGuid().ToString(),
                        ProjectDefinitionId = projectId.Id,
                        UsrRoleId = userRoleId
                    };

                    await dbConnection.ExecuteAsync(roleSql, projectUserRole);
                }
            }

            var item = connection
                .Query<Pmol>("Select * from Pmol Where Id = @Id", new { Id = VPParameter.AddTeamMember.PmolId })
                .FirstOrDefault();

            var startTime = item?.ExecutionStartTime;
            var endTime = item?.ExecutionEndTime;

            double pmolTime;
            if (startTime != null && endTime != null)
            {
                var d1 = DateTime.Parse(endTime) - DateTime.Parse(startTime);
                pmolTime = d1.TotalHours;
            }
            else
            {
                pmolTime = 0;
            }

            var isExistPmolTeam = connection.Query<string>(
                "SELECT PmolTeamRole.Id FROM  PmolTeamRole  LEFT OUTER JOIN PMolPlannedWorkLabour ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id WHERE PMolPlannedWorkLabour.PmolId = @pmolId AND PmolTeamRole.CabPersonId = @personId AND PmolTeamRole.IsDeleted = 0 AND PMolPlannedWorkLabour.IsDeleted = 0",
                new { pmolId = VPParameter.AddTeamMember.PmolId, personId = VPParameter.AddTeamMember.PersonId });
            
            if (!isExistPmolTeam.Any())
            {
                var pmolTimeInsert =
                    @"INSERT INTO dbo.PmolAssignTime ( Id ,CabPersonId ,PmolId ,ExecutionDate ,ProjectSequenceId ,AssignTime ) VALUES ( @Id ,@CabPersonId ,@PmolId ,@ExecutionDate ,@ProjectSequenceId ,@AssignTime )";


                var labourItem = connection.Query<string>(
                    "Select Id From PMolPlannedWorkLabour Where PmolId = @PmolId AND IsDeleted = 0 ",
                    new { VPParameter.AddTeamMember.PmolId }).FirstOrDefault();

                if (labourItem != null)
                {
                    var checkTeamAvailable = connection
                        .Query<string>("SELECT Id FROM dbo.PmolTeamRole WHERE PmolLabourId = @Id",
                            new { Id = labourItem }).FirstOrDefault();

                    if (checkTeamAvailable != null)
                    {
                        var insertSql =
                            @"INSERT INTO dbo.PmolTeamRole ( Id ,CabPersonId ,RoleId ,RequiredQuantity ,ConsumedQuantity ,Type ,PmolLabourId ,IsDeleted ) VALUES ( @Id ,@CabPersonId ,@RoleId ,0.0 ,0.0 ,@Type ,@PmolLabourId ,0 )";

                        if (VPParameter.AddTeamMember.RoleId == null)
                        {
                            VPParameter.AddTeamMember.RoleId = "4837043c-119c-47e1-bbf2-1f32557fdf30"; //user
                        }

                        var teamParam = new
                        {
                            Id = Guid.NewGuid().ToString(),
                            CabPersonId = VPParameter.AddTeamMember.PersonId,
                            RoleId = VPParameter.AddTeamMember.RoleId,
                            Type = "Planned",
                            PmolLabourId = labourItem
                        };

                        await connection.ExecuteAsync(insertSql, teamParam);
                    }

                    else
                    {
                        var insertSql =
                            @"INSERT INTO dbo.PmolTeamRole ( Id ,CabPersonId ,RoleId ,RequiredQuantity ,ConsumedQuantity ,Type ,PmolLabourId ,IsDeleted ) VALUES ( @Id ,@CabPersonId ,@RoleId ,0.0 ,0.0 ,@Type ,@PmolLabourId ,0 )";

                        if (VPParameter.AddTeamMember.RoleId == null)
                        {
                            VPParameter.AddTeamMember.RoleId = "Foreman";
                        }
                        
                        var teamParam = new
                        {
                            Id = Guid.NewGuid().ToString(),
                            CabPersonId = VPParameter.AddTeamMember.PersonId,
                            RoleId = VPParameter.AddTeamMember.RoleId,
                            Type = "Planned",
                            PmolLabourId = labourItem
                        };

                        await connection.ExecuteAsync(insertSql, teamParam);

                        await connection.ExecuteAsync("UPDATE dbo.PMol SET ForemanId = @PersonId WHERE Id = @PmolId;",
                            new { VPParameter.AddTeamMember.PersonId, VPParameter.AddTeamMember.PmolId });
                    }

                    if (VPParameter.AddTeamMember.IsExist == false)
                    {
                        
                        var timeParam = new
                        {
                            Id = Guid.NewGuid().ToString(),
                            CabPersonId = VPParameter.AddTeamMember.PersonId,
                            VPParameter.AddTeamMember.PmolId,
                            item?.ExecutionDate,
                            ProjectSequenceId = VPParameter.AddTeamMember.ProjectSequenceCode,
                            AssignTime = pmolTime.ToString()
                        };

                        await cuConnection.ExecuteAsync(pmolTimeInsert, timeParam);
                    }
                }
                else
                {
                    var labourInsertSql =
                        @"INSERT INTO dbo.PMolPlannedWorkLabour ( Id ,CoperateProductCatalogId ,RequiredQuantity ,ConsumedQuantity ,CpcBasicUnitofMeasureId ,PmolId ,Type ,IsDeleted ) VALUES ( @Id ,@CoperateProductCatalogId ,0.0 ,0.0 ,@CpcBasicUnitofMeasureId ,@PmolId ,@Type ,0 )";

                    var labourTeamParam = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        CoperateProductCatalogId = VPParameter.Configuration.GetValue<string>("DefaultCpc"),
                        CpcBasicUnitofMeasureId = "cce5fd6a-91e1-4fc0-b3f6-2c462eaf2500",
                        VPParameter.AddTeamMember.PmolId,
                        Type = "Planned"
                    };

                    await connection.ExecuteAsync(labourInsertSql, labourTeamParam);

                    var insertSql =
                        @"INSERT INTO dbo.PmolTeamRole ( Id ,CabPersonId ,RoleId ,RequiredQuantity ,ConsumedQuantity ,Type ,PmolLabourId ,IsDeleted ) VALUES ( @Id ,@CabPersonId ,@RoleId ,0.0 ,0.0 ,@Type ,@PmolLabourId ,0 )";

                    var teamParam = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        CabPersonId = VPParameter.AddTeamMember.PersonId,
                        RoleId = VPParameter.AddTeamMember.RoleId,
                        Type = "Planned",
                        PmolLabourId = labourTeamParam.Id
                    };

                    await connection.ExecuteAsync(insertSql, teamParam);

                    await connection.ExecuteAsync("UPDATE dbo.PMol SET ForemanId = @PersonId WHERE Id = @PmolId;",
                        new { VPParameter.AddTeamMember.PersonId, VPParameter.AddTeamMember.PmolId });

                    if (VPParameter.AddTeamMember.IsExist == false)
                    {
                        var timeParam = new
                        {
                            Id = Guid.NewGuid().ToString(),
                            CabPersonId = VPParameter.AddTeamMember.PersonId,
                            VPParameter.AddTeamMember.PmolId,
                            item?.ExecutionDate,
                            ProjectSequenceId = VPParameter.AddTeamMember.ProjectSequenceCode,
                            AssignTime = pmolTime.ToString()
                        };

                        await cuConnection.ExecuteAsync(pmolTimeInsert, timeParam);
                    }
                }
            }
        
            return VPParameter.AddTeamMember.PmolId;
    }

    public async Task<string> AddPersonToProject(VPParameter vpParameter,string projectSequenceCode,string cabPersonId)
    {
        try
        {
            await using var dbConnection = new SqlConnection(vpParameter.TenantProvider.GetTenant().ConnectionString);

            var cabPersonOid = dbConnection.Query<string>(
                "SELECT Oid FROM dbo.CabPersonCompany WHERE PersonId = @cabPersonId",
                new { cabPersonId}).FirstOrDefault();
            
            var projectId = dbConnection.Query<ProjectDefinition>(
                "Select * From ProjectDefinition Where SequenceCode = @SequenceCode",
                new { SequenceCode = projectSequenceCode}).FirstOrDefault();
            
            var isProjectMember = dbConnection.Query<string>(
                "SELECT ProjectTeamRole.Id FROM ProjectTeamRole LEFT OUTER JOIN ProjectTeam pt ON ProjectTeamRole.ProjectTeamId = pt.Id WHERE pt.ProjectId = @projectId AND ProjectTeamRole.CabPersonId = @personId",
                new { projectId = projectId.Id, personId = cabPersonId });

            if (!isProjectMember.Any())
            {
                var existingUserRole = dbConnection
                    .Query<UserRole>("Select * from UserRole WHERE ApplicationUserOid = @Id AND RoleId = @RoleId",
                        new { Id = cabPersonOid, RoleId = "4837043c-119c-47e1-bbf2-1f32557fdf30" }).FirstOrDefault();
                string userRoleId = null;
                if (existingUserRole != null)
                {
                    userRoleId = existingUserRole.Id;
                }
                else
                {
                    var userRoleSql = @"INSERT INTO dbo.UserRole
                                            (
                                              Id
                                             ,RoleId
                                             ,ApplicationUserOid
                                            )
                                            VALUES
                                            (
                                              @Id
                                             ,@RoleId
                                             ,@ApplicationUserOid
                                            )";

                    var userRole = new UserRole
                    {
                        ApplicationUserOid = cabPersonOid,
                        Id = Guid.NewGuid().ToString(),
                        RoleId = "4837043c-119c-47e1-bbf2-1f32557fdf30" //user
                    };

                    await dbConnection.ExecuteAsync(userRoleSql, userRole);
                    userRoleId = userRole.Id;
                }


                var insertQuery = @"INSERT INTO dbo.ProjectTeamRole
                    (
                        Id
                        ,ProjectTeamId
                        ,CabPersonId
                        ,RoleId
                        ,status
                        ,IsAccessGranted
                    )
                    VALUES
                    (
                        @Id
                        ,@ProjectTeamId
                        ,@CabPersonId
                        ,@RoleId
                        ,@status
                        ,@IsAccessGranted
                    )";

                var isTeamExist = dbConnection
                    .Query<ProjectTeam>("Select * FROM ProjectTeam Where ProjectId = @ProjectId",
                        new { ProjectId = projectId.Id }).FirstOrDefault();

                if (isTeamExist != null)
                {
                    var param1 = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        ProjectTeamId = isTeamExist.Id,
                        CabPersonId = cabPersonId,
                        RoleId = "4837043c-119c-47e1-bbf2-1f32557fdf30", //user
                        status = "2",
                        IsAccessGranted = true
                    };

                    // await dbConnection.ExecuteAsync(insertQuery, param1);
                }
                else
                {
                    var insertProjectTeam = @"INSERT INTO dbo.ProjectTeam
                                                (
                                                  Id
                                                 ,ContractingUnitId
                                                 ,ProjectId
                                                )
                                                VALUES
                                                (
                                                 @Id
                                                 ,@ContractingUnitId
                                                 ,@ProjectId
                                                )";

                    var param2 = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        projectId.ContractingUnitId,
                        ProjectId = projectId.Id
                    };

                    await dbConnection.ExecuteAsync(insertProjectTeam, param2);

                    var param1 = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        ProjectTeamId = param2.Id,
                        CabPersonId = cabPersonId,
                        RoleId = "Foreman", 
                        status = "2",
                        IsAccessGranted = true
                    };

                    await dbConnection.ExecuteAsync(insertQuery, param1);
                }


                var roleSql = @"INSERT INTO dbo.ProjectUserRole
                                            (
                                              Id
                                             ,ProjectDefinitionId
                                             ,UsrRoleId
                                            )
                                            VALUES 
                                            (
                                             @Id
                                             ,@ProjectDefinitionId
                                             ,@UsrRoleId
                                            )";

                var existingProjectRole = dbConnection
                    .Query<ProjectUserRole>(
                        "Select * From ProjectUserRole Where UsrRoleId = @UsrRoleId AND ProjectDefinitionId = @ProjectDefinitionId",
                        new { UsrRoleId = userRoleId, ProjectDefinitionId = projectId.Id })
                    .FirstOrDefault();

                if (existingProjectRole == null)
                {
                    var projectUserRole = new ProjectUserRole
                    {
                        Id = Guid.NewGuid().ToString(),
                        ProjectDefinitionId = projectId.Id,
                        UsrRoleId = userRoleId
                    };

                    await dbConnection.ExecuteAsync(roleSql, projectUserRole);
                }
            }
            return null;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    public async Task<string> AddToolsToProjectPmols(VPParameter VPParameter)
    {
        if (VPParameter.AddTools.ProjectSequenceCode != null)
        {
            string mouId = null;
            var connectionString = ConnectionString.MapConnectionString(
                VPParameter.AddTools.ContractingUnit,
                VPParameter.AddTools.ProjectSequenceCode, VPParameter.TenantProvider);

            await using var connection = new SqlConnection(connectionString);


            var cpcExist = connection.Query<CorporateProductCatalog>(
                "Select * from CorporateProductCatalog Where Id = @Id", new { Id = VPParameter.AddTools.CpcId });

            mouId = cpcExist.FirstOrDefault()?.CpcBasicUnitOfMeasureId;

            if (!cpcExist.Any())
            {
                var pbsParameters = new PbsResourceParameters
                {
                    Lang = VPParameter.Lang,
                    TenantProvider = VPParameter.TenantProvider,
                    ContractingUnitSequenceId = VPParameter.AddTools.CuId
                };
                mouId = await VPParameter.PbsResourceRepository.CopyCpcFromCuToProject(pbsParameters,
                    VPParameter.AddTools.CpcId, connectionString, "cu");
            }

            var pmolList = connection.Query<PmolData>(
                @"SELECT PMol.Id ,PMol.ProjectMoleculeId ,PMol.Name ,PMol.ForemanMobileNumber ,PMol.ExecutionDate ,PMol.ForemanId ,PMol.Comment ,PMol.IsDeleted ,PMol.TypeId ,PMol.StatusId ,PMol.Title ,PMol.BorId ,PMol.EndDateTime ,PMol.IsFinished ,PMol.StartDateTime ,PMol.IsBreak ,PMol.PmolType ,PMol.ProductId ,PMol.ProjectSequenceCode ,PMol.ParentId ,PMol.ExecutionEndTime ,PMol.ExecutionStartTime ,PMol.LocationId ,PbsProduct.Name AS ProductName FROM dbo.PMol LEFT OUTER JOIN dbo.PbsProduct ON PMol.ProductId = PbsProduct.Id WHERE PMol.IsDeleted = 0 ");

            foreach (var item in pmolList)
            {
                var isExistPmolTools = connection.Query<string>(
                    "SELECT PMolPlannedWorkTools.Id FROM  PMolPlannedWorkTools WHERE PMolPlannedWorkTools.PmolId = @pmolId AND PMolPlannedWorkTools.CoperateProductCatalogId = @cpcId AND PMolPlannedWorkTools.IsDeleted = 0",
                    new { pmolId = item.Id, cpcId = VPParameter.AddTools.CpcId });

                if (!isExistPmolTools.Any())
                {
                    var insertSql = @"INSERT INTO dbo.PMolPlannedWorkTools
                                        (
                                          Id
                                         ,CoperateProductCatalogId
                                         ,RequiredQuantity
                                         ,ConsumedQuantity
                                         ,CpcBasicUnitofMeasureId
                                         ,PmolId
                                         ,Type
                                         ,IsDeleted
                                        )
                                        VALUES
                                        (
                                         @Id
                                         ,@CoperateProductCatalogId
                                         ,0.0
                                         ,0.0 
                                         ,@CpcBasicUnitofMeasureId
                                         ,@PmolId
                                         ,@Type
                                         ,0
                                        )";

                    var param = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        CoperateProductCatalogId = VPParameter.AddTools.CpcId,
                        CpcBasicUnitofMeasureId = mouId,
                        PmolId = item.Id,
                        Type = "Planned"
                    };

                    await connection.ExecuteAsync(insertSql, param);
                }
            }
        }

        return VPParameter.AddTools.ProjectSequenceCode;
    }

    public async Task<string> AddToolsToPmol(VPParameter VPParameter)
    {
        if (VPParameter.AddTools.ProjectSequenceCode != null)
        {
            string mouId = null;
            var connectionString = ConnectionString.MapConnectionString(
                VPParameter.AddTools.ContractingUnit,
                VPParameter.AddTools.ProjectSequenceCode, VPParameter.TenantProvider);

            await using var connection = new SqlConnection(connectionString);


            var cpcExist = connection.Query<CorporateProductCatalog>(
                "Select * from CorporateProductCatalog Where Id = @Id", new { Id = VPParameter.AddTools.CpcId });

            mouId = cpcExist.FirstOrDefault()?.CpcBasicUnitOfMeasureId;
            if (!cpcExist.Any())
            {
                var pbsParameters = new PbsResourceParameters
                {
                    Lang = VPParameter.Lang,
                    TenantProvider = VPParameter.TenantProvider,
                    ContractingUnitSequenceId = VPParameter.AddTools.CuId
                };
                mouId = await VPParameter.PbsResourceRepository.CopyCpcFromCuToProject(pbsParameters,
                    VPParameter.AddTools.CpcId, connectionString, "cu");
            }
            //var pmolList = connection.Query<PmolData>( @"SELECT PMol.Id ,PMol.ProjectMoleculeId ,PMol.Name ,PMol.ForemanMobileNumber ,PMol.ExecutionDate ,PMol.ForemanId ,PMol.Comment ,PMol.IsDeleted ,PMol.TypeId ,PMol.StatusId ,PMol.Title ,PMol.BorId ,PMol.EndDateTime ,PMol.IsFinished ,PMol.StartDateTime ,PMol.IsBreak ,PMol.PmolType ,PMol.ProductId ,PMol.ProjectSequenceCode ,PMol.ParentId ,PMol.ExecutionEndTime ,PMol.ExecutionStartTime ,PMol.LocationId ,PbsProduct.Name AS ProductName FROM dbo.PMol LEFT OUTER JOIN dbo.PbsProduct ON PMol.ProductId = PbsProduct.Id WHERE PMol.IsDeleted = 0 " );


            var isExistPmolTools = connection.Query<string>(
                "SELECT PMolPlannedWorkTools.Id FROM  PMolPlannedWorkTools WHERE PMolPlannedWorkTools.PmolId = @pmolId AND PMolPlannedWorkTools.CoperateProductCatalogId = @cpcId AND PMolPlannedWorkTools.IsDeleted = 0",
                new { pmolId = VPParameter.AddTools.PmolId, cpcId = VPParameter.AddTools.CpcId });

            if (!isExistPmolTools.Any())
            {
                var insertSql = @"INSERT INTO dbo.PMolPlannedWorkTools
                                        (
                                          Id
                                         ,CoperateProductCatalogId
                                         ,RequiredQuantity
                                         ,ConsumedQuantity
                                         ,CpcBasicUnitofMeasureId
                                         ,PmolId
                                         ,Type
                                         ,IsDeleted
                                        )
                                        VALUES
                                        (
                                         @Id
                                         ,@CoperateProductCatalogId
                                         ,0.0
                                         ,0.0 
                                         ,@CpcBasicUnitofMeasureId
                                         ,@PmolId
                                         ,@Type
                                         ,0
                                        )";

                var param = new
                {
                    Id = Guid.NewGuid().ToString(),
                    CoperateProductCatalogId = VPParameter.AddTools.CpcId,
                    CpcBasicUnitofMeasureId = mouId,
                    VPParameter.AddTools.PmolId,
                    Type = "Planned"
                };

                await connection.ExecuteAsync(insertSql, param);
            }
        }

        return VPParameter.AddTools.ProjectSequenceCode;
    }

    public async Task<List<BuDto>> BuFilterForDayPlanning(VPParameter VPParameter)
    {
        await using var connection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);

        var selectBu =
            @"SELECT
              OrganizationTaxonomy.Id AS [Key]
             ,OrganizationTaxonomy.Title AS [Text]
             ,OrganizationTaxonomy.BuSequenceId
             ,OrganizationTaxonomy.BuName
             ,c.Title AS ContractingUnit
             ,cc.Id AS ContractingUnitId
            FROM dbo.OrganizationTaxonomy
            LEFT OUTER JOIN dbo.OrganizationTaxonomy c
              ON OrganizationTaxonomy.ParentId = c.Id
              LEFT OUTER JOIN dbo.CabCompany cc
              ON c.Title = cc.SequenceCode
            WHERE OrganizationTaxonomy.OrganizationTaxonomyLevelId = 'oo10e768-3e06-po02-b337-ee367a82admn'
            AND cc.Id NOT IN ('960e4bc9-775c-43b3-b771-6b4edbbe53e9')
            ORDER BY OrganizationTaxonomy.BuName ASC";
        
        var data = connection.Query<BuDto>(selectBu,
            new { VPParameter.UserId, Cu = VPParameter.FilterBu.ContractingUnit }).ToList();

        var data1 = new List<BuDto>();

        foreach (var i in VPParameter.FilterBu.BusinessUnit)
        {
            var data2 = data.FirstOrDefault(e => e.BuSequenceId == i);

            if (data2 != null) data1.Add(data2);
        }

        var selectBuManagerBu =
            @"SELECT
              OrganizationTaxonomy.Id AS [Key]
             ,OrganizationTaxonomy.Title AS [Text]
             ,OrganizationTaxonomy.BuSequenceId
             ,OrganizationTaxonomy.BuName
             ,c.Title AS ContractingUnit
             ,cc.Id AS ContractingUnitId
            FROM dbo.OrganizationTaxonomy
            LEFT OUTER JOIN dbo.CabPersonCompany
              ON OrganizationTaxonomy.PersonId = CabPersonCompany.Id
            LEFT OUTER JOIN dbo.OrganizationTaxonomy c
              ON OrganizationTaxonomy.ParentId = c.Id
            LEFT OUTER JOIN dbo.CabCompany cc
              ON c.Title = cc.SequenceCode
            WHERE Oid = @UserId
            AND cc.Id NOT IN ('960e4bc9-775c-43b3-b771-6b4edbbe53e9')
            AND OrganizationTaxonomy.OrganizationTaxonomyLevelId = 'oo10e768-3e06-po02-b337-ee367a82admn'";
        
        var sb = new StringBuilder(selectBuManagerBu);

        if (VPParameter.FilterBu.Title != null)
            sb.Append(" AND OrganizationTaxonomy.Title LIKE '%" + VPParameter.FilterBu.Title + "%' ");

        var data3 = connection.Query<BuDto>(sb.ToString(),
            new { VPParameter.UserId, Cu = VPParameter.FilterBu.ContractingUnit }).ToList();

        data1.AddRange(data3);

        data1 = data1.OrderBy(e => e.BuName).ToList().DistinctBy(e => e.BuSequenceId).ToList();

        return data1;
    }

    public async Task<string> CretePrFromBor(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(
            VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId
            , VPParameter.TenantProvider);

        await using var connection = new SqlConnection(connectionString);

        var options = new DbContextOptions<ApplicationDbContext>();
        var applicationDbContext = new ApplicationDbContext(options, VPParameter.TenantProvider);
        var borList = new List<string>
        {
            VPParameter.CreatePr.BorId
        };

        var borParameter = new BorParameter
        {
            ProjectSequenceId = VPParameter.ProjectSequenceId,
            ContractingUnitSequenceId = VPParameter.ContractingUnitSequenceId,
            TenantProvider = VPParameter.TenantProvider,
            idList = borList,
            Lang = VPParameter.Lang,
            ContextAccessor = VPParameter.ContextAccessor
        };

        var bor = connection.Query<Bor>("Select * from Bor where Id = @Id", new { Id = VPParameter.CreatePr.BorId })
            .FirstOrDefault();
        var borResources = await VPParameter.BorRepository.GetBorResourcesbyIds(borParameter);
        string POSequenceId = null;
        string val = null;
        string PoId = null;

        if (bor != null)
        {
            var location = await VPParameter.ProjectDefinitionRepository.GetLocationByProjectId(
                VPParameter.ProjectSequenceId, VPParameter.Lang,
                VPParameter.TenantProvider);

            var totalMat =
                borResources.Materials.Sum(x => x.InventoryPrice?.ToDecimal() * x.Required.ToString().ToDecimal());
            var totalCon =
                borResources.Consumable.Sum(x => x.InventoryPrice?.ToDecimal() * x.Required.ToString().ToDecimal());
            var totalTools =
                borResources.Tools.Sum(x => x.InventoryPrice?.ToDecimal() * x.Required.ToString().ToDecimal());
            var totalLab =
                borResources.Labour.Sum(x => x.InventoryPrice?.ToDecimal() * x.Required.ToString().ToDecimal());


            var totalRes = totalCon + totalLab + totalMat + totalTools;

            var idGenerator = new IdGenerator();

            POSequenceId = idGenerator.GenerateId(applicationDbContext, "PO-", "POSequence");
            POSequenceId = Regex.Replace(POSequenceId, "PO", "PR");

            var query =
                @"INSERT INTO [dbo].[POHeader] ([Id],[Title],[Name],[POTypeId],[POStatusId],[Comments],[ProjectSequenceCode],[IsDeleted],[SequenceId],[CreatedBy],[CreatedDate],[ModifiedBy],[ModifiedDate],[CustomerCompanyId],[CustomerId],[CustomerReference],[SuplierCompanyId],[SupplierCabPersonCompanyId],[SupplierReference], [NoOfMaterials] ,[NoOfTools] ,[NoOfConsumables] ,[NoOfLabours], [DeliveryDate],[LocationId], [TotalAmount], [IsClone] ,[IsCu] ,[DeliveryRequest] ,[TaxonomyId],PORequestType,RequestedDate,ExpectedDate,AvailableProbability,RequestedProbability ) VALUES (@Id ,@Title ,@Name ,@POTypeId ,@POStatusId ,@Comments ,@ProjectSequenceCode ,@IsDeleted ,@SequenceId ,@CreatedBy ,@CreatedDate ,@ModifiedBy ,@ModifiedDate ,@CustomerCompanyId ,@CustomerId ,@CustomerReference ,@SuplierCompanyId ,@SupplierCabPersonCompanyId ,@SupplierReference ,@NoOfMaterials ,@NoOfTools ,@NoOfConsumables ,@NoOfLabours, @DeliveryDate,@LocationId, @TotalAmount, @IsClone , @IsCu ,@DeliveryLocation ,@WarehouseTaxonomyId,@PORequestType,@RequestedDate,@ExpectedDate, @AvailableProbability, @RequestedProbability )";

            var parameters = new
            {
                Id = Guid.NewGuid().ToString(),
                Title = POSequenceId + " " + bor.Title,
                Name = bor.Title,
                POTypeId = "94282458-0b40-40a3-b0f9-c2e40344c8f1",
                POStatusId = "94282458-0b40-40a3-b0f9-c2e40344c8f1",
                Comments = val,
                ProjectSequenceCode = VPParameter.ProjectSequenceId,
                ISDeleted = false,
                SequenceId = POSequenceId,
                CreatedBy = VPParameter.UserId,
                CreatedDate = DateTime.UtcNow,
                ModifiedBy = VPParameter.UserId,
                ModifiedDate = DateTime.UtcNow,
                CustomerCompanyId = val,
                CustomerId = val,
                CustomerReference = val,
                SuplierCompanyId = val,
                SupplierCabPersonCompanyId = val,
                SupplierReference = val,
                NoOfMaterials = borResources.Materials.Count(),
                NoOfTools = borResources.Tools.Count(),
                NoOfConsumables = borResources.Consumable.Count(),
                NoOfLabours = borResources.Labour.Count(),
                DeliveryDate = DateTime.UtcNow,
                LocationId = location.Id,
                TotalAmount = totalRes,
                IsClone = false,
                IsCu = false,
                DeliveryLocation = val,
                WarehouseTaxonomyId = val,
                PORequestType = "94282458-0b40-poa3-b0f9-c2e40344c8f1",
                RequestedDate = val,
                ExpectedDate = val,
                AvailableProbability = val,
                RequestedProbability = val
            };

            await connection.ExecuteAsync(query, parameters);

            PoId = parameters.Id;
        }

        var resoursequery =
            @"INSERT INTO dbo.POResources ( Id ,PurchesOrderId ,PComments ,PInvoiced ,BorId ,PTotalPrice ,PPurchased ,PStartDate ,PStopDate ,PUnitPrice ,Date ,PFullTimeEmployee ,BorTitle ,PCrossReference ,PConsumed ,CorporateProductCatalogId ,CDeliveryRequested ,PDeliveryRequested ,PNumberOfDate ,PQuantity ,ResourceNumber ,warf ,CComments ,CCrossReference ,CFullTimeEmployee ,CNumberOfDate ,CPurchased ,CQuantity ,CStartDate ,CStopDate ,CTotalPrice ,CUnitPrice ,ResourcesType ,Cdevices ,Pdevices ,ProjectTitle ,PbsTitle ,CTitle ,PTitle ,CMou ,PMou ,CCPCId ,PCPCId, ResourceFamily, BorResourceId, IsUsed, HasChanged, IsStock, RequestedDeliveryDate, ExpectedDeliveryDate, PbsProductId) VALUES ( @Id ,@PurchesOrderId ,@PComments ,@PInvoiced ,@BorId ,@PTotalPrice ,@PPurchased ,@PStartDate ,@PStopDate ,@PUnitPrice ,@Date ,@PFullTimeEmployee ,@BorTitle ,@PCrossReference ,@PConsumed ,@CorporateProductCatalogId ,@CDeliveryRequested ,@PDeliveryRequested ,@PNumberOfDate ,@PQuantity ,@ResourceNumber ,@warf ,@CComments ,@CCrossReference ,@CFullTimeEmployee ,@CNumberOfDate ,@CPurchased ,@CQuantity ,@CStartDate ,@CStopDate ,@CTotalPrice ,@CUnitPrice ,@ResourcesType ,@Cdevices ,@Pdevices ,@ProjectTitle,@PbsTitle,@CTitle,@PTitle,@CMou,@PMou,@CCPCId,@PCPCId, @ResourceFamily, @BorResourceId, @IsUsed, @HasChanged, @IsStock, @RequestedDeliveryDate, @ExpectedDeliveryDate, @PbsProductId);";


        foreach (var tools in borResources.Tools)
        {
            var resourcceId = Guid.NewGuid().ToString();
            var reparameters = new
            {
                Id = resourcceId,
                PurchesOrderId = PoId,
                PComments = val,
                PInvoiced = tools.Invoiced,
                tools.BorId,
                PTotalPrice = tools.InventoryPrice?.ToDecimal() * tools.Required.ToString().ToDecimal(),
                PPurchased = tools.Purchased,
                PStartDate = val,
                PStopDate = val,
                PUnitPrice = tools.InventoryPrice,
                tools.Date,
                PFullTimeEmployee = val,
                tools.BorTitle,
                PCrossReference = val,
                PConsumed = tools.Consumed,
                tools.CorporateProductCatalogId,
                CDeliveryRequested = tools.DeliveryRequested,
                PDeliveryRequested = tools.DeliveryRequested,
                PNumberOfDate = val,
                PQuantity = tools.Required,
                tools.ResourceNumber,
                warf = tools.Warf,
                CComments = val,
                CCrossReference = val,
                CFullTimeEmployee = val,
                CNumberOfDate = val,
                CPurchased = tools.Purchased,
                CQuantity = tools.Required,
                CStartDate = val,
                CStopDate = val,
                CTotalPrice = tools.InventoryPrice?.ToDecimal() * tools.Required.ToString().ToDecimal(),
                CUnitPrice = tools.InventoryPrice,
                ResourcesType = "c46c3a26-39a5-42cc-n9wn-89655304eh6",
                Cdevices = val,
                Pdevices = val,
                ProjectTitle = VPParameter.ProjectSequenceId,
                tools.PbsTitle,
                CMou = tools.MOU,
                PMou = tools.MOU,
                CCPCId = tools.CorporateProductCatalogId,
                PCPCId = tools.CorporateProductCatalogId,
                CTitle = tools.Title,
                PTitle = tools.Title,
                tools.ResourceFamily,
                BorResourceId = tools.Id,
                IsUsed = false,
                HasChanged = false,
                IsStock = val,
                RequestedDeliveryDate = val,
                ExpectedDeliveryDate = val,
                PbsProductId = val
            };

            await connection.ExecuteAsync(resoursequery, reparameters);
        }

        foreach (var materials in borResources.Materials)
        {
            var resourcceId = Guid.NewGuid().ToString();
            var reparameters = new
            {
                Id = resourcceId,
                PurchesOrderId = PoId,
                PComments = val,
                PInvoiced = materials.Invoiced,
                materials.BorId,
                PTotalPrice = materials.InventoryPrice?.ToDecimal() * materials.Required.ToString().ToDecimal(),
                PPurchased = materials.Purchased,
                PStartDate = val,
                PStopDate = val,
                PUnitPrice = materials.InventoryPrice,
                materials.Date,
                PFullTimeEmployee = val,
                materials.BorTitle,
                PCrossReference = val,
                PConsumed = materials.Consumed,
                materials.CorporateProductCatalogId,
                CDeliveryRequested = materials.DeliveryRequested,
                PDeliveryRequested = materials.DeliveryRequested,
                PNumberOfDate = val,
                PQuantity = materials.Required,
                materials.ResourceNumber,
                warf = materials.Warf,
                CComments = val,
                CCrossReference = val,
                CFullTimeEmployee = val,
                CNumberOfDate = val,
                CPurchased = materials.Purchased,
                CQuantity = materials.Required,
                CStartDate = val,
                CStopDate = val,
                CTotalPrice = materials.InventoryPrice?.ToDecimal() * materials.Required.ToString().ToDecimal(),
                CUnitPrice = materials.InventoryPrice,
                ResourcesType = "c46c3a26-39a5-42cc-n7k1-89655304eh6",
                Cdevices = val,
                Pdevices = val,
                ProjectTitle = VPParameter.ProjectSequenceId,
                materials.PbsTitle,
                CMou = materials.MOU,
                PMou = materials.MOU,
                CCPCId = materials.CorporateProductCatalogId,
                PCPCId = materials.CorporateProductCatalogId,
                CTitle = materials.Title,
                PTitle = materials.Title,
                materials.ResourceFamily,
                BorResourceId = materials.Id,
                IsUsed = false,
                HasChanged = false,
                IsStock = val,
                RequestedDeliveryDate = val,
                ExpectedDeliveryDate = val,
                PbsProductId = val
            };

            await connection.ExecuteAsync(resoursequery, reparameters);
        }

        foreach (var consumable in borResources.Consumable)
        {
            var resourcceId = Guid.NewGuid().ToString();
            var reparameters = new
            {
                Id = resourcceId,
                PurchesOrderId = PoId,
                PComments = val,
                PInvoiced = consumable.Invoiced,
                consumable.BorId,
                PTotalPrice = consumable.InventoryPrice?.ToDecimal() * consumable.Required.ToString().ToDecimal(),
                PPurchased = consumable.Purchased,
                PStartDate = val,
                PStopDate = val,
                PUnitPrice = consumable.InventoryPrice,
                consumable.Date,
                PFullTimeEmployee = val,
                consumable.BorTitle,
                PCrossReference = val,
                PConsumed = consumable.Consumed,
                consumable.CorporateProductCatalogId,
                CDeliveryRequested = consumable.DeliveryRequested,
                PDeliveryRequested = consumable.DeliveryRequested,
                PNumberOfDate = val,
                PQuantity = consumable.Required,
                consumable.ResourceNumber,
                warf = consumable.Warf,
                CComments = val,
                CCrossReference = val,
                CFullTimeEmployee = val,
                CNumberOfDate = val,
                CPurchased = consumable.Purchased,
                CQuantity = consumable.Required,
                CStartDate = val,
                CStopDate = val,
                CTotalPrice = consumable.InventoryPrice?.ToDecimal() * consumable.Required.ToString().ToDecimal(),
                CUnitPrice = consumable.InventoryPrice,
                ResourcesType = "c46c3a26-39a5-42cc-m06g-89655304eh6",
                Cdevices = val,
                Pdevices = val,
                ProjectTitle = VPParameter.ProjectSequenceId,
                consumable.PbsTitle,
                CMou = consumable.MOU,
                PMou = consumable.MOU,
                CCPCId = consumable.CorporateProductCatalogId,
                PCPCId = consumable.CorporateProductCatalogId,
                CTitle = consumable.Title,
                PTitle = consumable.Title,
                consumable.ResourceFamily,
                BorResourceId = consumable.Id,
                IsUsed = false,
                HasChanged = false,
                IsStock = val,
                RequestedDeliveryDate = val,
                ExpectedDeliveryDate = val,
                PbsProductId = val
            };

            await connection.ExecuteAsync(resoursequery, reparameters);
        }

        foreach (var labour in borResources.Labour)
        {
            var resourcceId = Guid.NewGuid().ToString();
            var reparameters = new
            {
                Id = resourcceId,
                PurchesOrderId = PoId,
                PComments = val,
                PInvoiced = labour.Invoiced,
                labour.BorId,
                PTotalPrice = labour.InventoryPrice?.ToDecimal() * labour.Required.ToString().ToDecimal(),
                PPurchased = labour.Purchased,
                PStartDate = val,
                PStopDate = val,
                PUnitPrice = labour.InventoryPrice,
                labour.Date,
                PFullTimeEmployee = val,
                labour.BorTitle,
                PCrossReference = val,
                PConsumed = labour.Consumed,
                labour.CorporateProductCatalogId,
                CDeliveryRequested = labour.DeliveryRequested,
                PDeliveryRequested = labour.DeliveryRequested,
                PNumberOfDate = val,
                PQuantity = labour.Required,
                labour.ResourceNumber,
                warf = labour.Warf,
                CComments = val,
                CCrossReference = val,
                CFullTimeEmployee = val,
                CNumberOfDate = val,
                CPurchased = labour.Purchased,
                CQuantity = labour.Required,
                CStartDate = val,
                CStopDate = val,
                CTotalPrice = labour.InventoryPrice?.ToDecimal() * labour.Required.ToString().ToDecimal(),
                CUnitPrice = labour.InventoryPrice,
                ResourcesType = "c46c3a26-39a5-42cc-b07s-89655304eh6",
                Cdevices = val,
                Pdevices = val,
                ProjectTitle = VPParameter.ProjectSequenceId,
                labour.PbsTitle,
                CMou = labour.MOU,
                PMou = labour.MOU,
                CCPCId = labour.CorporateProductCatalogId,
                PCPCId = labour.CorporateProductCatalogId,
                CTitle = labour.Title,
                PTitle = labour.Title,
                labour.ResourceFamily,
                BorResourceId = labour.Id,
                IsUsed = false,
                HasChanged = false,
                IsStock = val,
                RequestedDeliveryDate = val,
                ExpectedDeliveryDate = val,
                PbsProductId = val
            };

            await connection.ExecuteAsync(resoursequery, reparameters);
        }

        return POSequenceId;
    }

    public async Task<RfqResults> GenerateRFQForProjectDayPlanning(VPParameter VPParameter)
    {
        await using var dbconnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);

        var options = new DbContextOptions<ApplicationDbContext>();
        var applicationDbContext = new ApplicationDbContext(options, VPParameter.TenantProvider);

        List<ProjectDefinition> db;

        var result = new RfqResults();
        var errorPmol = new List<PmolResults>();

        // string selectBu = @"SELECT OrganizationTaxonomy.Id FROM dbo.OrganizationTaxonomy LEFT OUTER JOIN dbo.CabPersonCompany ON OrganizationTaxonomy.PersonId = CabPersonCompany.Id LEFT OUTER JOIN dbo.OrganizationTaxonomy c ON OrganizationTaxonomy.ParentId = c.Id WHERE Oid = @UserId AND OrganizationTaxonomy.OrganizationTaxonomyLevelId = 'oo10e768-3e06-po02-b337-ee367a82admn' AND c.Title = @Cu";
        //
        // var buId = dbconnection.Query<string>(selectBu, new {VPParameter.UserId,Cu = VPParameter.ProjectsPmol.ContractingUnit.FirstOrDefault()}).FirstOrDefault();

        var selectProject =
            @"SELECT ProjectDefinition.Id, ProjectDefinition.Title,ProjectDefinition.SequenceCode,ProjectDefinition.ProjectConnectionString ,ProjectDefinition.ProjectManagerId ,CabCompany.SequenceCode AS ContractingUnitId FROM dbo.ProjectDefinition LEFT OUTER JOIN CabCompany ON ProjectDefinition.ContractingUnitId = CabCompany.Id LEFT OUTER JOIN dbo.ProjectClassification ON ProjectDefinition.Id = ProjectClassification.ProjectId  WHERE ProjectDefinition.IsDeleted = 0 AND ProjectClassification.ProjectClassificationBuisnessUnit = @BuId ";

        var sb2 = new StringBuilder(selectProject);

        if (VPParameter.ProjectsPmol.ContractingUnit.Any())
            sb2.Append(" And CabCompany.SequenceCode IN @ContractingUnits ORDER BY ProjectDefinition.SequenceCode ");
        else
            sb2.Append(" ORDER BY ProjectDefinition.SequenceCode ");


        if (VPParameter.ProjectsPmol.BuId != null)
            db = dbconnection
                .Query<ProjectDefinition>(
                    sb2.ToString(),
                    new
                    {
                        Oid = VPParameter.UserId, ContractingUnits = VPParameter.ProjectsPmol.ContractingUnit,
                        BuID = VPParameter.ProjectsPmol.BuId
                    }).ToList();
        else
            // db = dbconnection
            //     .Query<ProjectDefinition>(
            //         sb2.ToString(),
            //         new
            //         {
            //             Oid = VPParameter.UserId, ContractingUnits = VPParameter.ProjectsPmol.ContractingUnit,
            //             BuID = buId
            //         }).ToList();
            return null;

        var memberselect =
            @"SELECT PersonId As Id,CompanyId , cc.Name AS CompanyName  FROM [dbo].[CabPersonCompany] LEFT OUTER JOIN CabCompany cc ON CabPersonCompany.CompanyId = cc.Id";
        IEnumerable<PmolTeamMeber> members;
        members = dbconnection.Query<PmolTeamMeber>(memberselect);

        var reqPerson = dbconnection
            .Query<Person1>(
                "SELECT cp.FullName AS [Text] , cp.Id AS [Key] FROM CabPersonCompany LEFT OUTER JOIN CabPerson cp ON CabPersonCompany.PersonId = cp.Id WHERE Oid = @oid",
                new { oid = VPParameter.UserId }).FirstOrDefault();

        result.RequestedBy = reqPerson;

        if (db.Any())
            foreach (var project in db)
            {
                var teamQuery = @"SELECT 
                                                 PmolTeamRole.Id As Id
                                                ,PmolTeamRole.CabPersonId As CabPersonId
                                                ,PmolTeamRole.RoleId                                
                                                FROM dbo.PMolPlannedWorkLabour                               
                                                LEFT OUTER JOIN dbo.PmolTeamRole
                                                  ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id
                                                WHERE PMolPlannedWorkLabour.IsDeleted = 0
                                                AND PmolTeamRole.IsDeleted = 0
                                                AND PmolTeamRole.CabPersonId IS NOT NULL AND PMolPlannedWorkLabour.PmolId = @PmolId ";


                await using var connection = new SqlConnection(project.ProjectConnectionString);

                var cuConnectionString = ConnectionString.MapConnectionString(
                    VPParameter.ProjectsPmol.ContractingUnit.FirstOrDefault(),
                    null, VPParameter.TenantProvider);
                await using var cuConnection = new SqlConnection(cuConnectionString);


                var pmolList = connection.Query<PmolData>(
                    @"SELECT PMol.Id ,PMol.ProjectMoleculeId ,PMol.Name ,PMol.ForemanMobileNumber ,PMol.ExecutionDate ,PMol.ForemanId ,PMol.Comment ,PMol.IsDeleted ,PMol.TypeId ,PMol.StatusId ,PMol.Title ,PMol.BorId ,PMol.EndDateTime ,PMol.IsFinished ,PMol.StartDateTime ,PMol.IsBreak ,PMol.PmolType ,PMol.ProductId ,PMol.ProjectSequenceCode ,PMol.ParentId ,PMol.ExecutionEndTime ,PMol.ExecutionStartTime ,PMol.LocationId ,PbsProduct.Name AS ProductName FROM dbo.PMol LEFT OUTER JOIN dbo.PbsProduct ON PMol.ProductId = PbsProduct.Id WHERE PMol.IsDeleted = 0 AND PMol.ExecutionDate = @ExecutionDate",
                    new { VPParameter.ProjectsPmol.ExecutionDate });


                foreach (var pmol in pmolList)
                {
                    var isRfqGenerated = connection
                        .Query<PmolRfq>("Select * From PmolRfq Where PmolId = @PmolId",
                            new { PmolId = pmol.Id }).Any();

                    if (!isRfqGenerated)
                    {
                        var teams = connection.Query<PmolTeamMeber>(teamQuery,
                            new
                            {
                                PmolId = pmol.Id
                            }).ToList();

                        if (!teams.Any())
                        {
                            var pmolMsg1 = new PmolResults
                            {
                                PmolTitle = pmol.Title,
                                Status = false,
                                Message = "no team members assign to this pmol"
                            };

                            errorPmol.Add(pmolMsg1);

                            //errorPmol.Add(pmol.ProjectMoleculeId);
                            continue;
                        }

                        var teamInsert =
                            @"INSERT INTO dbo.PmolRfq ( Id ,TeamRoleId ,PmolId ) VALUES (@Id ,@TeamRoleId ,@PmolId )";
                        foreach (var person in teams)
                        {
                            // person.Name = members.FirstOrDefault(x => x.Id == person.Id).Name;
                            var workingCompany = dbconnection.Query<string>(@"SELECT                             
                                   HRHeader.WorkingOrganization                        
                                       FROM dbo.HRHeader
                                       LEFT OUTER JOIN dbo.CabPersonCompany
                                       ON HRHeader.PersonId = CabPersonCompany.Id
                                   WHERE CabPersonCompany.PersonId = @PersonId AND HRHeader.WorkingOrganization IS NOT NULL ",
                                new { PersonId = person.CabPersonId }).FirstOrDefault();

                            if (workingCompany == null)
                            {
                                person.CompanyId = members.FirstOrDefault(x => x.Id == person.CabPersonId)
                                    .CompanyId;
                                person.CompanyName = members.FirstOrDefault(x => x.Id == person.CabPersonId)
                                    .CompanyName;
                            }
                            else
                            {
                                person.CompanyId = workingCompany;
                                person.CompanyName = members.FirstOrDefault(x => x.CompanyId == workingCompany)
                                    .CompanyName;
                            }
                        }

                        var squareMeters = connection
                            .Query<PbsScopeOfWorkRfq>(
                                "Select PbsScopeOfWork.*,PbsProduct.ProductId As PbsSequenceId,PbsProduct.Title As PbsTitle  From PbsScopeOfWork LEFT OUTER JOIN PbsProduct ON PbsScopeOfWork.ProductId = PbsProduct.Id  Where PbsScopeOfWork.ProductId = @ProductId",
                                new { pmol.ProductId }).FirstOrDefault();

                        if (squareMeters != null)
                        {
                            var unit = squareMeters.Quantity.ToDouble() / teams.Count;

                            var groupTeam = teams.GroupBy(x => x.CompanyId);

                            var isHaveContactManager = dbconnection.Query<string>(
                                @"SELECT                             
                                             CabPersonCompany.CompanyId                        
                                            FROM dbo.HRHeader
                                            LEFT OUTER JOIN dbo.CabPersonCompany
                                              ON HRHeader.PersonId = CabPersonCompany.Id
                                             WHERE CabPersonCompany.CompanyId IN @companyIds AND HRHeader.IsContactManager = 1",
                                new { companyIds = teams.Select(x => x.CompanyId) });

                            var ff = teams.Where(x => isHaveContactManager.All(v => v != x.CompanyId))
                                .Select(c => c.CompanyName);

                            if (ff.Any())
                            {
                                //throw new Exception( "Please set contact manager for all the companies ");
                                var combinedString = string.Join(",", ff.Distinct().ToList());

                                var msg = "Please set contact manager for " + combinedString + " companies";


                                var pmolMsg1 = new PmolResults
                                {
                                    PmolTitle = pmol.Title,
                                    Status = false,
                                    Message = msg
                                };

                                errorPmol.Add(pmolMsg1);

                                //errorPmol.Add(pmol.ProjectMoleculeId);
                                continue;
                            }

                            var selectProjectConfig =
                                dbconnection.Query<string>(
                                    "Select UnitPrice from ProjectConfiguration where ProjectId = @ProjectId",
                                    new { ProjectId = project.Id }).FirstOrDefault();

                            if (selectProjectConfig == null)
                            {
                                var priceList = cuConnection.Query<string>(
                                    "SELECT CompanyId FROM CpcVendor WHERE CoperateProductCatalogId = @cpcId AND CompanyId IN @companyIds AND IsDeleted = 0 ",
                                    new
                                    {
                                        cpcId = VPParameter.Configuration.GetValue<string>("RFQCpc"),
                                        companyIds = teams.Select(x => x.CompanyId)
                                    });

                                var hh = teams.Where(x => priceList.All(v => v != x.CompanyId))
                                    .Select(c => c.CompanyName);

                                if (hh.Any())
                                {
                                    //throw new Exception( company + " need to add as vendor List Of RFQ CPC item");
                                    //errorPmol.Add(pmol.ProjectMoleculeId);
                                    var combinedString = string.Join(",", hh.Distinct().ToList());

                                    var msg = combinedString + " need to add as vendor List Of RFQ CPC item";
                                    var pmolMsg1 = new PmolResults
                                    {
                                        PmolTitle = pmol.Title,
                                        Status = false,
                                        Message = msg
                                    };

                                    errorPmol.Add(pmolMsg1);
                                    continue;
                                }
                            }

                            foreach (var item in groupTeam)
                            {
                                var company = dbconnection
                                    .Query<string>("SELECT CabCompany.Name FROM CabCompany WHERE Id = @Id",
                                        new { Id = item.Key }).FirstOrDefault();

                                var contactManager = dbconnection.Query<string>(
                                    @"SELECT                             
                             CabPersonCompany.Id                        
                            FROM dbo.HRHeader
                            LEFT OUTER JOIN dbo.CabPersonCompany
                              ON HRHeader.PersonId = CabPersonCompany.Id
                             WHERE CabPersonCompany.CompanyId = @companyId AND HRHeader.IsContactManager = 1",
                                    new { companyId = item.Key }).FirstOrDefault();

                                var organization = VPParameter.Configuration.GetValue<string>("CompanyId");

                                var organizationContactManager = dbconnection.Query<string>(
                                    @"SELECT                             
                             CabPersonCompany.Id                        
                            FROM dbo.HRHeader
                            LEFT OUTER JOIN dbo.CabPersonCompany
                              ON HRHeader.PersonId = CabPersonCompany.Id
                             WHERE CabPersonCompany.CompanyId = @companyId AND HRHeader.IsContactManager = 1",
                                    new { companyId = organization }).FirstOrDefault();

                                string POSequenceId = null;
                                string val = null;
                                string PoId = null;


                                var location = await VPParameter.ProjectDefinitionRepository.GetLocationByProjectId(
                                    project.SequenceCode, VPParameter.Lang,
                                    VPParameter.TenantProvider);


                                var idGenerator = new IdGenerator();

                                POSequenceId = idGenerator.GenerateId(applicationDbContext, "PO-", "POSequence");
                                POSequenceId = Regex.Replace(POSequenceId, "PO", "RFQ");

                                var query =
                                    @"INSERT INTO [dbo].[POHeader] ([Id],[Title],[Name],[POTypeId],[POStatusId],[Comments],[ProjectSequenceCode],[IsDeleted],[SequenceId],[CreatedBy],[CreatedDate],[ModifiedBy],[ModifiedDate],[CustomerCompanyId],[CustomerId],[CustomerReference],[SuplierCompanyId],[SupplierCabPersonCompanyId],[SupplierReference], [NoOfMaterials] ,[NoOfTools] ,[NoOfConsumables] ,[NoOfLabours], [DeliveryDate],[LocationId], [TotalAmount], [IsClone] ,[IsCu] ,[DeliveryRequest] ,[TaxonomyId],PORequestType,RequestedDate,ExpectedDate,AvailableProbability,RequestedProbability ) VALUES (@Id ,@Title ,@Name ,@POTypeId ,@POStatusId ,@Comments ,@ProjectSequenceCode ,@IsDeleted ,@SequenceId ,@CreatedBy ,@CreatedDate ,@ModifiedBy ,@ModifiedDate ,@CustomerCompanyId ,@CustomerId ,@CustomerReference ,@SuplierCompanyId ,@SupplierCabPersonCompanyId ,@SupplierReference ,@NoOfMaterials ,@NoOfTools ,@NoOfConsumables ,@NoOfLabours, @DeliveryDate,@LocationId, @TotalAmount, @IsClone , @IsCu ,@DeliveryLocation ,@WarehouseTaxonomyId,@PORequestType,@RequestedDate,@ExpectedDate, @AvailableProbability, @RequestedProbability )";

                                double unitPrice = 0;

                                string price = null;
                                if (selectProjectConfig == null)
                                    price = cuConnection.Query<string>(
                                        "SELECT ResourcePrice FROM CpcVendor WHERE CoperateProductCatalogId = @cpcId AND CompanyId = @companyId AND IsDeleted = 0 ",
                                        new
                                        {
                                            cpcId = VPParameter.Configuration.GetValue<string>("RFQCpc"),
                                            companyId = item.Key
                                        }).FirstOrDefault();
                                else
                                    price = selectProjectConfig;


                                if (price != null)
                                {
                                    unitPrice = price.ToDouble();
                                }
                                else
                                {
                                    //throw new Exception( company + " need to add as vendor List Of RFQ CPC item");
                                    // errorPmol.Add(pmol.ProjectMoleculeId);
                                    var pmolMsg1 = new PmolResults
                                    {
                                        PmolTitle = pmol.Title,
                                        Status = false,
                                        Message = company + " need to add as vendor List Of RFQ CPC item"
                                    };

                                    errorPmol.Add(pmolMsg1);

                                    continue;
                                }


                                var quantity = (unit * item.Count()).ToString("0.00");
                                var totalprice = (quantity.ToDouble() * unitPrice).ToString("0.00");

                                var parameters = new
                                {
                                    Id = Guid.NewGuid().ToString(),
                                    Title = POSequenceId + " " + pmol.Title + " " + company,
                                    Name = pmol.Title + " " + company,
                                    POTypeId = "4010e768-3e06-4702-b337-ee367a82addb",
                                    POStatusId = "94282458-0b40-40a3-b0f9-c2e40344c8f1",
                                    Comments = val,
                                    ProjectSequenceCode = project.SequenceCode,
                                    ISDeleted = false,
                                    SequenceId = POSequenceId,
                                    CreatedBy = VPParameter.UserId,
                                    CreatedDate = DateTime.UtcNow,
                                    ModifiedBy = VPParameter.UserId,
                                    ModifiedDate = DateTime.UtcNow,
                                    CustomerCompanyId = organization,
                                    CustomerId = organizationContactManager,
                                    CustomerReference = val,
                                    SuplierCompanyId = item.Key,
                                    SupplierCabPersonCompanyId = contactManager,
                                    SupplierReference = "ref 01",
                                    NoOfMaterials = val,
                                    NoOfTools = val,
                                    NoOfConsumables = val,
                                    NoOfLabours = val,
                                    DeliveryDate = pmol.ExecutionDate,
                                    LocationId = location.Id,
                                    TotalAmount = totalprice.ToFloat(),
                                    IsClone = false,
                                    IsCu = false,
                                    DeliveryLocation = val,
                                    WarehouseTaxonomyId = val,
                                    PORequestType = "f4d6ba08-3937-44ca-a0a1-7cf33c03e290",
                                    RequestedDate = DateTime.UtcNow,
                                    ExpectedDate = val,
                                    AvailableProbability = val,
                                    RequestedProbability = val
                                };


                                PoId = parameters.Id;


                                var resoursequery =
                                    @"INSERT INTO dbo.POProduct ( Id ,HeaderTitle ,[Key] ,Name ,PbsProductItemType ,PbsProductItemTypeId ,PbsProductStatus ,PbsProductStatusId ,PbsToleranceState ,PbsToleranceStateId ,ProductId ,Title ,PComment ,CComment ,PQuantity ,CQuantity ,Mou ,PUnitPrice ,CUnitPrice ,PTotalPrice ,CTotalPrice ,CCrossReference ,PCrossReference ,ProjectTitle ,POHeaderId,RequestedDeliveryDate,ExpectedDeliveryDate,IsPo ) VALUES ( @Id ,@HeaderTitle ,@Key ,@Name ,@PbsProductItemType ,@PbsProductItemTypeId ,@PbsProductStatus ,@PbsProductStatusId ,@PbsToleranceState ,@PbsToleranceStateId ,@ProductId ,@Title ,@PComment ,@CComment ,@PQuantity ,@CQuantity ,@Mou ,@PUnitPrice ,@CUnitPrice ,@PTotalPrice ,@CTotalPrice ,@CCrossReference ,@PCrossReference ,@ProjectTitle ,@POHeaderId,@RequestedDeliveryDate,@ExpectedDeliveryDate,@IsPo );";


                                var reparameters = new
                                {
                                    Id = Guid.NewGuid().ToString(),
                                    HeaderTitle = pmol.Title,
                                    Key = squareMeters.PbsSequenceId,
                                    Name = val,
                                    PbsProductItemType = "Subcontractor",
                                    PbsProductItemTypeId = "48a7dd9c-55ac-4e7c-a2f3-653811c0eb14",
                                    PbsProductStatus = "In Development",
                                    PbsProductStatusId = "94282458-0b40-40a3-b0f9-c2e40344c8f1",
                                    PbsToleranceState = "Out of Tolerance",
                                    PbsToleranceStateId = "8f33bdf6-7600-4ad7-b558-c98899c1e5b2",
                                    pmol.ProductId,
                                    Title = squareMeters.PbsTitle,
                                    PComment = "",
                                    CComment = "",
                                    PQuantity = quantity,
                                    CQuantity = quantity,
                                    Mou = "Square Meter",
                                    PUnitPrice = unitPrice,
                                    CUnitPrice = unitPrice,
                                    PTotalPrice = totalprice,
                                    CTotalPrice = totalprice,
                                    CCrossReference = "",
                                    PCrossReference = "",
                                    ProjectTitle = project.SequenceCode,
                                    POHeaderId = PoId,
                                    IsUsed = false,
                                    RequestedDeliveryDate = val,
                                    ExpectedDeliveryDate = val,
                                    IsPO = val
                                };


                                await cuConnection.ExecuteAsync(query, parameters);

                                await cuConnection.ExecuteAsync(resoursequery, reparameters);

                                var pmolMsg = new PmolResults
                                {
                                    PmolTitle = pmol.Title,
                                    Status = true,
                                    Message = "Rfq generated successfully"
                                };

                                errorPmol.Add(pmolMsg);
                            }

                            foreach (var person in teams)
                            {
                                // person.Name = members.FirstOrDefault(x => x.Id == person.Id).Name;
                                // person.CompanyId = members.FirstOrDefault(x => x.Id == person.CabPersonId).CompanyId;
                                var param = new
                                {
                                    Id = Guid.NewGuid().ToString(),
                                    TeamRoleId = person.Id,
                                    PmolId = pmol.Id
                                };

                                await connection.ExecuteAsync(teamInsert, param);
                            }
                        }
                        else
                        {
                            var pmolMsg = new PmolResults
                            {
                                PmolTitle = pmol.Title,
                                Status = false,
                                Message = "pbs scope of work not added to this pmol"
                            };

                            errorPmol.Add(pmolMsg);
                        }
                    }
                    else
                    {
                        var pmolMsg = new PmolResults
                        {
                            PmolTitle = pmol.Title,
                            Status = false,
                            Message = "Rfq Already Generated for this pmol"
                        };

                        errorPmol.Add(pmolMsg);
                    }
                }
            }

        // if (errorPmol.Any())
        // {
        //     var combinedString = string.Join( ",", errorPmol.Distinct().ToList());
        //
        //     var msg = "cannot create RFQ for " + combinedString + " pmols. please fix the issues and retry.";
        //
        //     throw new Exception(msg);
        // }

        errorPmol = errorPmol.DistinctBy(x => x.PmolTitle).ToList();
        result.RfqRequested = errorPmol.Count.ToString();
        result.RfqApproved = errorPmol.Count(x => x.Status).ToString();
        result.Date = VPParameter.ProjectsPmol.ExecutionDate;
        result.PmolResults = errorPmol;

        return result;
    }

    public async Task<RfqResults> GenerateRFQNew(VPParameter VPParameter)
    {
        await using var dbconnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);

        var options = new DbContextOptions<ApplicationDbContext>();
        var applicationDbContext = new ApplicationDbContext(options, VPParameter.TenantProvider);

        var cuConnectionString = ConnectionString.MapConnectionString(
            VPParameter.ProjectsPmol.ContractingUnit.FirstOrDefault(),
            null, VPParameter.TenantProvider);
        await using var cuConnection = new SqlConnection(cuConnectionString);

        List<ProjectDefinition> db;

        var result = new RfqResults();
        var errorPmol = new List<PmolResults>();

        // string selectBu = @"SELECT OrganizationTaxonomy.Id FROM dbo.OrganizationTaxonomy LEFT OUTER JOIN dbo.CabPersonCompany ON OrganizationTaxonomy.PersonId = CabPersonCompany.Id LEFT OUTER JOIN dbo.OrganizationTaxonomy c ON OrganizationTaxonomy.ParentId = c.Id WHERE Oid = @UserId AND OrganizationTaxonomy.OrganizationTaxonomyLevelId = 'oo10e768-3e06-po02-b337-ee367a82admn' AND c.Title = @Cu";
        //
        // var buId = dbconnection.Query<string>(selectBu, new {VPParameter.UserId,Cu = VPParameter.ProjectsPmol.ContractingUnit.FirstOrDefault()}).FirstOrDefault();

        var selectProject =
            @"SELECT ProjectDefinition.Id, ProjectDefinition.Title,ProjectDefinition.SequenceCode,ProjectDefinition.ProjectConnectionString ,ProjectDefinition.ProjectManagerId ,CabCompany.SequenceCode AS ContractingUnitId FROM dbo.ProjectDefinition LEFT OUTER JOIN CabCompany ON ProjectDefinition.ContractingUnitId = CabCompany.Id LEFT OUTER JOIN dbo.ProjectClassification ON ProjectDefinition.Id = ProjectClassification.ProjectId  WHERE ProjectDefinition.IsDeleted = 0 AND ProjectClassification.ProjectClassificationBuisnessUnit = @BuId ";

        var sb2 = new StringBuilder(selectProject);

        if (VPParameter.ProjectsPmol.ContractingUnit.Any())
            sb2.Append(" And CabCompany.SequenceCode IN @ContractingUnits ORDER BY ProjectDefinition.SequenceCode ");
        else
            sb2.Append(" ORDER BY ProjectDefinition.SequenceCode ");


        if (VPParameter.ProjectsPmol.BuId != null)
            db = dbconnection
                .Query<ProjectDefinition>(
                    sb2.ToString(),
                    new
                    {
                        Oid = VPParameter.UserId, ContractingUnits = VPParameter.ProjectsPmol.ContractingUnit,
                        BuID = VPParameter.ProjectsPmol.BuId
                    }).ToList();
        else
            // db = dbconnection
            //     .Query<ProjectDefinition>(
            //         sb2.ToString(),
            //         new
            //         {
            //             Oid = VPParameter.UserId, ContractingUnits = VPParameter.ProjectsPmol.ContractingUnit,
            //             BuID = buId
            //         }).ToList();
            return null;

        var memberselect =
            @"SELECT PersonId As Id,CompanyId , cc.Name AS CompanyName  FROM [dbo].[CabPersonCompany] LEFT OUTER JOIN CabCompany cc ON CabPersonCompany.CompanyId = cc.Id";
        IEnumerable<PmolTeamMeber> members;
        var teamList = new List<RfqTeamMeber>();

        members = dbconnection.Query<PmolTeamMeber>(memberselect);

        var companyList = dbconnection.Query<CabCompany>("SELECT * FROM CabCompany WHERE IsDeleted = 0").ToList();


        var reqPerson = dbconnection
            .Query<Person1>(
                "SELECT cp.FullName AS [Text] , cp.Id AS [Key] FROM CabPersonCompany LEFT OUTER JOIN CabPerson cp ON CabPersonCompany.PersonId = cp.Id WHERE Oid = @oid",
                new { oid = VPParameter.UserId }).FirstOrDefault();

        result.RequestedBy = reqPerson;

        if (db.Any())
            foreach (var project in db)
            {
                var teamQuery = @"SELECT 
                                                 PmolTeamRole.Id As Id
                                                ,PmolTeamRole.CabPersonId As CabPersonId
                                                ,PmolTeamRole.RoleId
                                                ,PMolPlannedWorkLabour.PmolId
                                                FROM dbo.PMolPlannedWorkLabour                               
                                                LEFT OUTER JOIN dbo.PmolTeamRole
                                                  ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id
                                                WHERE PMolPlannedWorkLabour.IsDeleted = 0
                                                AND PmolTeamRole.IsDeleted = 0
                                                AND PmolTeamRole.CabPersonId IS NOT NULL AND PMolPlannedWorkLabour.PmolId = @PmolId ";


                await using var connection = new SqlConnection(project.ProjectConnectionString);


                var pmolList = connection.Query<PmolData>(
                    @"SELECT PMol.Id ,PMol.ProjectMoleculeId ,PMol.Name ,PMol.ForemanMobileNumber ,PMol.ExecutionDate ,PMol.ForemanId ,PMol.Comment ,PMol.IsDeleted ,PMol.TypeId ,PMol.StatusId ,PMol.Title ,PMol.BorId ,PMol.EndDateTime ,PMol.IsFinished ,PMol.StartDateTime ,PMol.IsBreak ,PMol.PmolType ,PMol.ProductId ,PMol.ProjectSequenceCode ,PMol.ParentId ,PMol.ExecutionEndTime ,PMol.ExecutionStartTime ,PMol.LocationId ,PbsProduct.Name AS ProductName FROM dbo.PMol LEFT OUTER JOIN dbo.PbsProduct ON PMol.ProductId = PbsProduct.Id WHERE PMol.IsDeleted = 0 AND PMol.ExecutionDate = @ExecutionDate",
                    new { VPParameter.ProjectsPmol.ExecutionDate });


                foreach (var pmol in pmolList)
                {
                    var isRfqGenerated = connection
                        .Query<PmolRfq>("Select * From PmolRfq Where PmolId = @PmolId",
                            new { PmolId = pmol.Id });

                    var teams = connection.Query<RfqTeamMeber>(teamQuery,
                        new
                        {
                            PmolId = pmol.Id
                        }).ToList();

                    if (!teams.Any())
                    {
                        var pmolMsg1 = new PmolResults
                        {
                            PmolTitle = pmol.Title,
                            Status = false,
                            Message = "no team members assign to this pmol"
                        };

                        errorPmol.Add(pmolMsg1);

                        //errorPmol.Add(pmol.ProjectMoleculeId);
                        continue;
                    }

                    if (isRfqGenerated.Count() != teams.Count())
                    {
                        teams.RemoveAll(x => isRfqGenerated.Select(v => v.TeamRoleId).Contains(x.Id));

                        var teamInsert =
                            @"INSERT INTO dbo.PmolRfq ( Id ,TeamRoleId ,PmolId ) VALUES (@Id ,@TeamRoleId ,@PmolId )";
                        foreach (var person in teams)
                        {
                            // person.Name = members.FirstOrDefault(x => x.Id == person.Id).Name;
                            var workingCompany = dbconnection.Query<string>(@"SELECT                             
                                   HRHeader.WorkingOrganization                        
                                       FROM dbo.HRHeader
                                       LEFT OUTER JOIN dbo.CabPersonCompany
                                       ON HRHeader.PersonId = CabPersonCompany.Id
                                   WHERE CabPersonCompany.PersonId = @PersonId AND HRHeader.WorkingOrganization IS NOT NULL ",
                                new { PersonId = person.CabPersonId }).FirstOrDefault();

                            if (workingCompany == null)
                            {
                                person.CompanyId = members.FirstOrDefault(x => x.Id == person.CabPersonId)
                                    .CompanyId;
                                person.CompanyName = members.FirstOrDefault(x => x.Id == person.CabPersonId)
                                    .CompanyName;
                            }
                            else
                            {
                                person.CompanyId = workingCompany;
                                person.CompanyName = companyList.FirstOrDefault(x => x.Id == workingCompany)
                                    .Name;
                            }

                            person.PmolTitle = pmol.Title;
                            person.ProjectSequenceId = project.SequenceCode;
                        }

                        var squareMeters = connection
                            .Query<PbsScopeOfWorkRfq>(
                                "Select PbsScopeOfWork.*,PbsProduct.ProductId As PbsSequenceId,PbsProduct.Title As PbsTitle  From PbsScopeOfWork LEFT OUTER JOIN PbsProduct ON PbsScopeOfWork.ProductId = PbsProduct.Id  Where PbsScopeOfWork.ProductId = @ProductId",
                                new { pmol.ProductId }).FirstOrDefault();

                        if (squareMeters != null)
                        {
                            var unit = squareMeters.Quantity.ToDouble() / teams.Count;

                            var groupTeam = teams.GroupBy(x => x.CompanyId);

                            var isHaveContactManager = dbconnection.Query<string>(
                                @"SELECT                             
                                             CabPersonCompany.CompanyId                        
                                            FROM dbo.HRHeader
                                            LEFT OUTER JOIN dbo.CabPersonCompany
                                              ON HRHeader.PersonId = CabPersonCompany.Id
                                             WHERE CabPersonCompany.CompanyId IN @companyIds AND HRHeader.IsContactManager = 1",
                                new { companyIds = teams.Select(x => x.CompanyId) });

                            var ff = teams.Where(x => isHaveContactManager.All(v => v != x.CompanyId))
                                .Select(c => c.CompanyName);

                            if (ff.Any())
                            {
                                //throw new Exception( "Please set contact manager for all the companies ");
                                var combinedString = string.Join(",", ff.Distinct().ToList());

                                var msg = "Please set contact manager for " + combinedString + " companies";


                                var pmolMsg1 = new PmolResults
                                {
                                    PmolTitle = pmol.Title,
                                    Status = false,
                                    Message = msg
                                };

                                errorPmol.Add(pmolMsg1);

                                //errorPmol.Add(pmol.ProjectMoleculeId);
                                continue;
                            }

                            var selectProjectConfig =
                                dbconnection.Query<string>(
                                    "Select UnitPrice from ProjectConfiguration where ProjectId = @ProjectId",
                                    new { ProjectId = project.Id }).FirstOrDefault();

                            if (selectProjectConfig == null)
                            {
                                var priceList = cuConnection.Query<string>(
                                    "SELECT CompanyId FROM CpcVendor WHERE CoperateProductCatalogId = @cpcId AND CompanyId IN @companyIds AND IsDeleted = 0 ",
                                    new
                                    {
                                        cpcId = VPParameter.Configuration.GetValue<string>("RFQCpc"),
                                        companyIds = teams.Select(x => x.CompanyId)
                                    });

                                var hh = teams.Where(x => priceList.All(v => v != x.CompanyId))
                                    .Select(c => c.CompanyName);

                                if (hh.Any())
                                {
                                    //throw new Exception( company + " need to add as vendor List Of RFQ CPC item");
                                    //errorPmol.Add(pmol.ProjectMoleculeId);
                                    var combinedString = string.Join(",", hh.Distinct().ToList());

                                    var msg = combinedString + " need to add as vendor List Of RFQ CPC item";
                                    var pmolMsg1 = new PmolResults
                                    {
                                        PmolTitle = pmol.Title,
                                        Status = false,
                                        Message = msg
                                    };

                                    errorPmol.Add(pmolMsg1);
                                    continue;
                                }
                            }

                            foreach (var item in groupTeam)
                            {
                                var company = dbconnection
                                    .Query<string>("SELECT CabCompany.Name FROM CabCompany WHERE Id = @Id",
                                        new { Id = item.Key }).FirstOrDefault();


                                double unitPrice = 0;

                                string price = null;
                                if (selectProjectConfig == null)
                                    price = cuConnection.Query<string>(
                                        "SELECT ResourcePrice FROM CpcVendor WHERE CoperateProductCatalogId = @cpcId AND CompanyId = @companyId AND IsDeleted = 0 ",
                                        new
                                        {
                                            cpcId = VPParameter.Configuration.GetValue<string>("RFQCpc"),
                                            companyId = item.Key
                                        }).FirstOrDefault();
                                else
                                    price = selectProjectConfig;


                                if (price != null)
                                {
                                    unitPrice = price.ToDouble();
                                }
                                else
                                {
                                    //throw new Exception( company + " need to add as vendor List Of RFQ CPC item");
                                    // errorPmol.Add(pmol.ProjectMoleculeId);
                                    var pmolMsg1 = new PmolResults
                                    {
                                        PmolTitle = pmol.Title,
                                        Status = false,
                                        Message = company + " need to add as vendor List Of RFQ CPC item"
                                    };

                                    errorPmol.Add(pmolMsg1);

                                    continue;
                                }


                                // var quantity = (unit * item.Count()).ToString("0.00");
                                var quantity = unit.ToString("0.00");
                                var totalprice = (quantity.ToDouble() * unitPrice).ToString("0.00");

                                teams.Where(v => v.CompanyId == item.Key).ToList().ForEach(x => x.Quantity = quantity);
                                teams.Where(v => v.CompanyId == item.Key).ToList()
                                    .ForEach(x => x.UnitPrice = unitPrice);

                                var pmolMsg = new PmolResults
                                {
                                    PmolTitle = pmol.Title,
                                    Status = true,
                                    Message = "Rfq generated successfully"
                                };

                                errorPmol.Add(pmolMsg);
                            }

                            teamList.AddRange(teams);

                            foreach (var person in teams)
                            {
                                // person.Name = members.FirstOrDefault(x => x.Id == person.Id).Name;
                                // person.CompanyId = members.FirstOrDefault(x => x.Id == person.CabPersonId).CompanyId;
                                var param = new
                                {
                                    Id = Guid.NewGuid().ToString(),
                                    TeamRoleId = person.Id,
                                    PmolId = pmol.Id
                                };

                                await connection.ExecuteAsync(teamInsert, param);
                            }
                        }
                        else
                        {
                            var pmolMsg = new PmolResults
                            {
                                PmolTitle = pmol.Title,
                                Status = false,
                                Message = "pbs scope of work not added to this pmol"
                            };

                            errorPmol.Add(pmolMsg);
                        }
                    }
                    else
                    {
                        var pmolMsg = new PmolResults
                        {
                            PmolTitle = pmol.Title,
                            Status = false,
                            Message = "Rfq Already Generated for this pmol"
                        };

                        errorPmol.Add(pmolMsg);
                    }
                }
            }

        var filteredTeamList = teamList.GroupBy(x => x.CabPersonId)
            .Select(cab => new RfqTeamMeber
            {
                Id = cab.FirstOrDefault().Id,
                CabPersonId = cab.Key,
                CompanyId = cab.FirstOrDefault().CompanyId,
                CompanyName = cab.FirstOrDefault().CompanyName,
                UnitPrice = cab.Average(x => x.UnitPrice),
                Quantity = cab.Sum(x => x.Quantity.ToDouble()).ToString("0.00"),
                PmolId = cab.FirstOrDefault().PmolId
            })
            .ToList();

        foreach (var teamData in filteredTeamList.GroupBy(x => x.CompanyId))
        {
            var contactManager = dbconnection.Query<string>(
                @"SELECT                             
                             CabPersonCompany.Id                        
                            FROM dbo.HRHeader
                            LEFT OUTER JOIN dbo.CabPersonCompany
                              ON HRHeader.PersonId = CabPersonCompany.Id
                             WHERE CabPersonCompany.CompanyId = @companyId AND HRHeader.IsContactManager = 1",
                new { companyId = teamData.Key }).FirstOrDefault();

            var organization = VPParameter.Configuration.GetValue<string>("CompanyId");

            var organizationContactManager = dbconnection.Query<string>(
                @"SELECT                             
                             CabPersonCompany.Id                        
                            FROM dbo.HRHeader
                            LEFT OUTER JOIN dbo.CabPersonCompany
                              ON HRHeader.PersonId = CabPersonCompany.Id
                             WHERE CabPersonCompany.CompanyId = @companyId AND HRHeader.IsContactManager = 1",
                new { companyId = organization }).FirstOrDefault();

            string POSequenceId = null;
            string val = null;
            string PoId = null;


            // var location = await VPParameter.ProjectDefinitionRepository.GetLocationByProjectId(
            //     VPParameter.uPrinceCustomerContext, teamData.FirstOrDefault().ProjectSequenceId, VPParameter.Lang,
            //     VPParameter.TenantProvider);


            var idGenerator = new IdGenerator();

            POSequenceId = idGenerator.GenerateId(applicationDbContext, "PO-", "POSequence");
            POSequenceId = Regex.Replace(POSequenceId, "PO", "RFQ");

            var query =
                @"INSERT INTO [dbo].[POHeader] ([Id],[Title],[Name],[POTypeId],[POStatusId],[Comments],[ProjectSequenceCode],[IsDeleted],[SequenceId],[CreatedBy],[CreatedDate],[ModifiedBy],[ModifiedDate],[CustomerCompanyId],[CustomerId],[CustomerReference],[SuplierCompanyId],[SupplierCabPersonCompanyId],[SupplierReference], [NoOfMaterials] ,[NoOfTools] ,[NoOfConsumables] ,[NoOfLabours], [DeliveryDate],[LocationId], [TotalAmount], [IsClone] ,[IsCu] ,[DeliveryRequest] ,[TaxonomyId],PORequestType,RequestedDate,ExpectedDate,AvailableProbability,RequestedProbability ) VALUES (@Id ,@Title ,@Name ,@POTypeId ,@POStatusId ,@Comments ,@ProjectSequenceCode ,@IsDeleted ,@SequenceId ,@CreatedBy ,@CreatedDate ,@ModifiedBy ,@ModifiedDate ,@CustomerCompanyId ,@CustomerId ,@CustomerReference ,@SuplierCompanyId ,@SupplierCabPersonCompanyId ,@SupplierReference ,@NoOfMaterials ,@NoOfTools ,@NoOfConsumables ,@NoOfLabours, @DeliveryDate,@LocationId, @TotalAmount, @IsClone , @IsCu ,@DeliveryLocation ,@WarehouseTaxonomyId,@PORequestType,@RequestedDate,@ExpectedDate, @AvailableProbability, @RequestedProbability )";

            var quantity = teamData.Sum(x => x.Quantity.ToDouble()).ToString("0.00");
            var unitPrice = teamData.Sum(x => x.UnitPrice);
            var totalprice = (quantity.ToDouble() * unitPrice).ToString("0.00");

            var company = dbconnection
                .Query<string>("SELECT CabCompany.Name FROM CabCompany WHERE Id = @Id",
                    new { Id = teamData.Key }).FirstOrDefault();

            var parameters = new
            {
                Id = Guid.NewGuid().ToString(),
                Title =
                    POSequenceId + " " + company + " " + VPParameter.ProjectsPmol.ExecutionDate?.ToShortDateString(),
                Name = company + " " + VPParameter.ProjectsPmol.ExecutionDate?.ToShortDateString(),
                POTypeId = "4010e768-3e06-4702-b337-ee367a82addb",
                POStatusId = "94282458-0b40-40a3-b0f9-c2e40344c8f1",
                Comments = val,
                ProjectSequenceCode = val,
                ISDeleted = false,
                SequenceId = POSequenceId,
                CreatedBy = VPParameter.UserId,
                CreatedDate = DateTime.UtcNow,
                ModifiedBy = VPParameter.UserId,
                ModifiedDate = DateTime.UtcNow,
                CustomerCompanyId = organization,
                CustomerId = organizationContactManager,
                CustomerReference = val,
                SuplierCompanyId = teamData.Key,
                SupplierCabPersonCompanyId = contactManager,
                SupplierReference = "ref 01",
                NoOfMaterials = val,
                NoOfTools = val,
                NoOfConsumables = val,
                NoOfLabours = val,
                DeliveryDate = VPParameter.ProjectsPmol.ExecutionDate,
                LocationId = val,
                TotalAmount = totalprice.ToFloat(),
                IsClone = false,
                IsCu = false,
                DeliveryLocation = val,
                WarehouseTaxonomyId = val,
                PORequestType = "f4d6ba08-3937-44ca-a0a1-7cf33c03e290",
                RequestedDate = DateTime.UtcNow,
                ExpectedDate = val,
                AvailableProbability = val,
                RequestedProbability = val
            };


            PoId = parameters.Id;


            var resoursequery =
                @"INSERT INTO dbo.POProduct ( Id ,HeaderTitle ,[Key] ,Name ,PbsProductItemType ,PbsProductItemTypeId ,PbsProductStatus ,PbsProductStatusId ,PbsToleranceState ,PbsToleranceStateId ,ProductId ,Title ,PComment ,CComment ,PQuantity ,CQuantity ,Mou ,PUnitPrice ,CUnitPrice ,PTotalPrice ,CTotalPrice ,CCrossReference ,PCrossReference ,ProjectTitle ,POHeaderId,RequestedDeliveryDate,ExpectedDeliveryDate,IsPo ) VALUES ( @Id ,@HeaderTitle ,@Key ,@Name ,@PbsProductItemType ,@PbsProductItemTypeId ,@PbsProductStatus ,@PbsProductStatusId ,@PbsToleranceState ,@PbsToleranceStateId ,@ProductId ,@Title ,@PComment ,@CComment ,@PQuantity ,@CQuantity ,@Mou ,@PUnitPrice ,@CUnitPrice ,@PTotalPrice ,@CTotalPrice ,@CCrossReference ,@PCrossReference ,@ProjectTitle ,@POHeaderId,@RequestedDeliveryDate,@ExpectedDeliveryDate,@IsPo );";


            var reparameters = new
            {
                Id = Guid.NewGuid().ToString(),
                HeaderTitle = val,
                Key = val,
                Name = val,
                PbsProductItemType = "Subcontractor",
                PbsProductItemTypeId = "48a7dd9c-55ac-4e7c-a2f3-653811c0eb14",
                PbsProductStatus = "In Development",
                PbsProductStatusId = "94282458-0b40-40a3-b0f9-c2e40344c8f1",
                PbsToleranceState = "Out of Tolerance",
                PbsToleranceStateId = "8f33bdf6-7600-4ad7-b558-c98899c1e5b2",
                ProductId = val,
                Title = val,
                PComment = "",
                CComment = "",
                PQuantity = quantity,
                CQuantity = quantity,
                Mou = "Square Meter",
                PUnitPrice = unitPrice,
                CUnitPrice = unitPrice,
                PTotalPrice = totalprice,
                CTotalPrice = totalprice,
                CCrossReference = "",
                PCrossReference = "",
                ProjectTitle = val,
                POHeaderId = PoId,
                IsUsed = false,
                RequestedDeliveryDate = val,
                ExpectedDeliveryDate = val,
                IsPO = val
            };


            await cuConnection.ExecuteAsync(query, parameters);

            await cuConnection.ExecuteAsync(resoursequery, reparameters);
        }


        // if (errorPmol.Any())
        // {
        //     var combinedString = string.Join( ",", errorPmol.Distinct().ToList());
        //
        //     var msg = "cannot create RFQ for " + combinedString + " pmols. please fix the issues and retry.";
        //
        //     throw new Exception(msg);
        // }

        errorPmol = errorPmol.DistinctBy(x => x.PmolTitle).ToList();
        result.RfqRequested = errorPmol.Count.ToString();
        result.RfqApproved = errorPmol.Count(x => x.Status).ToString();
        result.Date = VPParameter.ProjectsPmol.ExecutionDate;
        result.PmolResults = errorPmol;

        return result;
    }

    public async Task<string> DeleteLabourFromProjectDayPlanning(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.DeleteLabour.Cu,
            VPParameter.DeleteLabour.ProjectSequenceCode, VPParameter.TenantProvider);

        var cuConnectionString =
            ConnectionString.MapConnectionString(VPParameter.DeleteLabour.Cu, null, VPParameter.TenantProvider);

        await using var dbConnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);

        await using var connection = new SqlConnection(connectionString);

        await using var cuConnection = new SqlConnection(cuConnectionString);


        var query = @"UPDATE dbo.PmolTeamRole SET IsDeleted = 1 WHERE Id = @Id ";

        await connection.ExecuteAsync(query, new { Id = VPParameter.DeleteLabour.TeamRoleId });

        var roleId = connection.Query<string>("Select RoleId From PmolTeamRole Where Id = @Id",
            new { Id = VPParameter.DeleteLabour.TeamRoleId }).FirstOrDefault();

        if (roleId == "Foreman")
        {
            await connection.ExecuteAsync("UPDATE PMol SET ForemanId = null Where Id = @Id ",
                new { Id = VPParameter.DeleteLabour.PmolId });
        }
        string labourQuery = @"SELECT PMol.ExecutionDate ,PMolPlannedWorkLabour.Id FROM dbo.PMolPlannedWorkLabour INNER JOIN dbo.PMol ON PMolPlannedWorkLabour.PmolId = PMol.Id INNER JOIN dbo.PmolTeamRole ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id WHERE PmolTeamRole.Id = @Id";

        var labourItem = connection.Query<Pmol>(labourQuery, new {Id = VPParameter.DeleteLabour.TeamRoleId})
            .FirstOrDefault();
        
        var cabPersonCompanyId = dbConnection
            .Query<string>("SELECT Id FROM CabPersonCompany WHERE PersonId = @personId",
                new { personId = VPParameter.DeleteLabour.CabPersonId }).FirstOrDefault();

        var organizationPmol = dbConnection
            .Query<OrganizationTeamPmol>("SELECT * FROM dbo.OrganizationTeamPmol WHERE PmolId = @PmolId",
                new { VPParameter.DeleteLabour.PmolId }).FirstOrDefault();

        if (organizationPmol != null)
        {
            var team = dbConnection.Query<OrganizationTaxonomy>(
                "SELECT * FROM dbo.OrganizationTaxonomy WHERE Id = @Id",
                new { Id = organizationPmol.OrganizationTeamId }).FirstOrDefault();

            const string thisWeekTeamsSql = @"SELECT
                                          ParentId
                                         ,PersonId
                                        FROM OrganizationTaxonomy
                                        WHERE PersonId IS NOT NULL
                                        AND ParentId IN (SELECT Id FROM dbo.OrganizationTaxonomy WHERE ParentId = @buId AND (EndDate = @EndDate OR EndDate IS NULL))
                                        AND OrganizationTaxonomyLevelId = 'we10e768-3e06-po02-b337-ee367a82adwe'
                                        ORDER BY ModifiedDate";

            var param2 = new
            {
                StartDate = organizationPmol.ExecutionDate?.AddDays(-(int)organizationPmol.ExecutionDate?.DayOfWeek)
                    .Date,
                EndDate = organizationPmol.ExecutionDate?.AddDays(-(int)organizationPmol.ExecutionDate?.DayOfWeek)
                    .AddDays(7).Date,
                VPParameter.DeleteLabour.PmolId,
                buId = team?.ParentId,
                cabPersonCompanyId,
                teamId = team?.Id
            };

            var thisWeekTeamsData = dbConnection.Query<OrganizationTaxonomy>(thisWeekTeamsSql, param2).ToList();

            var newTeamPersonData = dbConnection
                .Query<string>(
                    "SELECT OrganizationTaxonomy.PersonId  FROM dbo.OrganizationTaxonomy WHERE ParentId = @teamId AND PersonId != @cabPersonCompanyId",
                    param2).ToList();
         
            var groupThisWeekTeamsData = thisWeekTeamsData.GroupBy(e => e.ParentId);

            var check = false;

            string teamId = null;
            foreach (var i in groupThisWeekTeamsData)
            {
                var a = i.Select(e => e.PersonId).ToList();

                check = a.All(newTeamPersonData.Contains) && a.Count == newTeamPersonData.Count;

                if (check)
                {
                    teamId = i.Key;
                    break;
                }
            }

            if (check == true)
            {
                await dbConnection.ExecuteAsync(
                    @"UPDATE dbo.OrganizationTeamPmol SET OrganizationTeamId = @teamId WHERE PmolId = @PmolId",
                    new { teamId, VPParameter.DeleteLabour.PmolId, });
                
                await cuConnection.ExecuteAsync(
                    "delete From PmolAssignTime Where CabPersonId = @CabPersonId AND PmolId = @PmolId",
                    new
                    {
                        VPParameter.DeleteLabour.CabPersonId, VPParameter.DeleteLabour.PmolId
                    });
                
                await UpdateLabourRequiredTime(VPParameter,teamId,labourItem.Id,connectionString,labourItem.ExecutionDate.Value,true);

            }

            else
            {
                var newTeam =
                    @"INSERT INTO dbo.OrganizationTaxonomy (Id, Title, ParentId, OrganizationTaxonomyLevelId, PersonId, RoleId, ModifiedDate,StartDate,EndDate,TemporaryTeamNameId) VALUES (@Id, @Title, @ParentId, @OrganizationTaxonomyLevelId, (SELECT Id FROM CabPersonCompany WHERE PersonId = @PersonId), @RoleId, @ModifiedDate,@StartDate,@EndDate,@TemporaryTeamNameId)";

                var param1 = new
                {
                    Id = Guid.NewGuid().ToString(),
                    Title = organizationPmol.ContractingUnit,
                    team?.ParentId,
                    team?.OrganizationTaxonomyLevelId,
                    team?.PersonId,
                    team?.RoleId,
                    ModifiedDate = DateTime.UtcNow,
                    StartDate = organizationPmol.ExecutionDate
                        ?.AddDays(-(int)organizationPmol.ExecutionDate.Value.DayOfWeek).AddDays(1).Date,
                    EndDate = organizationPmol.ExecutionDate
                        ?.AddDays(-(int)organizationPmol.ExecutionDate.Value.DayOfWeek)
                        .AddDays(7).Date,
                    TemporaryTeamNameId = "7bcb4e8d-8e8c-487d-team-6b91c89fAcce"
                };

                await dbConnection.ExecuteAsync(newTeam, param1);
                await dbConnection.ExecuteAsync(
                    "Update OrganizationTeamPmol Set OrganizationTeamId = @OrganizationTeamId WHERE Id = @Id ",
                    new { organizationPmol.Id, OrganizationTeamId = param1.Id });

                var teamMembers = dbConnection.Query<OrganizationTaxonomy>(
                    "SELECT * FROM dbo.OrganizationTaxonomy WHERE ParentId = @Id AND PersonId != @PersonId ",
                    new { team.Id, PersonId = cabPersonCompanyId });

                var newTeamMember =
                    @"INSERT INTO dbo.OrganizationTaxonomy (Id, Title, ParentId, OrganizationTaxonomyLevelId, PersonId, RoleId, ModifiedDate,StartDate,EndDate,TemporaryTeamNameId) VALUES (@Id, @Title, @ParentId, @OrganizationTaxonomyLevelId, @PersonId, @RoleId, @ModifiedDate,@StartDate,@EndDate,@TemporaryTeamNameId)";

                foreach (var item in teamMembers)
                {
                    item.Id = Guid.NewGuid().ToString();
                    item.ParentId = param1.Id;
                    item.ModifiedDate = DateTime.UtcNow;

                    await dbConnection.ExecuteAsync(newTeamMember, item);
                }

                await cuConnection.ExecuteAsync(
                    "delete From PmolAssignTime Where CabPersonId = @CabPersonId AND PmolId = @PmolId",
                    new
                    {
                        VPParameter.DeleteLabour.CabPersonId, VPParameter.DeleteLabour.PmolId
                    });
                
                await UpdateLabourRequiredTime(VPParameter,param1.Id,labourItem.Id,connectionString,labourItem.ExecutionDate.Value,true);
            }
        }
        
        return VPParameter.DeleteLabour.TeamRoleId;
    }

    public async Task<string> DeleteVpLabourAssign(VPParameter VPParameter)
    {
        await using var dbConnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);

        var cuConnectionString =
            ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId, null,
                VPParameter.TenantProvider);

        await using var cuConnection = new SqlConnection(cuConnectionString);

        var vpHr = dbConnection.Query<VpHR>("Select * From VpHR WHERE Id = @Id", new { VPParameter.Id })
            .FirstOrDefault();

        var query = @"Delete From VpHR WHERE Id = @Id ";

        await dbConnection.ExecuteAsync(query, new { VPParameter.Id });

        var poLabourDelete =
            "Delete from POLabourTeam  WHERE PoId = @PoId AND PersonId = @PersonId AND CPCId = @CPCId";

        await cuConnection.ExecuteAsync(poLabourDelete, vpHr);

        return VPParameter.Id;
    }

    public async Task<string> RemoveLabour(VPParameter VPParameter)
    {
        try
        {
            await using var dbConnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);

            var removeFrom =
                @"DELETE FROM dbo.OrganizationTaxonomy WHERE ParentId = @TeamId AND PersonId = (SELECT Id FROM dbo.CabPersonCompany WHERE PersonId = @CabPersonId);";

            await dbConnection.ExecuteAsync(removeFrom,
                new { VPParameter.RemoveLabour.CabPersonId, VPParameter.RemoveLabour.TeamId });

            var teampmol = @"SELECT * FROM dbo.OrganizationTeamPmol WHERE OrganizationTeamId = @TeamId";

            var pmol = dbConnection.Query<OrganizationTeamPmol>(teampmol, new { VPParameter.RemoveLabour.TeamId })
                .ToList();

            foreach (var i in pmol)
            {
                i.ContractingUnit ??= "COM-0001";
                
                var connectionString = ConnectionString.MapConnectionString(i.ContractingUnit,
                    i.Project, VPParameter.TenantProvider);
                
                await using var connection = new SqlConnection(connectionString);
                
                var cuConnectionString = ConnectionString.MapConnectionString(i.ContractingUnit,
                    null, VPParameter.TenantProvider);
                
                await using var cuConnection = new SqlConnection(cuConnectionString);

                var labourItem = connection.Query<string>(
                    "SELECT PMolPlannedWorkLabour.Id FROM dbo.PmolTeamRole INNER JOIN dbo.PMolPlannedWorkLabour ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id WHERE PmolTeamRole.CabPersonId = @CabPersonId AND PMolPlannedWorkLabour.PmolId = @PmolId ",
                    new { VPParameter.RemoveLabour.CabPersonId, i.PmolId }).FirstOrDefault();
                if (labourItem != null)
                {
                    var delfrompmol =
                        @"DELETE FROM dbo.PmolTeamRole WHERE PmolLabourId = @PmolLabourId AND CabPersonId = @CabPersonId";

                    await connection.ExecuteAsync(delfrompmol,
                        new { VPParameter.RemoveLabour.CabPersonId, PmolLabourId = labourItem });
                    
                    await UpdateLabourRequiredTime(VPParameter,VPParameter.RemoveLabour.TeamId,labourItem,connectionString,i.ExecutionDate.Value,true);
                }

                await cuConnection.ExecuteAsync(
                    "Delete From PmolAssignTime Where CabPersonId = @CabPersonId AND PmolId = @PmolId",
                    new { CabPersonId = VPParameter.RemoveLabour.CabPersonId, PmolId = i.PmolId });
            }

            if (VPParameter.RemoveLabour.NewTeamId != null)
            {
                var name = dbConnection
                    .Query<string>("SELECT FullName FROM dbo.CabPerson WHERE Id  = @CabPersonId;",
                        new { VPParameter.RemoveLabour.CabPersonId }).FirstOrDefault();

                var personId = dbConnection
                    .Query<string>("SELECT Id FROM CabPersonCompany WHERE PersonId = @CabPersonId",
                        new { VPParameter.RemoveLabour.CabPersonId }).FirstOrDefault();

                var insert =
                    @"INSERT INTO dbo.OrganizationTaxonomy ( Id ,Title,ParentId ,OrganizationTaxonomyLevelId,PersonId ,RoleId,ModifiedDate,StartDate,EndDate ) VALUES ( @Id ,@Title,@ParentId ,@OrganizationTaxonomyLevelId ,@PersonId,@RoleId,@ModifiedDate,@StartDate,@EndDate);";

                var param = new
                {
                    Id = Guid.NewGuid(),
                    Title = name,
                    ParentId = VPParameter.RemoveLabour.NewTeamId,
                    OrganizationTaxonomyLevelId = "we10e768-3e06-po02-b337-ee367a82adwe",
                    PersonId = personId,
                    RoleId = "2210e768-msms-Item-team2-ee367a82ad22",
                    ModifiedDate = DateTime.UtcNow,
                    StartDate = "",
                    EndDate = ""
                };

                await dbConnection.ExecuteAsync(insert, param);

                var pmol1 = dbConnection.Query<OrganizationTeamPmol>(teampmol, new { TeamId =  VPParameter.RemoveLabour.NewTeamId })
                    .ToList();

                foreach (var i in pmol1)
                {
                    i.ContractingUnit ??= "COM-0001";
                    var connectionString = ConnectionString.MapConnectionString(i.ContractingUnit,
                        i.Project, VPParameter.TenantProvider);

                    await using var connection = new SqlConnection(connectionString);
                    
                    var cuConnectionString = ConnectionString.MapConnectionString(i.ContractingUnit,
                        null, VPParameter.TenantProvider);
                
                    await using var cuConnection = new SqlConnection(cuConnectionString);

                    var pmolLabourId = connection
                        .Query<string>(
                            "SELECT PMolPlannedWorkLabour.Id FROM PMolPlannedWorkLabour WHERE PmolId = @PmolId",
                            new { i.PmolId }).FirstOrDefault();

                    var inserttopmol =
                        @"INSERT INTO dbo.PmolTeamRole ( Id ,CabPersonId ,RoleId ,RequiredQuantity ,ConsumedQuantity ,Type ,PmolLabourId ,IsDeleted ) VALUES ( @Id ,@CabPersonId ,@RoleId ,0.0 ,0.0 ,@Type ,@PmolLabourId,0 );";

                    var teamParam = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        VPParameter.RemoveLabour.CabPersonId,
                        RoleId = "4837043c-119c-47e1-bbf2-1f32557fdf30",
                        Type = "Planned",
                        i.PmolId,
                        PmolLabourId = pmolLabourId
                    };

                    await connection.ExecuteAsync(inserttopmol, teamParam);
                    await UpdateLabourRequiredTime(VPParameter,VPParameter.RemoveLabour.NewTeamId,pmolLabourId,connectionString,i.ExecutionDate.Value,true);
                    
                    var item = connection
                        .Query<Pmol>("Select * from Pmol Where Id = @Id", new { Id = i.PmolId })
                        .FirstOrDefault();
            

                    var startTime = item?.ExecutionStartTime;
                    var endTime = item?.ExecutionEndTime;

                    double pmolTime;
                    if (startTime != null && endTime != null)
                    {
                        var d1 = DateTime.Parse(endTime) - DateTime.Parse(startTime);

                        pmolTime = d1.TotalHours;
                    }
                    else
                    {
                        pmolTime = 0;
                    }

                    var pmolTimeInsert =
                        @"INSERT INTO dbo.PmolAssignTime ( Id ,CabPersonId ,PmolId ,ExecutionDate ,ProjectSequenceId ,AssignTime ) VALUES ( @Id ,@CabPersonId ,@PmolId ,@ExecutionDate ,@ProjectSequenceId ,@AssignTime )";


                    var timeParam = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        CabPersonId = VPParameter.RemoveLabour.CabPersonId,
                        PmolId = i.PmolId,
                        item?.ExecutionDate,
                        ProjectSequenceId = i.Project,
                        AssignTime = pmolTime.ToString()
                    };

                    await cuConnection.ExecuteAsync(pmolTimeInsert, timeParam);
                }
            }

            return VPParameter.RemoveLabour.CabPersonId;
        }
        catch (Exception e)
        {
            //Console.WriteLine(e);
            throw;
        }
    }
    
    public async Task<string> RemoveLabourNew(VPParameter VPParameter)
    {
        try
        {
            var newTeam =
                @"INSERT INTO dbo.OrganizationTaxonomy (Id, Title, ParentId, OrganizationTaxonomyLevelId, PersonId, RoleId, ModifiedDate,StartDate,EndDate,TemporaryTeamNameId) VALUES (@Id, @Title, @ParentId, @OrganizationTaxonomyLevelId, @PersonId, @RoleId, @ModifiedDate,@StartDate,@EndDate,@TemporaryTeamNameId)";

            await using var connection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);

            var cabPreson = connection
                .Query<CabPerson>(
                    @"SELECT cpc.Id,FullName FROM dbo.CabPerson cp LEFT OUTER JOIN CabPersonCompany cpc ON cp.Id = cpc.PersonId WHERE cp.Id = @CabPersonId",new{VPParameter.RemoveLabour.CabPersonId})
                .FirstOrDefault();
            
            var parent = connection
                .Query<OrganizationTaxonomy>(
                    "SELECT * FROM dbo.OrganizationTaxonomy WHERE Id = @TeamId",
                    new {VPParameter.RemoveLabour.TeamId })
                .FirstOrDefault();

            DateTime startDate;
            DateTime endDate;
            if (VPParameter.RemoveLabour.ExecutionDate != null)
            {
                startDate = VPParameter.RemoveLabour.ExecutionDate.Value
                    .AddDays(-(int)VPParameter.RemoveLabour.ExecutionDate.Value.DayOfWeek).AddDays(1).Date;
                endDate = VPParameter.RemoveLabour.ExecutionDate.Value
                    .AddDays(-(int)VPParameter.RemoveLabour.ExecutionDate.Value.DayOfWeek).AddDays(7).Date;
            }
            else
            {
                startDate = parent.StartDate.Value;
                endDate = parent.EndDate.Value;
            }

            var param1 = new
            {
                Id = Guid.NewGuid().ToString(),
                parent.Title,
                parentId = parent.ParentId,
                OrganizationTaxonomyLevelId = "fg10e768-3e06-po02-b337-ee367a82adfg",
                PersonId = "",
                RoleId = "",
                ModifiedDate = DateTime.UtcNow,
                StartDate = startDate,
                EndDate = endDate,
                TemporaryTeamNameId = "7bcb4e8d-8e8c-487d-team-6b91c89fAcce"
            };
            
            await connection.ExecuteAsync(newTeam, param1);

            var team = connection
                .Query<OrganizationTaxonomy>(@"SELECT * FROM dbo.OrganizationTaxonomy WHERE ParentId = @TeamId AND PersonId != @CabPersonId",
                    new { VPParameter.RemoveLabour.TeamId,CabPersonId = cabPreson.Id })
                .ToList();

            var allTeams = connection
                .Query<OrganizationTaxonomy>(
                    @"SELECT PersonId,ParentId FROM dbo.OrganizationTaxonomy WHERE OrganizationTaxonomyLevelId = 'we10e768-3e06-po02-b337-ee367a82adwe' AND PersonId IS NOT NULL AND StartDate = @startDate", new {startDate})
                .ToList();

            var groupByTeam = allTeams.GroupBy(e => e.ParentId).ToList();

            bool isTeamAvailable = false;
            
            foreach (var i in groupByTeam)
            {
                var currentTeam = i.Select(e => e.PersonId).ToList();

                if (currentTeam.SequenceEqual(team.Select(e => e.PersonId)))
                {
                    isTeamAvailable = true;
                    
                    break;
                }
            }

            if (!isTeamAvailable)
            {
                foreach (var i in team)
                {
                    var param = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        i.Title,
                        ParentId = param1.Id,
                        OrganizationTaxonomyLevelId = "we10e768-3e06-po02-b337-ee367a82adwe",
                        i.PersonId,
                        i.RoleId,
                        ModifiedDate = DateTime.UtcNow,
                        StartDate = "",
                        EndDate = "",
                        TemporaryTeamNameId = ""
                    };

                    await connection.ExecuteAsync(newTeam, param);
                }
            }
            
            // if (VPParameter.ProjectSequenceId != null && VPParameter.ContractingUnitSequenceId != null)
            // {
            //     var sql =
            //         @"INSERT INTO dbo.OrganizationTeamPmol ( Id ,OrganizationTeamId ,ContractingUnit ,Project ) VALUES ( @Id ,@OrganizationTeamId ,@ContractingUnit ,@Project );";
            //
            //     var param2 = new
            //     {
            //         Id = Guid.NewGuid(), OrganizationTeamId = param1.Id,
            //         ContractingUnit = VPParameter.ContractingUnitSequenceId,
            //         Project = VPParameter.ProjectSequenceId
            //     };
            //
            //     await connection.ExecuteAsync(sql, param2);
            // }

            if (VPParameter.RemoveLabour.NewTeamId != null)
            {
                isTeamAvailable = false;  
                
                var team2 = connection
                    .Query<OrganizationTaxonomy>(
                        @"SELECT * FROM dbo.OrganizationTaxonomy WHERE ParentId = @NewTeamId AND PersonId != @CabPersonId",
                        new { VPParameter.RemoveLabour.NewTeamId, VPParameter.RemoveLabour.CabPersonId })
                    .ToList();
                
                var team2List = team2.Select(e => e.PersonId).ToList();
                team2List.Add(VPParameter.RemoveLabour.CabPersonId);
                
                foreach (var i in groupByTeam)
                {
                    var currentTeam = i.Select(e => e.PersonId).ToList();
                    if (currentTeam.SequenceEqual(team2List))
                    {
                        isTeamAvailable = true;
                        break;
                    }
                }

                if (!isTeamAvailable)
                {
                    var parent2 = connection
                        .Query<OrganizationTaxonomy>(
                            "SELECT * FROM dbo.OrganizationTaxonomy WHERE Id = @TeamId",
                            new { TeamId = VPParameter.RemoveLabour.NewTeamId })
                        .FirstOrDefault();

                    var param3 = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        parent2.Title,
                        parentId = parent2.ParentId,
                        OrganizationTaxonomyLevelId = "fg10e768-3e06-po02-b337-ee367a82adfg",
                        PersonId = "",
                        RoleId = "",
                        ModifiedDate = DateTime.UtcNow,
                        StartDate = startDate,
                        EndDate = endDate,
                        TemporaryTeamNameId = "7bcb4e8d-8e8c-487d-team-6b91c89fAcce"
                    };

                    await connection.ExecuteAsync(newTeam, param3);

                    /*var team2 = connection
                    .Query<OrganizationTaxonomy>(
                        @"SELECT * FROM dbo.OrganizationTaxonomy WHERE ParentId = @NewTeamId AND PersonId != @CabPersonId",
                        new { VPParameter.RemoveLabour.NewTeamId, VPParameter.RemoveLabour.CabPersonId })
                    .ToList();*/

                    var param4 = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        Title = cabPreson.FullName,
                        ParentId = param3.Id,
                        OrganizationTaxonomyLevelId = "we10e768-3e06-po02-b337-ee367a82adwe",
                        PersonId = cabPreson.Id,
                        RoleId = "2210e768-msms-Item-team2-ee367a82ad22",
                        ModifiedDate = DateTime.UtcNow,
                        StartDate = "",
                        EndDate = "",
                        TemporaryTeamNameId = ""
                    };

                    await connection.ExecuteAsync(newTeam, param4);
                
                    foreach (var i in team2)
                    {
                        var param = new
                        {
                            Id = Guid.NewGuid().ToString(),
                            i.Title,
                            ParentId = param3.Id,
                            OrganizationTaxonomyLevelId = "we10e768-3e06-po02-b337-ee367a82adwe",
                            i.PersonId,
                            i.RoleId,
                            ModifiedDate = DateTime.UtcNow,
                            StartDate = "",
                            EndDate = "",
                            TemporaryTeamNameId = ""
                        };

                        await connection.ExecuteAsync(newTeam, param);
                    }
                }

                // if (VPParameter.ProjectSequenceId != null && VPParameter.ContractingUnitSequenceId != null)
                // {
                //     var sql =
                //         @"INSERT INTO dbo.OrganizationTeamPmol ( Id ,OrganizationTeamId ,ContractingUnit ,Project ) VALUES ( @Id ,@OrganizationTeamId ,@ContractingUnit ,@Project );";
                //
                //     var param2 = new
                //     {
                //         Id = Guid.NewGuid(), OrganizationTeamId = param3.Id,
                //         ContractingUnit = VPParameter.ContractingUnitSequenceId,
                //         Project = VPParameter.ProjectSequenceId
                //     };
                //
                //     await connection.ExecuteAsync(sql, param2);
                // }
            }

            return VPParameter.RemoveLabour.CabPersonId;
        }
        catch (Exception e)
        {
            //Console.WriteLine(e);
            throw;
        }
    }

    public async Task<List<ProjectData>> ProjectSearchMyEnv(VPParameter VPParameter)
    {
        await using var connection =
            new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);

        var data = connection
            .Query<ProjectData>(
                $"SELECT ProjectDefinition.Id AS [Key] , ProjectDefinition.Title AS [Text],SequenceCode FROM ProjectDefinition LEFT OUTER JOIN ProjectClassification ON ProjectDefinition.Id = ProjectClassification.ProjectId WHERE Title LIKE '%{VPParameter.ProjectSearchMyEnv.Name}%' AND IsDeleted = 0 AND ProjectClassification.ProjectClassificationBuisnessUnit = @BuId", new {VPParameter.ProjectSearchMyEnv.BuId})
            .ToList();

        return data;
    }

    public async Task<string> CreateNewProjectMyEnv(VPParameter VPParameter)
    {
        string cuConnectionString = ConnectionString.MapConnectionString(VPParameter.CreateProject.Cu,
            null, VPParameter.TenantProvider);
        await using var dbConnection =
            new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);
        
        var user = dbConnection
            .Query<ApplicationUser>("Select * from ApplicationUser Where Oid = @Oid", new { Oid = VPParameter.UserId })
            .FirstOrDefault();

        string sequenceId = null;
        if (VPParameter.CreateProject.Id != null)
        {
            var project = dbConnection
                .Query<ProjectDefinition>(
                    "SELECT * FROM ProjectDefinition WHERE Id = @Id", VPParameter.CreateProject).FirstOrDefault();

            VPParameter.CreateProject.Name = project?.Name;
            sequenceId = project?.SequenceCode;

            var cu = dbConnection.Query<string>("SELECT SequenceCode FROM CabCompany WHERE Id = @Id",
                new { Id = project?.ContractingUnitId }).FirstOrDefault();

            var objectIdentifier = VPParameter.ContextAccessor.HttpContext?.User.Identities.First().Claims.First(claim =>
                claim.Type == "http://schemas.microsoft.com/identity/claims/objectidentifier").Value;
            
            var user1 = VPParameter.uPrinceCustomerContext.ApplicationUser
                .FirstOrDefault(u => u.OId == objectIdentifier);

            await VPParameter._iProjectDefinitionRepository.UpdateProjectDefinitionCopy(VPParameter.uPrinceCustomerContext,
                VPParameter.CreateProject,VPParameter._iProjectTimeRepository, VPParameter._iProjectFinanceRepository,VPParameter._iProjectTeamRepository,
                VPParameter.TenantProvider, user1);
            
            await using var cuConnection = new SqlConnection(cuConnectionString);
            var cpc = cuConnection
                .Query<CorporateProductCatalog>(
                    "SELECT * FROM dbo.CorporateProductCatalog WHERE Id = @LabourResourceItem", new {VPParameter.CreateProject.LabourResourceItem})
                .FirstNonDefault();

            await using var pConnection = new SqlConnection(project?.ProjectConnectionString);

            var checkCpc = pConnection.Query<string>("SELECT Id FROM CorporateProductCatalog WHERE Id = @Id", new {Id = VPParameter.CreateProject.LabourResourceItem})
                .FirstOrDefault();

            if (checkCpc == null)
            {
                string insertCpc = @"INSERT INTO dbo.CorporateProductCatalog ( Id ,ResourceTitle ,ResourceTypeId ,ResourceFamilyId ,CpcBasicUnitOfMeasureId ,CpcMaterialId ,CpcPressureClassId ,InventoryPrice ,CpcUnitOfSizeMeasureId ,Size ,WallThickness ,MinOrderQuantity ,MaxOrderQuantity ,Weight ,Status ,ResourceNumber ,IsDeleted ,CpcBrandId ,Title ) VALUES ( @Id ,@ResourceTitle ,@ResourceTypeId ,@ResourceFamilyId ,@CpcBasicUnitOfMeasureId ,@CpcMaterialId ,@CpcPressureClassId ,@InventoryPrice ,@CpcUnitOfSizeMeasureId ,@Size ,@WallThickness ,@MinOrderQuantity ,@MaxOrderQuantity ,@Weight ,@Status ,@ResourceNumber ,@IsDeleted ,@CpcBrandId ,@Title);";
            
                await pConnection.ExecuteAsync(insertCpc, cpc);
            }
            
            await CreatePbsBorPmol(VPParameter, project?.ProjectConnectionString, sequenceId, cu, user);
        }
        else
        {
            var cuId = dbConnection.Query<string>("SELECT Id FROM CabCompany WHERE SequenceCode = @Id AND IsDeleted = 0 AND IsContractingUnit = 1",
                new { Id = VPParameter.CreateProject.Cu }).FirstOrDefault();
            var project = new ProjectDefinition
            {
                SequenceCode = GetSequenceNumber(VPParameter.uPrinceCustomerContext),
                Description = "",
                Id = Guid.NewGuid().ToString(),
                ContractingUnitId = cuId
            };

            project.ProjectConnectionString = CreateDatabase(project.SequenceCode, VPParameter.uPrinceCustomerContext,
                VPParameter.TenantProvider);
            project.Action = HistoryState.ADDED.ToString();
            project.ProjTypeId = "a77e863a-d329-4f5b-ba1b-7dc3bf09b0b8";
            project.ProjManagementLevelId = "4fb90b13-93e5-457c-908e-fea699ad23f1";
            project.ProjToleranceStateId = "004eb795-8bba-47e8-9049-d14774ab0b18";
            project.ProjectScopeStatusId = "94282458-0b40-40a3-b0f9-c2e40344c8f1";
            project.ProjectStatus = "65f2f0fd-ea7a-440e-9fd4-346628ef1299";
            project.CustomerId = VPParameter.CreateProject.CustomerId;
            project.Language = VPParameter.CreateProject.Language;
            project.ProjectManagerId = VPParameter.CreateProject.ProjectManagerId;
            project.SiteManagerId = VPParameter.CreateProject.SiteManagerId;
            project.LocationId = VPParameter._iProjectDefinitionRepository.AddProjectLocationCopy(VPParameter.uPrinceCustomerContext,null,VPParameter.CreateProject);

            project.Name = VPParameter.CreateProject.Name;
            project.Title = project.SequenceCode + " - " + project.Name;

            VPParameter.uPrinceCustomerContext.ProjectDefinition.Add(project);
            VPParameter.uPrinceCustomerContext.SaveChanges();

            var pId = project.Id;

            var mTeamRoleList = new List<ProjectTeamRoleCreateDto>();

            if (VPParameter.CreateProject.ProjectManagerId != null)
            {
                var pmAdd = new ProjectTeamRoleCreateDto
                {
                    CabPersonId = VPParameter.CreateProject.ProjectManagerId,
                    RoleId = "266a5f47-3489-484b-8dae-e4468c5329dn3",
                    IsAccessGranted = true,
                    status = "1"
                };

                mTeamRoleList.Add(pmAdd);
            }

            if (VPParameter.CreateProject.CustomerId != null)
            {
                var pmAdd = new ProjectTeamRoleCreateDto
                {
                    CabPersonId = VPParameter.CreateProject.CustomerId,
                    RoleId = "910b7af0-b132-4951-a2dc-6ab82d4cd40d",
                    IsAccessGranted = false,
                    status = "1"
                };

                mTeamRoleList.Add(pmAdd);
            }

            if (VPParameter.CreateProject.SiteManagerId != null)
            {
                var pmAdd = new ProjectTeamRoleCreateDto
                {
                    CabPersonId = VPParameter.CreateProject.SiteManagerId,
                    RoleId = "yyyyyyy-a513-45e0-a431-170dbd4yyyy",
                    IsAccessGranted = true,
                    status = "1"
                };

                mTeamRoleList.Add(pmAdd);
            }

            var projectTeam = new ProjectTeamCreateDto
            {
                ContractingUnitId = cuId,
                ProjectId = pId,
                TeamRoleList = mTeamRoleList
            };

            VPParameter.CreateProject.ProjectTime.ProjectId = pId;

            await VPParameter._iProjectTimeRepository.CreateProjectTime(VPParameter.CreateProject.ProjectTime, user, VPParameter.TenantProvider);

            await VPParameter._iProjectTeamRepository.CreateProjectTeam( projectTeam,
                VPParameter.TenantProvider,
                user);

            var mProjectCiawSite = new ProjectCiawSite()
            {
                Id = Guid.NewGuid().ToString(),
                CiawSeverEntry = "TemporaryHardCodedOnFrontEnd",
                CiawSiteCode = VPParameter.CreateProject.CiawSiteCode,
                IsCiawEnabled = VPParameter.CreateProject.IsCiawEnabled,
                ProjectId = pId
            };

            var mCiawParameter = new CiawParameter()
            {
                TenantProvider = VPParameter.TenantProvider,
                ProjectCiawSite = mProjectCiawSite
            };

            await VPParameter._iCiawRepository.ProjectCiawSiteCreate(mCiawParameter);
            
            var jsonProject = JsonConvert.SerializeObject(project, Formatting.Indented,
                new JsonSerializerSettings
                {
                    ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                });
            var pdhl = new ProjectDefinitionHistoryLog
            {
                Action = HistoryState.ADDED.ToString(),
                ChangedByUserId = user.Id,
                Id = Guid.NewGuid().ToString(),
                HistoryLog = jsonProject,
                ChangedTime = DateTime.UtcNow,
                ProjectDefinitionId = project.Id
            };
            
            if (VPParameter.CreateProject.ProjectClassification != null)
            {
                await using var connection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);
                var param = new
                {
                    id = Guid.NewGuid().ToString(),
                    ProjectId = pId,
                    VPParameter.CreateProject.ProjectClassification.ProjectClassificationBuisnessUnit,
                    VPParameter.CreateProject.ProjectClassification.ProjectClassificationSizeId,
                    VPParameter.CreateProject.ProjectClassification
                        .ProjectClassificationConstructionTypeId,
                    VPParameter.CreateProject.ProjectClassification.ProjectClassificationSectorId
                }; 
                var classificationInsert =
                        "INSERT INTO dbo.ProjectClassification ( Id ,ProjectId ,ProjectClassificationBuisnessUnit ,ProjectClassificationSizeId ,ProjectClassificationConstructionTypeId ,ProjectClassificationSectorId ) VALUES ( @Id ,@ProjectId ,@ProjectClassificationBuisnessUnit ,@ProjectClassificationSizeId ,@ProjectClassificationConstructionTypeId ,@ProjectClassificationSectorId )";
                await connection.ExecuteAsync(classificationInsert, param);
            }
            
            VPParameter.uPrinceCustomerContext.ProjectDefinitionHistoryLog.Add(pdhl);
            await VPParameter.uPrinceCustomerContext.SaveChangesAsync();

            sequenceId = project?.SequenceCode;
            var cu = dbConnection.Query<string>("SELECT SequenceCode FROM CabCompany WHERE Id = @Id",
                new { Id = project?.ContractingUnitId }).FirstOrDefault();

            await using var cuConnection = new SqlConnection(cuConnectionString);
            var cpc = cuConnection
                .Query<CorporateProductCatalog>(
                    "SELECT * FROM dbo.CorporateProductCatalog WHERE Id = @LabourResourceItem", new {VPParameter.CreateProject.LabourResourceItem})
                .FirstNonDefault();

            await using var pConnection = new SqlConnection(project?.ProjectConnectionString);
            string insertCpc = @"INSERT INTO dbo.CorporateProductCatalog ( Id ,ResourceTitle ,ResourceTypeId ,ResourceFamilyId ,CpcBasicUnitOfMeasureId ,CpcMaterialId ,CpcPressureClassId ,InventoryPrice ,CpcUnitOfSizeMeasureId ,Size ,WallThickness ,MinOrderQuantity ,MaxOrderQuantity ,Weight ,Status ,ResourceNumber ,IsDeleted ,CpcBrandId ,Title ) VALUES ( @Id ,@ResourceTitle ,@ResourceTypeId ,@ResourceFamilyId ,@CpcBasicUnitOfMeasureId ,@CpcMaterialId ,@CpcPressureClassId ,@InventoryPrice ,@CpcUnitOfSizeMeasureId ,@Size ,@WallThickness ,@MinOrderQuantity ,@MaxOrderQuantity ,@Weight ,@Status ,@ResourceNumber ,@IsDeleted ,@CpcBrandId ,@Title);";
            await pConnection.ExecuteAsync(insertCpc, cpc);
            await CreatePbsBorPmol(VPParameter, project?.ProjectConnectionString, sequenceId, cu, user);
        }

        return sequenceId;
    }

    public async Task<UpdatePmolTitle> UpdatePmolTitleMyEnv(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

        await using var connection = new SqlConnection(connectionString);

        const string updateSql =
            "Update Pmol Set Name = @Name, Title = @Title Where ProjectMoleculeId = @ProjectMoleculeId";

        await connection.ExecuteAsync(updateSql,
            new
            {
                VPParameter.UpdatePmolTitle.Name,
                Title = VPParameter.UpdatePmolTitle.ProjectMoleculeId + " - " + VPParameter.UpdatePmolTitle.Name,
                VPParameter.UpdatePmolTitle.ProjectMoleculeId
            });

        return VPParameter.UpdatePmolTitle;
    }

    public async Task<List<PbsForVPDto>> GetPbsForVPWeek(VPParameter VPParameter, bool isMyEnv)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);
        await using var projectconnection = new SqlConnection(connectionString);

        try
        {
            string query = null;
            var all =
                @"SELECT PbsProduct.Id,PbsProduct.Title,PbsProduct.ParentId,'PBS' AS Type,PbsProduct.StartDate,PbsProduct.EndDate,PbsProduct.ProductId AS PBSSequenceId,PbsProduct.PbsProductStatusId As PbsStatus , t4.TreeIndex  FROM dbo.PbsProduct LEFT OUTER JOIN PbsTreeIndex t4 ON PbsProduct.ProductId = t4.PbsProductId where NodeType = 'P' AND IsDeleted = '0' ";

            var all1 =
                @"SELECT PbsProduct.Id,PbsProduct.Title,'PBS' AS Type,PbsProduct.StartDate,PbsProduct.EndDate,PbsProduct.ProductId AS PBSSequenceId,PbsProduct.PbsProductStatusId As PbsStatus , t4.TreeIndex  FROM dbo.PbsProduct LEFT OUTER JOIN PbsTreeIndex t4 ON PbsProduct.ProductId = t4.PbsProductId where NodeType = 'P' AND IsDeleted = '0' ";

            var sb = new StringBuilder(all);

            if (VPParameter.PbsForVPDtoFilter.Title != null && VPParameter.PbsForVPDtoFilter.withParent == false)
            {
                VPParameter.PbsForVPDtoFilter.Title = VPParameter.PbsForVPDtoFilter.Title.Replace("'", "''");
                sb = new StringBuilder(all1);
                sb.Append("AND PbsProduct.Title like '%" + VPParameter.PbsForVPDtoFilter.Title + "%' ");
            }

            if (VPParameter.PbsForVPDtoFilter.Title != null && VPParameter.PbsForVPDtoFilter.withParent)
            {
                VPParameter.PbsForVPDtoFilter.Title = VPParameter.PbsForVPDtoFilter.Title.Replace("'", "''");
                sb = new StringBuilder(all);
                sb.Append("AND PbsProduct.Title like '%" + VPParameter.PbsForVPDtoFilter.Title + "%' ");
            }
            
            var pmolQuery = @"SELECT
                                  PMol.Id
                                 ,PMol.Title
                                 ,Bor.PbsProductId AS ParentId
                                 ,'PMOL' AS Type
                                 ,PMol.ExecutionDate AS StartDate
                                 ,PMol.ExecutionDate AS EndDate
                                 ,PMol.ProjectMoleculeId AS PMOLSequenceId
                                 ,PMol.StatusId AS PmolStatus
                                 ,Bor.ItemId AS BORSequenceId
                                 ,PbsProduct.ProductId AS PBSSequenceId
                                FROM dbo.PMol
                                LEFT OUTER JOIN dbo.Bor
                                  ON PMol.BorId = Bor.Id
                                LEFT OUTER JOIN dbo.PbsProduct
                                  ON Bor.PbsProductId = PbsProduct.Id
                                WHERE PMol.BorId IS NOT NULL ORDER BY PMol.ExecutionDate DESC ;";

            List<PbsForVPDto> data = null;
            List<PbsForVPDto> pmol = null;
            List<PbsForVPDto> data1 = null;

            using (var dbConnection = new SqlConnection(connectionString))
            {
                using (var multi =
                       await dbConnection.QueryMultipleAsync(sb.ToString(), new { lang = VPParameter.Lang }))
                {
                    data = multi.Read<PbsForVPDto>().DistinctBy(x => x.PBSSequenceId).ToList();
                }

                pmol = dbConnection.Query<PbsForVPDto>(pmolQuery).ToList();
            }

            if (VPParameter.PbsForVPDtoFilter.StartDate != null)
            {
                if (VPParameter.PbsForVPDtoFilter.StartDate <= DateTime.Today &&
                    VPParameter.PbsForVPDtoFilter.EndDate >= DateTime.Today)
                    data = data.Where(d =>
                        (VPParameter.PbsForVPDtoFilter.StartDate <= d.StartDate &&
                         d.StartDate <= VPParameter.PbsForVPDtoFilter.EndDate) ||
                        (d.EndDate >= VPParameter.PbsForVPDtoFilter.StartDate &&
                         d.EndDate <= VPParameter.PbsForVPDtoFilter.EndDate) ||
                        (d.StartDate <= VPParameter.PbsForVPDtoFilter.StartDate &&
                         d.EndDate >= VPParameter.PbsForVPDtoFilter.EndDate) ||
                        (d.StartDate == null && d.EndDate == null) ||
                        (d.StartDate <= VPParameter.PbsForVPDtoFilter.StartDate && d.EndDate == null)).ToList();

                else
                    data = data.Where(d =>
                        (VPParameter.PbsForVPDtoFilter.StartDate <= d.StartDate &&
                         d.StartDate <= VPParameter.PbsForVPDtoFilter.EndDate) ||
                        (d.EndDate >= VPParameter.PbsForVPDtoFilter.StartDate &&
                         d.EndDate <= VPParameter.PbsForVPDtoFilter.EndDate) ||
                        (d.StartDate <= VPParameter.PbsForVPDtoFilter.StartDate &&
                         d.EndDate >= VPParameter.PbsForVPDtoFilter.EndDate)).ToList();
            }

            if (VPParameter.PbsForVPDtoFilter.ProductStatus != null)
                data = data.Where(
                    d => d.PbsStatus == VPParameter.PbsForVPDtoFilter.ProductStatus || d.PbsStatus == null).ToList();

            var labour = @"SELECT
                                 PmolTeamRole.Id AS Id
                                 ,'Labour' AS Title
                                 ,PMolPlannedWorkLabour.Id AS ParentId
                                 ,'Labour' AS Type
                                 ,'CPCId' AS CPCId
                                 ,PmolTeamRole.CabPersonId
                                FROM dbo.PMolPlannedWorkLabour
                                INNER JOIN dbo.PMol
                                  ON PMolPlannedWorkLabour.PmolId = PMol.Id
                                INNER JOIN dbo.PmolTeamRole
                                  ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id
                                WHERE PMolPlannedWorkLabour.IsDeleted = 0
                                AND PmolTeamRole.CabPersonId IS NOT NULL
                                AND dbo.PMolPlannedWorkLabour.PmolId IS NOT NULL
                                AND PMol.IsDeleted = '0'
                                AND PmolTeamRole.IsDeleted = '0'
                                GROUP BY PMol.ProjectMoleculeId
                                        ,PmolTeamRole.Id
                                        ,PmolTeamRole.CabPersonId
                                        ,PMol.Name
                                        ,PMolPlannedWorkLabour.Id
                                        ,PMol.ExecutionEndTime
                                        ,PMol.ExecutionStartTime
                                        ,PMol.ExecutionDate
                                        ,PMol.Title
                                        ,PMol.ProjectSequenceCode
                                         union
                                        SELECT
                                          PMolPlannedWorkTools.Id
                                         ,CorporateProductCatalog.Title
                                         ,PMol.Id AS ParentId
                                         ,'Tools' AS Type
										 ,PMolPlannedWorkTools.CoperateProductCatalogId AS CPCId
                                         ,'CabPersonId' as CabPersonId
                                        FROM dbo.PMolPlannedWorkTools
                                        LEFT OUTER JOIN dbo.PMol        
                                          ON PMolPlannedWorkTools.PmolId = PMol.Id
                                        LEFT OUTER JOIN dbo.CorporateProductCatalog
                                          ON PMolPlannedWorkTools.CoperateProductCatalogId = CorporateProductCatalog.Id
                                          where PMolPlannedWorkTools.IsDeleted = 0
                                            union
										  SELECT
                                          PMolPlannedWorkLabour.Id
                                         ,CorporateProductCatalog.Title
                                         ,PMol.Id AS ParentId
                                         ,'Labours' AS Type
                                         ,PMolPlannedWorkLabour.CoperateProductCatalogId AS CPCId
                                         ,'CabPersonId' as CabPersonId
                                        FROM dbo.PMolPlannedWorkLabour
                                        LEFT OUTER JOIN dbo.PMol
                                          ON PMolPlannedWorkLabour.PmolId = PMol.Id
                                        LEFT OUTER JOIN dbo.CorporateProductCatalog
                                          ON PMolPlannedWorkLabour.CoperateProductCatalogId = CorporateProductCatalog.Id
                                        WHERE PMolPlannedWorkLabour.IsDeleted = '0'
                                        union
										  SELECT
                                          PMolPlannedWorkMaterial.Id
                                         ,CorporateProductCatalog.Title
                                         ,PMol.Id AS ParentId
                                         ,'Materials' AS Type
                                         ,PMolPlannedWorkMaterial.CoperateProductCatalogId AS CPCId
                                         ,'CabPersonId' as CabPersonId
                                        FROM dbo.PMolPlannedWorkMaterial 
                                        LEFT OUTER JOIN dbo.PMol
                                          ON PMolPlannedWorkMaterial.PmolId = PMol.Id
                                        LEFT OUTER JOIN dbo.CorporateProductCatalog
                                          ON PMolPlannedWorkMaterial.CoperateProductCatalogId = CorporateProductCatalog.Id
                                        WHERE PMolPlannedWorkMaterial.IsDeleted = '0'
                                        union
										  SELECT
                                          PMolPlannedWorkConsumable.Id
                                         ,CorporateProductCatalog.Title
                                         ,PMol.Id AS ParentId
                                         ,'Consumables' AS Type
                                         ,PMolPlannedWorkConsumable.CoperateProductCatalogId AS CPCId
                                         ,'CabPersonId' as CabPersonId
                                        FROM dbo.PMolPlannedWorkConsumable
                                        LEFT OUTER JOIN dbo.PMol
                                          ON PMolPlannedWorkConsumable.PmolId = PMol.Id
                                        LEFT OUTER JOIN dbo.CorporateProductCatalog
                                          ON PMolPlannedWorkConsumable.CoperateProductCatalogId = CorporateProductCatalog.Id
                                        WHERE PMolPlannedWorkConsumable.IsDeleted = '0'";

            var pbsData = new List<PbsForVPDto>();

            using (var dbConnection = new SqlConnection(connectionString))
            {
                var labours = await dbConnection.QueryAsync<PbsForVPDto>(labour);

                foreach (var k in data)
                    if (k.Type == "PBS")
                    {
                        var dataadd = new PbsForVPDto();
                        dataadd.Id = k.Id;
                        dataadd.Title = k.Title;
                        dataadd.Type = k.Type;
                        dataadd.PBSSequenceId = k.PBSSequenceId;
                        dataadd.PbsStatus = k.PbsStatus;
                        dataadd.TreeIndex = k.TreeIndex;
                        if (k.StartDate == null && k.EndDate == null)
                        {
                            dataadd.StartDate = DateTime.UtcNow;
                            dataadd.EndDate = DateTime.UtcNow.AddDays(+1);
                        }

                        else if (k.StartDate != null && k.EndDate == null)
                        {
                            dataadd.StartDate = k.StartDate;
                            dataadd.EndDate = k.StartDate;
                        }
                        else
                        {
                            if (k.StartDate == k.EndDate)
                            {
                                dataadd.StartDate = k.StartDate;
                                dataadd.EndDate = k.EndDate.Value.AddDays(+1);
                            }
                            else
                            {
                                dataadd.StartDate = k.StartDate;
                                dataadd.EndDate = k.EndDate;
                            }
                        }

                        dataadd.PBSSequenceId = k.PBSSequenceId;
                        if (k.ParentId != null)
                        {
                            if (VPParameter.PbsForVPDtoFilter.Type.FirstOrDefault() == "0" ||
                                VPParameter.PbsForVPDtoFilter.Type.FirstOrDefault() == "1" ||
                                VPParameter.PbsForVPDtoFilter.Type.FirstOrDefault() == "4")
                                dataadd.ParentId = projectconnection
                                    .Query<string>("SELECT Id  FROM PbsProduct WHERE ProductId = @ProductId ",
                                        new
                                        {
                                            ProductId = k.ParentId, VPParameter.PbsForVPDtoFilter.StartDate,
                                            VPParameter.PbsForVPDtoFilter.EndDate
                                        }).FirstOrDefault();
                        }
                        else if (isMyEnv)
                        {
                            dataadd.ParentId = VPParameter.ProjectSequenceId;
                        }

                        dataadd.Cu = VPParameter.ContractingUnitSequenceId;
                        dataadd.Project = VPParameter.ProjectSequenceId;
                        pbsData.Add(dataadd);

                        var childPmol = pmol.Where(e => e.ParentId == k.Id).OrderByDescending(x => x.StartDate)
                            .ToList();

                        foreach (var i in childPmol)
                            if (i.Type == "PMOL")
                            {
                                var dataadd1 = new PbsForVPDto();
                                dataadd1.Id = i.Id;
                                dataadd1.Title = i.Title;
                                dataadd1.ParentId = i.ParentId;
                                dataadd1.Type = i.Type;
                                dataadd1.PmolStatus = i.PmolStatus;
                                if (i.StartDate == null)
                                {
                                    dataadd1.StartDate = DateTime.UtcNow;
                                    dataadd1.EndDate = DateTime.UtcNow;
                                }
                                else
                                {
                                    dataadd1.StartDate = i.StartDate;
                                    dataadd1.EndDate = i.EndDate;
                                }

                                dataadd1.PMOLSequenceId = i.PMOLSequenceId;
                                dataadd1.BORSequenceId = i.BORSequenceId;
                                dataadd1.PBSSequenceId = i.PBSSequenceId;
                                dataadd1.Cu = VPParameter.ContractingUnitSequenceId;
                                dataadd1.Project = VPParameter.ProjectSequenceId;
                                pbsData.Add(dataadd1);

                                List<PbsForVPDto> pmollabouritem;

                                pmollabouritem = labours.Where(lab => lab.Type == "Labours" && lab.ParentId == i.Id)
                                    .ToList();

                                if (pmollabouritem.Any())
                                {
                                    var tId = Guid.NewGuid().ToString();
                                    var pmolLabour = new PbsForVPDto();
                                    pmolLabour.Id = tId;
                                    pmolLabour.Title = "Labours";
                                    pmolLabour.ParentId = i.Id;
                                    pmolLabour.Type = "Labours";
                                    pmolLabour.StartDate = dataadd.StartDate;
                                    pmolLabour.EndDate = dataadd.EndDate;
                                    pmolLabour.PMOLSequenceId = i.PMOLSequenceId;
                                    pmolLabour.PBSSequenceId = i.PBSSequenceId;
                                    pmolLabour.BORSequenceId = i.BORSequenceId;
                                    pmolLabour.Cu = VPParameter.ContractingUnitSequenceId;
                                    pmolLabour.Project = VPParameter.ProjectSequenceId;
                                    pbsData.Add(pmolLabour);
                                    foreach (var n in pmollabouritem)
                                    {
                                        var pLabourItem = new PbsForVPDto();
                                        pLabourItem.Id = n.Id;
                                        pLabourItem.Title = n.Title;
                                        pLabourItem.ParentId = tId;
                                        pLabourItem.Type = "LabourItem";
                                        pLabourItem.StartDate = dataadd1.StartDate;
                                        pLabourItem.EndDate = dataadd1.EndDate;
                                        pLabourItem.PMOLSequenceId = i.PMOLSequenceId;
                                        pLabourItem.PBSSequenceId = i.PBSSequenceId;
                                        pLabourItem.BORSequenceId = i.BORSequenceId;
                                        pLabourItem.CPCId = n.CPCId;
                                        pLabourItem.Cu = VPParameter.ContractingUnitSequenceId;
                                        pLabourItem.Project = VPParameter.ProjectSequenceId;
                                        pbsData.Add(pLabourItem);

                                        List<PbsForVPDto> pmollabour;

                                        pmollabour = labours.Where(lab => lab.Type == "Labour" && lab.ParentId == n.Id)
                                            .ToList();

                                        foreach (var j in pmollabour)
                                        {
                                            PmolTeamMeber member;
                                            var memberselect =
                                                @"SELECT Id,FullName As Name FROM [dbo].[CabPerson] where Id = @Id";

                                            using (var connection =
                                                   new SqlConnection(
                                                       VPParameter.TenantProvider.GetTenant().ConnectionString))
                                            {
                                                member = connection
                                                    .Query<PmolTeamMeber>(memberselect, new { Id = j.CabPersonId })
                                                    .FirstOrDefault();
                                            }

                                            var pLabour = new PbsForVPDto();
                                            pLabour.Id = j.Id;
                                            pLabour.Title = member.Name;
                                            pLabour.ParentId = j.ParentId;
                                            pLabour.Type = "Labour";
                                            pLabour.StartDate = dataadd1.StartDate;
                                            pLabour.EndDate = dataadd1.EndDate;
                                            pLabour.PMOLSequenceId = i.PMOLSequenceId;
                                            pLabour.PBSSequenceId = i.PBSSequenceId;
                                            pLabour.BORSequenceId = i.BORSequenceId;
                                            pLabour.Cu = VPParameter.ContractingUnitSequenceId;
                                            pLabour.Project = VPParameter.ProjectSequenceId;

                                            pbsData.Add(pLabour);
                                        }
                                    }
                                }

                                List<PbsForVPDto> pmoltools;

                                pmoltools = labours.Where(lab => lab.Type == "Tools" && lab.ParentId == i.Id).ToList();
                                if (pmoltools.Any())
                                {
                                    var tId = Guid.NewGuid().ToString();
                                    var pmoltool = new PbsForVPDto();
                                    pmoltool.Id = tId;
                                    pmoltool.Title = "Tools";
                                    pmoltool.ParentId = i.Id;
                                    pmoltool.Type = "Tools";
                                    pmoltool.StartDate = dataadd.StartDate;
                                    pmoltool.EndDate = dataadd.EndDate;
                                    pmoltool.PMOLSequenceId = i.PMOLSequenceId;
                                    pmoltool.PBSSequenceId = i.PBSSequenceId;
                                    pmoltool.BORSequenceId = i.BORSequenceId;
                                    pbsData.Add(pmoltool);

                                    foreach (var n in pmoltools)
                                    {
                                        var pTool = new PbsForVPDto();
                                        pTool.Id = n.Id;
                                        pTool.Title = n.Title;
                                        pTool.ParentId = tId;
                                        pTool.Type = "Tool";
                                        pTool.StartDate = dataadd.StartDate;
                                        pTool.EndDate = dataadd.EndDate;
                                        pTool.PMOLSequenceId = i.PMOLSequenceId;
                                        pTool.PBSSequenceId = i.PBSSequenceId;
                                        pTool.BORSequenceId = i.BORSequenceId;
                                        pTool.CPCId = n.CPCId;
                                        pbsData.Add(pTool);
                                    }
                                }

                                List<PbsForVPDto> pmolMaterials;

                                pmolMaterials = labours.Where(lab => lab.Type == "Materials" && lab.ParentId == i.Id)
                                    .ToList();
                                if (pmolMaterials.Any())
                                {
                                    var tId = Guid.NewGuid().ToString();
                                    var pmolMaterial = new PbsForVPDto();
                                    pmolMaterial.Id = tId;
                                    pmolMaterial.Title = "Materials";
                                    pmolMaterial.ParentId = i.Id;
                                    pmolMaterial.Type = "Materials";
                                    pmolMaterial.StartDate = dataadd.StartDate;
                                    pmolMaterial.EndDate = dataadd.EndDate;
                                    pmolMaterial.PMOLSequenceId = i.PMOLSequenceId;
                                    pmolMaterial.PBSSequenceId = i.PBSSequenceId;
                                    pmolMaterial.BORSequenceId = i.BORSequenceId;
                                    pbsData.Add(pmolMaterial);

                                    foreach (var n in pmolMaterials)
                                    {
                                        var pMaterial = new PbsForVPDto();
                                        pMaterial.Id = n.Id;
                                        pMaterial.Title = n.Title;
                                        pMaterial.ParentId = tId;
                                        pMaterial.Type = "Material";
                                        pMaterial.StartDate = dataadd.StartDate;
                                        pMaterial.EndDate = dataadd.EndDate;
                                        pMaterial.PMOLSequenceId = i.PMOLSequenceId;
                                        pMaterial.PBSSequenceId = i.PBSSequenceId;
                                        pMaterial.BORSequenceId = i.BORSequenceId;
                                        pMaterial.CPCId = n.CPCId;
                                        pbsData.Add(pMaterial);
                                    }
                                }

                                List<PbsForVPDto> pmolConsumables;

                                pmolConsumables = labours
                                    .Where(lab => lab.Type == "Consumables" && lab.ParentId == i.Id).ToList();
                                if (pmolConsumables.Any())
                                {
                                    var tId = Guid.NewGuid().ToString();
                                    var pmolConsumable = new PbsForVPDto();
                                    pmolConsumable.Id = tId;
                                    pmolConsumable.Title = "Consumables";
                                    pmolConsumable.ParentId = i.Id;
                                    pmolConsumable.Type = "Consumables";
                                    pmolConsumable.StartDate = dataadd.StartDate;
                                    pmolConsumable.EndDate = dataadd.EndDate;
                                    pmolConsumable.PMOLSequenceId = i.PMOLSequenceId;
                                    pmolConsumable.PBSSequenceId = i.PBSSequenceId;
                                    pmolConsumable.BORSequenceId = i.BORSequenceId;
                                    pbsData.Add(pmolConsumable);

                                    foreach (var n in pmolConsumables)
                                    {
                                        var pConsumable = new PbsForVPDto();
                                        pConsumable.Id = n.Id;
                                        pConsumable.Title = n.Title;
                                        pConsumable.ParentId = tId;
                                        pConsumable.Type = "Consumable";
                                        pConsumable.StartDate = dataadd.StartDate;
                                        pConsumable.EndDate = dataadd.EndDate;
                                        pConsumable.PMOLSequenceId = i.PMOLSequenceId;
                                        pConsumable.PBSSequenceId = i.PBSSequenceId;
                                        pConsumable.BORSequenceId = i.BORSequenceId;
                                        pConsumable.CPCId = n.CPCId;
                                        pbsData.Add(pConsumable);
                                    }
                                }
                            }
                    }

                if (VPParameter.PbsForVPDtoFilter.withParent && VPParameter.PbsForVPDtoFilter.Title != null)
                {
                    var allPbs = dbConnection.Query<PbsForVPDto>(all).ToList();

                    var pbsdataCopy = new List<PbsForVPDto>();

                    pbsdataCopy.AddRange(pbsData);

                    foreach (var i in pbsdataCopy)
                        if (i.ParentId != null && i.Type == "PBS")
                        {
                            var parentPbs = dbConnection.Query<PbsTreeStructure>(@"WITH ret
                                                                                AS
                                                                                (SELECT
                                                                                *
                                                                                FROM PbsProduct
                                                                                WHERE Id = @Id                                                               
                                                                                UNION ALL
                                                                                SELECT
                                                                                t.*
                                                                                FROM PbsProduct t
                                                                                INNER JOIN ret r
                                                                                ON t.ProductId = r.ParentId 
                                                                                )
                                                                                SELECT
                                                                                ret.Id ,Title ,StartDate ,EndDate ,ProductId AS PbsSequenceId ,ParentId, t4.TreeIndex
                                                                                FROM ret LEFT OUTER JOIN PbsTreeIndex t4 ON ret.ProductId = t4.PbsProductId
                                                                                WHERE ret.Id != @Id AND ret.IsDeleted = 0",
                                new { i.Id }).ToList();

                            foreach (var n in parentPbs)
                            {
                                var pbs = allPbs.Where(e => e.Id == n.Id).FirstOrDefault();

                                var dataadd = new PbsForVPDto();
                                dataadd.Id = pbs.Id;
                                dataadd.Title = pbs.Title;
                                dataadd.Type = pbs.Type;
                                dataadd.PBSSequenceId = pbs.PBSSequenceId;
                                dataadd.PbsStatus = pbs.PbsStatus;
                                dataadd.TreeIndex = pbs.TreeIndex;
                                if (pbs.StartDate == null && pbs.EndDate == null)
                                {
                                    dataadd.StartDate = DateTime.UtcNow;
                                    dataadd.EndDate = DateTime.UtcNow.AddDays(+1);
                                }

                                else if (pbs.StartDate != null && pbs.EndDate == null)
                                {
                                    dataadd.StartDate = pbs.StartDate;
                                    dataadd.EndDate = pbs.StartDate;
                                }
                                else
                                {
                                    if (pbs.StartDate == pbs.EndDate)
                                    {
                                        dataadd.StartDate = pbs.StartDate;
                                        dataadd.EndDate = pbs.EndDate.Value.AddDays(+1);
                                    }
                                    else
                                    {
                                        dataadd.StartDate = pbs.StartDate;
                                        dataadd.EndDate = pbs.EndDate;
                                    }
                                }

                                dataadd.PBSSequenceId = pbs.PBSSequenceId;
                                if (VPParameter.PbsForVPDtoFilter.Type.FirstOrDefault() == "0" ||
                                    VPParameter.PbsForVPDtoFilter.Type.FirstOrDefault() == "1" ||
                                    VPParameter.PbsForVPDtoFilter.Type.FirstOrDefault() == "4")
                                    dataadd.ParentId = projectconnection
                                        .Query<string>("SELECT Id  FROM PbsProduct WHERE ProductId = @ProductId ",
                                            new
                                            {
                                                ProductId = pbs.ParentId, VPParameter.PbsForVPDtoFilter.StartDate,
                                                VPParameter.PbsForVPDtoFilter.EndDate
                                            }).FirstOrDefault();
                                pbsData.Add(dataadd);
                            }
                        }
                }
                
                if (VPParameter.PbsForVPDtoFilter.ProductStatus  != null)
                {
                    var allPbs = dbConnection.Query<PbsForVPDto>(all).ToList();

                    var pbsdataCopy = new List<PbsForVPDto>();

                    pbsdataCopy.AddRange(pbsData);

                    foreach (var i in pbsdataCopy)
                        if (i.ParentId != null && i.Type == "PBS")
                        {
                            var parentPbs = dbConnection.Query<PbsTreeStructure>(@"WITH ret
                                                                                AS
                                                                                (SELECT
                                                                                *
                                                                                FROM PbsProduct
                                                                                WHERE Id = @Id                                                               
                                                                                UNION ALL
                                                                                SELECT
                                                                                t.*
                                                                                FROM PbsProduct t
                                                                                INNER JOIN ret r
                                                                                ON t.ProductId = r.ParentId 
                                                                                )
                                                                                SELECT
                                                                                ret.Id ,Title ,StartDate ,EndDate ,ProductId AS PbsSequenceId ,ParentId, t4.TreeIndex
                                                                                FROM ret LEFT OUTER JOIN PbsTreeIndex t4 ON ret.ProductId = t4.PbsProductId
                                                                                WHERE ret.Id != @Id AND ret.IsDeleted = 0",
                                new { i.Id }).ToList();

                            foreach (var n in parentPbs)
                            {
                                var pbs = allPbs.Where(e => e.Id == n.Id).FirstOrDefault();

                                var dataadd = new PbsForVPDto();
                                dataadd.Id = pbs.Id;
                                dataadd.Title = pbs.Title;
                                dataadd.Type = pbs.Type;
                                dataadd.PBSSequenceId = pbs.PBSSequenceId;
                                dataadd.PbsStatus = pbs.PbsStatus;
                                dataadd.TreeIndex = pbs.TreeIndex;
                                if (pbs.StartDate == null && pbs.EndDate == null)
                                {
                                    dataadd.StartDate = DateTime.UtcNow;
                                    dataadd.EndDate = DateTime.UtcNow.AddDays(+1);
                                }

                                else if (pbs.StartDate != null && pbs.EndDate == null)
                                {
                                    dataadd.StartDate = pbs.StartDate;
                                    dataadd.EndDate = pbs.StartDate;
                                }
                                else
                                {
                                    if (pbs.StartDate == pbs.EndDate)
                                    {
                                        dataadd.StartDate = pbs.StartDate;
                                        dataadd.EndDate = pbs.EndDate.Value.AddDays(+1);
                                    }
                                    else
                                    {
                                        dataadd.StartDate = pbs.StartDate;
                                        dataadd.EndDate = pbs.EndDate;
                                    }
                                }

                                dataadd.PBSSequenceId = pbs.PBSSequenceId;
                                if (VPParameter.PbsForVPDtoFilter.Type.FirstOrDefault() == "0" ||
                                    VPParameter.PbsForVPDtoFilter.Type.FirstOrDefault() == "1" ||
                                    VPParameter.PbsForVPDtoFilter.Type.FirstOrDefault() == "4")
                                    dataadd.ParentId = projectconnection
                                        .Query<string>("SELECT Id  FROM PbsProduct WHERE ProductId = @ProductId ",
                                            new
                                            {
                                                ProductId = pbs.ParentId, VPParameter.PbsForVPDtoFilter.StartDate,
                                                VPParameter.PbsForVPDtoFilter.EndDate
                                            }).FirstOrDefault();
                                pbsData.Add(dataadd);
                            }
                        }
                }
            }

            var pbsList = pbsData.Where(x => x.Type == "PBS").DistinctBy(c => c.PBSSequenceId).ToList();
            pbsData = pbsData.Where(x => x.Type != "PBS").ToList();
            pbsData.AddRange(pbsList);
            return pbsData.OrderByDescending(x => x.TreeIndex).ToList();
        }
        catch (Exception e)
        {
            //Console.WriteLine(e);
            throw;
        }
    }

    public async Task<IEnumerable<VPPOHeaderDto>> GetPO(VPParameter VPParameter)
    {
        try
        {
            var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
                VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

            await using var dbConnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);

            await using var connection = new SqlConnection(connectionString);


            var query = @"SELECT
                                      POHeader.Title AS Title
                                     ,POHeader.IsCu
                                     ,POHeader.Id
                                     ,POHeader.SequenceId
                                     ,POHeader.Comments
                                     ,POHeader.Name
                                     ,POHeader.ProjectSequenceCode
                                     ,POHeader.LocationId
                                     ,POHeader.CustomerCompanyId AS CustomerOrganisationId
                                     ,POHeader.CustomerId AS CustomerContactId
                                     ,POHeader.SuplierCompanyId AS SupplierOrganisationId
                                     ,POHeader.SupplierCabPersonCompanyId AS SupplierContactId
                                     ,POHeader.SupplierReference AS SupplierReference 
	                                 ,POHeader.CustomerReference AS CustomerReference, POHeader.TotalAmount, POHeader.DeliveryDate
                                     ,POHeader.DeliveryRequest As DeliveryLocation
                                     ,POHeader.TaxonomyId As WarehouseTaxonomyId
                                     ,POStatus.StatusId  AS [Key]
                                     ,POStatus.Name AS [Text]
                                     ,POType.TypeId AS [Key]
                                     ,POType.Name AS [Text]
									 ,PORequestType.RequestTypeId AS RequestTypeId
									 ,PORequestType.Name AS RequestTypeName
                                     ,POHeader.RequestedDate
                                     ,POHeader.ExpectedDate
                                     ,POHeader.CreatedDate
                                    FROM dbo.POHeader
                                    LEFT OUTER JOIN dbo.POType
                                      ON POHeader.POTypeId = POType.TypeId
                                    LEFT OUTER JOIN dbo.POStatus
                                      ON POHeader.POStatusId = POStatus.StatusId
									LEFT OUTER JOIN dbo.PORequestType
                                      ON POHeader.PORequestType = PORequestType.RequestTypeId
                                    WHERE POStatus.LanguageCode = @lang
                                    AND POType.LanguageCode = @lang AND PORequestType.LanguageCode = @lang AND POType.TypeId != '4010e768-3e06-4702-b337-ee367a82addb' AND PORequestType.RequestTypeId != 'f4d6ba08-3937-44ca-a0a1-7cf33c03e290' ";

            //SequenceId IN ('PO-2256','PO-2255') ";


            IEnumerable<VPPOHeaderDto> mPOHeaderDto;
            List<string> excludeProjects = null;

            var sb = new StringBuilder(query);

            if (!VPParameter.Filter.IsAllProjects)
            {
                excludeProjects = dbConnection.Query<string>(
                        "Select SequenceCode From ProjectDefinition Where ProjectStatus = 'd7e13082-77f4-44ad-8ad8-b0b9dad94ac1' ")
                    .ToList();

                sb.Append("AND POHeader.ProjectSequenceCode NOT IN @projects ");
            }

            var parameters = new
            {
                lang = VPParameter.Lang, Ids = VPParameter.Filter.RequestType, VPParameter.Filter.ProjectSequenceCode,
                projects = excludeProjects
            };

            DateTime start;
            DateTime end;

            if (VPParameter.Filter.FromDate != null && VPParameter.Filter.ToDate != null)
                //sb.Append("AND( DeliveryDate BETWEEN '" + VPParameter.Filter.FromDate + "' AND '" + VPParameter.Filter.ToDate + "')");
                // sb.Append("AND(( DeliveryDate >= '" + VPParameter.Filter.FromDate + "' AND ExpectedDate <= '" +
                //           VPParameter.Filter.ToDate + "') OR ( DeliveryDate >= '" + VPParameter.Filter.FromDate +
                //           "' AND DeliveryDate <= '" + VPParameter.Filter.ToDate + "'))");
                sb.Append(" AND (( DeliveryDate BETWEEN '" + VPParameter.Filter.FromDate + "' AND '" +
                          VPParameter.Filter.ToDate + "') OR ( ExpectedDate BETWEEN '" + VPParameter.Filter.FromDate +
                          "' AND '" + VPParameter.Filter.ToDate + "') OR ( DeliveryDate <= '" +
                          VPParameter.Filter.FromDate +
                          "' AND ExpectedDate >= '" + VPParameter.Filter.ToDate + "')) ");
            // else if (VPParameter.Filter.Date != null)
            // {
            //     if (VPParameter.Filter.Date == "1") //last week
            //     {
            //         start = DateTime.Today.AddDays(-1 * (int) DateTime.Today.DayOfWeek - 7);
            //         end = DateTime.Today.AddDays(-1 * (int) DateTime.Today.DayOfWeek);
            //
            //         sb.Append("AND( DeliveryDate BETWEEN '" + start + "' AND '" + end + "') ");
            //
            //         //sb.Append("AND datepart(ww,DeliveryDate) =DATEPART(ww,getdate())-1 AND datepart(yyyy, DeliveryDate) = year(getdate())");
            //     }
            //
            //     if (VPParameter.Filter.Date == "2") // current week
            //         sb.Append(
            //             "AND datepart(ww,DeliveryDate) =DATEPART(ww,getdate()) AND datepart(yyyy, DeliveryDate) = year(getdate()) ");
            //
            //     if (VPParameter.Filter.Date == "3") //last month
            //     {
            //         start = DateTime.Today.AddMonths(-1);
            //         sb.Append("AND datepart(mm,DeliveryDate) =DATEPART(mm,'" + start +
            //                   "') AND datepart(yyyy, DeliveryDate) = year('" + start + "') ");
            //     }
            //
            //     if (VPParameter.Filter.Date == "4") //current month
            //         sb.Append(
            //             "AND datepart(mm,DeliveryDate) =DATEPART(mm,getdate()) AND datepart(yyyy, DeliveryDate) = year(getdate()) ");
            // }
            else
                sb.Append(
                    "AND datepart(mm,DeliveryDate) =month(getdate()) AND datepart(yyyy, DeliveryDate) = year(getdate()) ");

            if (VPParameter.Filter.RequestType.FirstOrDefault() != null)
                sb.Append("AND PORequestType.RequestTypeId IN @Ids ");

            if (VPParameter.Filter.ProjectSequenceCode != null)
                sb.Append("AND POHeader.ProjectSequenceCode = @ProjectSequenceCode ");


            mPOHeaderDto = await connection.QueryAsync<VPPOHeaderDto>(sb.ToString(), parameters);
            var sqlResorce = @"SELECT POResources.* FROM dbo.POResources WHERE Id IS NOT NULL ";

            var sb2 = new StringBuilder(sqlResorce);

            if (VPParameter.Filter.ResourceType.FirstOrDefault() != null)
                sb2.Append("AND POResources.ResourcesType IN @Ids ");

            var pOResourcesAddDto = await connection.QueryAsync<POResourcesAddDto>(sb2.ToString(),
                new { Ids = VPParameter.Filter.ResourceType });

            // var mm = mPOHeaderDto.DistinctBy(c => c.SequenceId);
            var excludePo = new List<VPPOHeaderDto>();

            var cabPersons = dbConnection
                .Query<CabPerson>(
                    "SELECT CabPerson.FullName,CabPersonCompany.Id FROM dbo.CabPersonCompany INNER JOIN dbo.CabPerson ON CabPersonCompany.PersonId = CabPerson.Id");

            var toolsList = connection.Query<GetPOToolPool>(
                "SELECT POToolPool.*,c.Title AS RequestedCPCTitle ,d.Title AS AssignedCPCTitle FROM dbo.POToolPool LEFT OUTER JOIN dbo.CorporateProductCatalog c ON POToolPool.RequestedCPCId = c.Id LEFT OUTER JOIN dbo.CorporateProductCatalog d ON POToolPool.AssignedCPCId = d.Id");

            var labourList = connection.Query<GetPOLabourTeam>("SELECT * FROM POLabourTeam");

            Parallel.ForEach(mPOHeaderDto, r =>
            {
                // foreach (var r in mPOHeaderDto)
                // {
                var mPOResourcesDto = new POResourcesDto();

                mPOResourcesDto.materials = pOResourcesAddDto.Where(por =>
                        por.ResourcesType == "c46c3a26-39a5-42cc-n7k1-89655304eh6" &&
                        por.PurchesOrderId == r.Id)
                    .ToList();


                mPOResourcesDto.consumable = pOResourcesAddDto.Where(por =>
                        por.ResourcesType == "c46c3a26-39a5-42cc-m06g-89655304eh6" &&
                        por.PurchesOrderId == r.Id)
                    .ToList();

                mPOResourcesDto.labour = pOResourcesAddDto.Where(por =>
                        por.ResourcesType == "c46c3a26-39a5-42cc-b07s-89655304eh6" &&
                        por.PurchesOrderId == r.Id)
                    .ToList();

                mPOResourcesDto.tools = pOResourcesAddDto.Where(por =>
                        por.ResourcesType == "c46c3a26-39a5-42cc-n9wn-89655304eh6" &&
                        por.PurchesOrderId == r.Id)
                    .ToList();

                if (VPParameter.Filter.ResourceType.FirstOrDefault() != null)
                    if (mPOResourcesDto.consumable.Count == 0 && mPOResourcesDto.labour.Count == 0 &&
                        mPOResourcesDto.tools.Count == 0 && mPOResourcesDto.materials.Count == 0)
                        excludePo.Add(r);

                r.POResources = mPOResourcesDto;

                // var toolsQuery =
                //     "SELECT POToolPool.*,c.Title AS RequestedCPCTitle ,d.Title AS AssignedCPCTitle FROM dbo.POToolPool LEFT OUTER JOIN dbo.CorporateProductCatalog c ON POToolPool.RequestedCPCId = c.Id LEFT OUTER JOIN dbo.CorporateProductCatalog d ON POToolPool.AssignedCPCId = d.Id WHERE POId = @Id";
                // r.Teams = await connection.QueryAsync<GetPOLabourTeam>(
                //     "SELECT * FROM POLabourTeam WHERE POId = @Id", new {Id = r.SequenceId});
                //r.ToolsPool = await connection.QueryAsync<GetPOToolPool>(toolsQuery, new {Id = r.SequenceId});

                r.ToolsPool = toolsList.Where(x => x.POId == r.SequenceId);
                r.Teams = labourList.Where(x => x.POId == r.SequenceId);

                Parallel.ForEach(r.Teams, team =>
                {
                    // foreach (var team in r.Teams)
                    // {
                    team.PersonName = cabPersons.FirstOrDefault(x => x.Id == team.PersonId)?.FullName;
                });
                // using (var connection2 =
                //        new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
                //
                // {
                //     // team.PersonName = connection2
                //     //     .Query<string>(
                //     //         "SELECT CabPerson.FullName FROM dbo.CabPersonCompany INNER JOIN dbo.CabPerson ON CabPersonCompany.PersonId = CabPerson.Id WHERE CabPersonCompany.Id = @Id",
                //     //         new {Id = team.PersonId}).FirstOrDefault();
                // }
            });

            mPOHeaderDto = mPOHeaderDto.Except(excludePo);


            return mPOHeaderDto;
        }
        catch (Exception e)
        {
            throw e;
        }
    }


    private IEnumerable<VpPo> Traverse(IEnumerable<VpPo> VpPo, VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId, null,
            VPParameter.TenantProvider);

        foreach (var vpPo in VpPo)
        {
            var query = @"SELECT * FROM [dbo].[VpPo] WHERE ParentId = @Id";
            IEnumerable<VpPo> sub;
            using (var connection = new SqlConnection(connectionString))
            {
                sub = connection.Query<VpPo>(query, new { vpPo.Id });
            }

            vpPo.Children = (ICollection<VpPo>)sub;

            Traverse(vpPo.Children, VPParameter).ToList();
        }

        return VpPo;
    }

    public async Task<IEnumerable<VpPo>> GetVpPoFilter(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);

        var query = @"SELECT VpPo.*
                                FROM dbo.VpPo
                                LEFT OUTER JOIN dbo.CorporateProductCatalog
                                  ON VpPo.CCPCId = CorporateProductCatalog.Id
                                WHERE CorporateProductCatalog.ResourceTypeId = 'c46c3a26-39a5-42cc-n7k1-89655304eh6'";

        IEnumerable<VpPo> VpPo;
        var parameters = new { lang = VPParameter.Lang };
        using (var connection = new SqlConnection(connectionString))
        {
            VpPo = await connection.QueryAsync<VpPo>(query, parameters);
        }

        return VpPo;
    }

    public async Task<IEnumerable<VPPOHeaderDto>> GetPOMyEnv(VPParameter VPParameter)
    {
        try
        {
            var projectList = new List<string>();
            var projectManager = VPProjectPm(VPParameter.TenantProvider.GetTenant().ConnectionString);

            var pp = projectManager.Where(r => r.Oid == VPParameter.UserId);

            foreach (var kk in pp) projectList.Add(kk.SequenceCode);

            var connectionString = ConnectionString.MapConnectionString("COM-0001",
                VPParameter.ProjectSequenceId, VPParameter.TenantProvider);


            var query = @"SELECT
                                      POHeader.Title AS Title
                                     ,POHeader.IsCu
                                     ,POHeader.Id
                                     ,POHeader.SequenceId
                                     ,POHeader.Comments
                                     ,POHeader.Name
                                     ,POHeader.ProjectSequenceCode
                                     ,POHeader.LocationId
                                     ,POHeader.CustomerCompanyId AS CustomerOrganisationId
                                     ,POHeader.CustomerId AS CustomerContactId
                                     ,POHeader.SuplierCompanyId AS SupplierOrganisationId
                                     ,POHeader.SupplierCabPersonCompanyId AS SupplierContactId
                                     ,POHeader.SupplierReference AS SupplierReference 
	                                 ,POHeader.CustomerReference AS CustomerReference, POHeader.TotalAmount, POHeader.DeliveryDate
                                     ,POHeader.DeliveryRequest As DeliveryLocation
                                     ,POHeader.TaxonomyId As WarehouseTaxonomyId
                                     ,POStatus.StatusId  AS [Key]
                                     ,POStatus.Name AS [Text]
                                     ,POType.TypeId AS [Key]
                                     ,POType.Name AS [Text]
									 ,PORequestType.RequestTypeId AS RequestTypeId
									 ,PORequestType.Name AS RequestTypeName
                                     ,POHeader.RequestedDate
                                     ,POHeader.ExpectedDate
                                    FROM dbo.POHeader
                                    LEFT OUTER JOIN dbo.POType
                                      ON POHeader.POTypeId = POType.TypeId
                                    LEFT OUTER JOIN dbo.POStatus
                                      ON POHeader.POStatusId = POStatus.StatusId
									LEFT OUTER JOIN dbo.PORequestType
                                      ON POHeader.PORequestType = PORequestType.RequestTypeId
                                    WHERE POStatus.LanguageCode = @lang
                                    AND POType.LanguageCode = @lang AND PORequestType.LanguageCode = @lang AND POHeader.ProjectSequenceCode IN @SequenceCodes ";
            //SequenceId IN ('PO-2256','PO-2255') ";


            var parameters = new
            {
                lang = VPParameter.Lang, Ids = VPParameter.Filter.RequestType, SequenceCodes = projectList,
                VPParameter.Filter.ProjectSequenceCode
            };
            IEnumerable<VPPOHeaderDto> mPOHeaderDto;
            var sb = new StringBuilder(query);

            DateTime start;
            DateTime end;

            if (VPParameter.Filter.FromDate != null && VPParameter.Filter.ToDate != null)
            {
                //sb.Append("AND( DeliveryDate BETWEEN '" + VPParameter.Filter.FromDate + "' AND '" + VPParameter.Filter.ToDate + "')");
                sb.Append("AND(( DeliveryDate >= '" + VPParameter.Filter.FromDate + "' AND ExpectedDate <= '" +
                          VPParameter.Filter.ToDate + "') OR ( DeliveryDate >= '" + VPParameter.Filter.FromDate +
                          "' AND DeliveryDate <= '" + VPParameter.Filter.ToDate + "'))");
            }
            else if (VPParameter.Filter.Date != null)
            {
                if (VPParameter.Filter.Date == "1") //last week
                {
                    start = DateTime.Today.AddDays(-1 * (int)DateTime.Today.DayOfWeek - 7);
                    end = DateTime.Today.AddDays(-1 * (int)DateTime.Today.DayOfWeek);

                    sb.Append("AND( DeliveryDate BETWEEN '" + start + "' AND '" + end + "') ");

                    //sb.Append("AND datepart(ww,DeliveryDate) =DATEPART(ww,getdate())-1 AND datepart(yyyy, DeliveryDate) = year(getdate())");
                }

                if (VPParameter.Filter.Date == "2") // current week
                    sb.Append(
                        "AND datepart(ww,DeliveryDate) =DATEPART(ww,getdate()) AND datepart(yyyy, DeliveryDate) = year(getdate()) ");

                if (VPParameter.Filter.Date == "3") //last month
                {
                    start = DateTime.Today.AddMonths(-1);
                    sb.Append("AND datepart(mm,DeliveryDate) =DATEPART(mm,'" + start +
                              "') AND datepart(yyyy, DeliveryDate) = year('" + start + "') ");
                }

                if (VPParameter.Filter.Date == "4") //current month
                    sb.Append(
                        "AND datepart(mm,DeliveryDate) =DATEPART(mm,getdate()) AND datepart(yyyy, DeliveryDate) = year(getdate()) ");
            }
            else
            {
                sb.Append(
                    "AND datepart(mm,DeliveryDate) =month(getdate()) AND datepart(yyyy, DeliveryDate) = year(getdate()) ");
            }

            if (VPParameter.Filter.RequestType.FirstOrDefault() != null)
                sb.Append("AND PORequestType.RequestTypeId IN @Ids ");

            if (VPParameter.Filter.ProjectSequenceCode != null)
                sb.Append("AND POHeader.ProjectSequenceCode = @ProjectSequenceCode ");


            using (var connection = new SqlConnection(connectionString))
            {
                mPOHeaderDto = await connection.QueryAsync<VPPOHeaderDto>(sb.ToString(), parameters);
                var sqlResorce = @"SELECT POResources.* FROM dbo.POResources WHERE Id IS NOT NULL ";

                var sb2 = new StringBuilder(sqlResorce);

                if (VPParameter.Filter.ResourceType.FirstOrDefault() != null)
                    sb2.Append("AND POResources.ResourcesType IN @Ids ");

                var pOResourcesAddDto = await connection.QueryAsync<POResourcesAddDto>(sb2.ToString(),
                    new { Ids = VPParameter.Filter.ResourceType });


                foreach (var r in mPOHeaderDto)
                {
                    var mPOResourcesDto = new POResourcesDto();
                    var pOResourcesAddDtoDictionaryM = new Dictionary<string, POResourcesAddDto>();

                    mPOResourcesDto.materials = pOResourcesAddDto.Where(por =>
                            por.ResourcesType == "c46c3a26-39a5-42cc-n7k1-89655304eh6" &&
                            por.PurchesOrderId == r.Id)
                        .ToList();

                    var pOResourcesAddDtoDictionaryC = new Dictionary<string, POResourcesAddDto>();

                    mPOResourcesDto.consumable = pOResourcesAddDto.Where(por =>
                            por.ResourcesType == "c46c3a26-39a5-42cc-m06g-89655304eh6" &&
                            por.PurchesOrderId == r.Id)
                        .ToList();

                    mPOResourcesDto.labour = pOResourcesAddDto.Where(por =>
                            por.ResourcesType == "c46c3a26-39a5-42cc-b07s-89655304eh6" &&
                            por.PurchesOrderId == r.Id)
                        .ToList();

                    mPOResourcesDto.tools = pOResourcesAddDto.Where(por =>
                            por.ResourcesType == "c46c3a26-39a5-42cc-n9wn-89655304eh6" &&
                            por.PurchesOrderId == r.Id)
                        .ToList();


                    var toolsQuery =
                        "SELECT POToolPool.*,c.Title AS RequestedCPCTitle ,d.Title AS AssignedCPCTitle FROM dbo.POToolPool LEFT OUTER JOIN dbo.CorporateProductCatalog c ON POToolPool.RequestedCPCId = c.Id LEFT OUTER JOIN dbo.CorporateProductCatalog d ON POToolPool.AssignedCPCId = d.Id WHERE POId = @Id";
                    r.POResources = mPOResourcesDto;
                    r.Teams = await connection.QueryAsync<GetPOLabourTeam>(
                        "SELECT * FROM POLabourTeam WHERE POId = @Id", new { Id = r.SequenceId });
                    r.ToolsPool = await connection.QueryAsync<GetPOToolPool>(toolsQuery, new { Id = r.SequenceId });

                    foreach (var team in r.Teams)
                        using (var connection2 =
                               new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))

                        {
                            team.PersonName = connection2
                                .Query<string>(
                                    "SELECT CabPerson.FullName FROM dbo.CabPersonCompany INNER JOIN dbo.CabPerson ON CabPersonCompany.PersonId = CabPerson.Id WHERE CabPersonCompany.Id = @Id",
                                    new { Id = team.PersonId }).FirstOrDefault();
                        }
                }
            }


            return mPOHeaderDto;
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    public async Task<string> ClonePbsResoures(string ConnectionString, string PbsProductId, string NewPbsProductId,
        string PbsProductItemTypeId)
    {
        try
        {
            var connectionString = ConnectionString;

            var param = new { Id = PbsProductId };
            var NewId = NewPbsProductId;
            await using (var dbConnection = new SqlConnection(connectionString))
            {
                //Colne Competencies
                var competenciesquery =
                    @"SELECT [Id] FROM [dbo].[PbsSkillExperience] WHERE PbsProductId = @Id";

                IEnumerable<PbsCloneDto> competenciesdata;
                competenciesdata = dbConnection.Query<PbsCloneDto>(competenciesquery, param);


                foreach (var a in competenciesdata)
                {
                    var competencquery = @"INSERT INTO [dbo].[PbsSkillExperience]
                                                                   ([Id]
                                                                   ,[PbsProductId]
                                                                   ,[PbsSkillId]
                                                                   ,[PbsExperienceId])
                                                             VALUES
                                                                   (@CompetencId
                                                                   ,@ProductId 
                                                                   ,(select [PbsSkillId] from [dbo].[PbsSkillExperience] where Id = @Id)
                                                                   ,(select [PbsExperienceId] from [dbo].[PbsSkillExperience] where Id = @Id))";

                    var parameter = new
                    {
                        a.Id,
                        CompetencId = Guid.NewGuid().ToString(),
                        ProductId = NewId
                    };

                    await dbConnection.ExecuteAsync(competencquery, parameter);
                }


                //Clone Material
                var materialsquery =
                    @"SELECT [Id] FROM [dbo].[PbsMaterial] WHERE PbsProductId = @Id";

                IEnumerable<PbsCloneDto> materialsdata;
                materialsdata = dbConnection.Query<PbsCloneDto>(materialsquery, param);


                foreach (var m in materialsdata)
                {
                    var matquery = @"INSERT INTO [dbo].[PbsMaterial]
                                               ([Id]
                                               ,[PbsProductId]
                                               ,[CoperateProductCatalogId]
                                               ,[Quantity])
                                         VALUES
                                               (@MatId
                                               ,@ProductId
                                               ,(SELECT [CoperateProductCatalogId] FROM [dbo].[PbsMaterial] where Id = @Id)
                                               ,(SELECT [Quantity] FROM [dbo].[PbsMaterial] where Id = @Id))";

                    var parameter = new
                    {
                        m.Id,
                        MatId = Guid.NewGuid().ToString(),
                        ProductId = NewId
                    };
                    await dbConnection.ExecuteAsync(matquery, parameter);
                }

                //Clone Tool
                var toolsquery =
                    @"SELECT [Id] FROM [dbo].[PbsTools] WHERE PbsProductId = @Id";

                IEnumerable<PbsCloneDto> toolsdata;
                toolsdata = dbConnection.Query<PbsCloneDto>(toolsquery, param);


                foreach (var t in toolsdata)
                {
                    var toolquery = @"INSERT INTO [dbo].[PbsTools]
                                               ([Id]
                                               ,[PbsProductId]
                                               ,[CoperateProductCatalogId]
                                               ,[Quantity])
                                         VALUES
                                               (@ToolId
                                               ,@ProductId
                                               ,(SELECT [CoperateProductCatalogId] FROM [dbo].[PbsTools] where Id = @Id)
                                               ,(SELECT [Quantity] FROM [dbo].[PbsTools] where Id = @Id))";

                    var parameter = new
                    {
                        t.Id,
                        ToolId = Guid.NewGuid().ToString(),
                        ProductId = NewId
                    };
                    await dbConnection.ExecuteAsync(toolquery, parameter);
                }

                //Clone Consumables
                var consumablesquery =
                    @"SELECT [Id] FROM [dbo].[PbsConsumable] WHERE PbsProductId = @Id";

                IEnumerable<PbsCloneDto> consumablesdata;
                consumablesdata = dbConnection.Query<PbsCloneDto>(consumablesquery, param);


                foreach (var c in consumablesdata)
                {
                    var consumablequery = @"INSERT INTO [dbo].[PbsConsumable]
                                               ([Id]
                                               ,[PbsProductId]
                                               ,[CoperateProductCatalogId]
                                               ,[Quantity])
                                         VALUES
                                               (@ConsumablesId
                                               ,@ProductId
                                               ,(SELECT [CoperateProductCatalogId] FROM [PbsConsumable] where Id = @Id)
                                               ,(SELECT [Quantity] FROM [dbo].[PbsConsumable] where Id = @Id))";

                    var parameter = new
                    {
                        c.Id,
                        ConsumablesId = Guid.NewGuid().ToString(),
                        ProductId = NewId
                    };
                    await dbConnection.ExecuteAsync(consumablequery, parameter);
                }

                //Clone  Labour
                var laboursquery =
                    @"SELECT [Id] FROM [dbo].[PbsLabour] WHERE PbsProductId = @Id";

                IEnumerable<PbsCloneDto> laboursdata;
                laboursdata = dbConnection.Query<PbsCloneDto>(laboursquery, param);


                foreach (var l in laboursdata)
                {
                    var labourquery = @"INSERT INTO [dbo].[PbsLabour]
                                               ([Id]
                                               ,[PbsProductId]
                                               ,[CoperateProductCatalogId]
                                               ,[Quantity])
                                         VALUES
                                               (@labourId
                                               ,@ProductId
                                               ,(SELECT [CoperateProductCatalogId] FROM [dbo].[PbsLabour] where Id = @Id)
                                               ,(SELECT [Quantity] FROM [dbo].[PbsLabour] where Id = @Id))";

                    var parameter = new
                    {
                        l.Id,
                        labourId = Guid.NewGuid().ToString(),
                        ProductId = NewId
                    };
                    await dbConnection.ExecuteAsync(labourquery, parameter);
                }

                //Clone Intructions
                var intructionsquery =
                    @"SELECT [Id] FROM [dbo].[PbsInstruction] WHERE PbsProductId = (SELECT  TOP 1 [Id] FROM [dbo].[PbsProduct] where ProductId = @Id)";

                IEnumerable<PbsCloneDto> intructionsdata;
                intructionsdata = dbConnection.Query<PbsCloneDto>(intructionsquery, param);


                foreach (var i in intructionsdata)
                {
                    var intructionquery = @"INSERT INTO [dbo].[PbsInstruction]
                                                                   ([Id]
                                                                   ,[PbsProductId]
                                                                   ,[PbsInstructionFamilyId]
                                                                   ,[InstructionsDetails]
                                                                   ,[IsDeleted]
                                                                   ,[IsSaved]
                                                                   ,[Name]
                                                                   ,[SequenceCode]
                                                                   ,[InstructionType])

                                                         SELECT	 @InsructionId
                                                           ,@ProductId
                                                           ,[PbsInstructionFamilyId]
                                                           ,[InstructionsDetails]
                                                           ,[IsDeleted]
                                                           ,[IsSaved]
                                                           ,[Name]
                                                           ,[SequenceCode]
                                                           ,[InstructionType]
                                                         FROM [dbo].[PbsInstruction] 
                                                         WHERE [Id] =@Id";
                    var parameter = new
                    {
                        i.Id,
                        InsructionId = Guid.NewGuid().ToString(),
                        ProductId = NewId
                    };
                    await dbConnection.ExecuteAsync(intructionquery, parameter);
                }

                //Clone Risk
                var risksquery =
                    @"SELECT [Id] FROM [dbo].[PbsRisk] WHERE PbsProductId = @Id";

                IEnumerable<PbsCloneDto> risksdata;
                risksdata = dbConnection.Query<PbsCloneDto>(risksquery, param);


                foreach (var n in risksdata)
                {
                    var riskquery = @"INSERT INTO [dbo].[PbsRisk]
                                                                   ([Id]
                                                                   ,[PbsProductId]
                                                                   ,[RiskId])

                                                         SELECT	 @RiskId
                                                           ,@ProductId
                                                           ,[RiskId]
                                                         FROM [dbo].[PbsRisk] 
                                                         WHERE [Id] =@Id";
                    var parameter = new
                    {
                        n.Id,
                        RiskId = Guid.NewGuid().ToString(),
                        ProductId = NewId
                    };
                    await dbConnection.ExecuteAsync(riskquery, parameter);
                }

                //Clone Quality
                var qualityquery =
                    @"SELECT [Id] FROM [dbo].[PbsQuality] WHERE PbsProductId = @Id";

                IEnumerable<PbsCloneDto> qualitydata;
                qualitydata = dbConnection.Query<PbsCloneDto>(qualityquery, param);

                foreach (var n in qualitydata)
                {
                    var quaquery = @"INSERT INTO [dbo].[PbsQuality]
                                                                   ([Id]
                                                                   ,[PbsProductId]
                                                                   ,[QualityId])

                                                         SELECT	 @QuaId
                                                           ,@ProductId
                                                           ,[QualityId]
                                                         FROM [dbo].[PbsQuality]
                                                         WHERE [Id] =@Id";
                    var parameter = new
                    {
                        n.Id,
                        QuaId = Guid.NewGuid().ToString(),
                        ProductId = NewId
                    };
                    await dbConnection.ExecuteAsync(quaquery, parameter);
                }

                //taxonomy

                var taxonomy =
                    @"SELECT Id,PbsProductId,PbsTaxonomyId,PbsTaxonomyNodeId FROM dbo.PbsProductTaxonomy WHERE PbsProductId = @Id";

                IEnumerable<PbsProductTaxonomy> mPbsProductTaxonomy;
                mPbsProductTaxonomy = dbConnection.Query<PbsProductTaxonomy>(taxonomy, param);
                var pbsProductTaxonomy = mPbsProductTaxonomy.GroupBy(a => a.PbsTaxonomyId).ToList();

                var inserttaxonomy =
                    @"INSERT INTO dbo.PbsProductTaxonomy ( Id ,PbsProductId ,PbsTaxonomyId ,PbsTaxonomyNodeId ) VALUES ( @Id ,@PbsProductId ,@PbsTaxonomyId ,@PbsTaxonomyNodeId )";
                foreach (var i in pbsProductTaxonomy)
                {
                    var parameter = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        PbsProductId = NewId,
                        i.First().PbsTaxonomyId,
                        i.First().PbsTaxonomyNodeId
                    };
                    await dbConnection.ExecuteAsync(inserttaxonomy, parameter);
                }

                //service

                IEnumerable<PbsServiceGetByIdDto> data;
                IEnumerable<ServiceDocuments> doc;
                data = dbConnection.Query<PbsServiceGetByIdDto>(
                    "SELECT * ,MouId AS Mou FROM PbsService WHERE ProductId =@ProductId",
                    new { ProductId = param.Id });

                var insertService =
                    @"INSERT INTO dbo.PbsService ( Id ,ProductId ,Quantity ,MouId ,UnitPrice ,TotalPrice ,Comments ) VALUES ( @Id ,@ProductId ,@Quantity ,@MouId ,@UnitPrice ,@TotalPrice ,@Comments );";
                var insertDoc =
                    @"INSERT INTO dbo.ServiceDocuments ( Id ,Link ,ProductId ,ServiceId ) VALUES ( @Id ,@Link ,@ProductId ,@ServiceId );";
                if (data.FirstOrDefault() != null)
                {
                    foreach (var i in data)
                    {
                        var param2 = new
                        {
                            Id = Guid.NewGuid().ToString(),
                            ProductId = NewId,
                            i.Quantity,
                            MouId = i.Mou,
                            i.UnitPrice,
                            i.TotalPrice,
                            i.Comments
                        };
                        await dbConnection.ExecuteAsync(insertService, param2);
                    }

                    var documents = @"SELECT * FROM dbo.ServiceDocuments WHERE ProductId =@Id";
                    doc = dbConnection.Query<ServiceDocuments>(documents, new { param.Id })
                        .ToList();
                    foreach (var r in doc)
                    {
                        var param2 = new
                        {
                            Id = Guid.NewGuid().ToString(),
                            ProductId = NewId,
                            r.Link,
                            r.ServiceId
                        };
                    }
                }

                return NewId;
            }
        }
        catch (Exception e)
        {
            //Console.WriteLine(e);
            throw;
        }
    }

    public async Task<string> PbsHistory(VPParameter VPParameter)
    {
        //var options = new DbContextOptions<ApplicationDbContext>();
        // var applicationDbContext =
        //     new ApplicationDbContext(options, VPParameter.TenantProvider);
        // var connectionString = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
        //     VPParameter.ProjectSequenceId, VPParameter.TenantProvider);
        var jsonProduct = JsonConvert.SerializeObject(VPParameter.PBSCloneForVpDto, Formatting.None,
            new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            });
        var historyLog = new PbsHistoryLog
        {
            Id = Guid.NewGuid().ToString(),
            ChangedTime = DateTime.UtcNow,
            ChangedByUserId = VPParameter.UserId,
            HistoryLog = jsonProduct
        };

        historyLog.PbsProductId = VPParameter.Id;
        historyLog.Action = HistoryState.ADDED.ToString();

        var projectCon = ConnectionString.MapConnectionString(VPParameter.ContractingUnitSequenceId,
            VPParameter.ProjectSequenceId, VPParameter.TenantProvider);
        var projectConOptions = new DbContextOptions<ShanukaDbContext>();
        var projApplicationDbContext =
            new ShanukaDbContext(projectConOptions, projectCon, VPParameter.TenantProvider);
        projApplicationDbContext.PbsHistoryLog.Add(historyLog);
        projApplicationDbContext.SaveChanges();

        return VPParameter.PBSCloneForVpDto.PbsId;
    }

    public async Task<IEnumerable<TeamsWithPmolDto>> DayPlanningListDataForPerson(VPParameter VPParameter)
    {
        var teamsWithPmol = new List<TeamsWithPmolDto>();

        using (var connection =
               new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
        {
            var teampmol =
                @"SELECT * FROM dbo.OrganizationTeamPmol WHERE ExecutionDate BETWEEN @Startdate AND @Enddate ";

            IEnumerable<OrganizationTeamPmol> mOrganizationTeamPmol;

            mOrganizationTeamPmol = connection.Query<OrganizationTeamPmol>(teampmol,
                    new { Startdate = VPParameter.GetTeamDto.StartDate, Enddate = VPParameter.GetTeamDto.EndDate })
                .ToList();

            var teamgroup = mOrganizationTeamPmol.GroupBy(e => e.OrganizationTeamId);

            foreach (var n in teamgroup)
            {
                var teamsWithPmolDto = new TeamsWithPmolDto();
                var pmolDatalist = new List<PmolData>();
                var team = new List<PmolTeamMeber>();

                var ispmol = false;
                foreach (var r in n)
                {
                    IEnumerable<PomlVehicle> vehicals;
                    IEnumerable<PomlVehicle> tools;
                    var connectionString = ConnectionString.MapConnectionString(r.ContractingUnit,
                        r.Project, VPParameter.TenantProvider);

                    using (var dbconnection =
                           new SqlConnection(connectionString))
                    {
                        var pmolquery = @"SELECT
                                          PMol.ProjectMoleculeId
                                         ,PMol.Name
                                         ,PMol.Id
                                         ,PMol.ExecutionEndTime
                                         ,PMol.ExecutionStartTime
                                         ,PMol.ExecutionDate
                                         ,PMol.Title
                                         ,PMol.ProjectSequenceCode
                                         ,PMol.StatusId
                                         ,PMol.TypeId
                                         ,PMol.LocationId
                                         ,PMol.ProductId
                                        FROM dbo.PMol
                                        LEFT OUTER JOIN PMolPlannedWorkLabour ppwl ON PMol.Id = ppwl.PmolId
                                        LEft OUTER JOIN PmolTeamRole ptr ON ppwl.Id = ptr.PmolLabourId
                                        WHERE PMol.Id = @Id AND ptr.CabPersonId = @CabPersonId";

                        var sb = new StringBuilder(pmolquery);
                        if (VPParameter.GetTeamDto.PmolStatus != null)
                            sb.Append(" AND PMol.StatusId = '" + VPParameter.GetTeamDto.PmolStatus + "'");

                        var pmolData1 = new PmolData
                        {
                            ProjectSequenceCode = r.Project,
                            ProjectTitle = connection
                                .Query<string>("SELECT Title FROM dbo.ProjectDefinition WHERE SequenceCode = @Project",
                                    new { r.Project }).FirstOrDefault()
                        };
                        var pmol = dbconnection.Query<Pmol>(sb.ToString(),
                            new { Id = r.PmolId, VPParameter.GetTeamDto.CabPersonId }).FirstOrDefault();
                        if (pmol != null)
                        {
                            ispmol = true;
                            pmolData1.Id = pmol.Id;
                            pmolData1.Name = pmol.Name;
                            pmolData1.ExecutionStartTime = pmol.ExecutionStartTime;
                            pmolData1.ExecutionEndTime = pmol.ExecutionEndTime;
                            pmolData1.ExecutionDate = pmol.ExecutionDate.ToString();
                            pmolData1.Title = pmol.Title;
                            pmolData1.ContractingUinit = r.ContractingUnit;
                            pmolData1.TeamId = r.OrganizationTeamId;
                            pmolData1.ProjectMoleculeId = pmol.ProjectMoleculeId;
                            pmolData1.StatusId = pmol.StatusId;
                            pmolData1.TypeId = pmol.TypeId;
                            pmolData1.IsRFQGenerated = connection
                                .Query<PmolRfq>("Select * from PmolRfq Where PmolId = @PmolId",
                                    new { PmolId = pmol.Id })
                                .Any();

                            var selectProduct = @"with name_tree as
                                                             (SELECT
                                                               PbsProduct.Id
                                                              ,PbsProduct.Name
                                                              ,PbsProduct.Title
                                                              ,PbsProduct.ParentId
                                                             FROM dbo.PbsProduct
                                                             WHERE PbsProduct.Id = @Id
                                                               UNION ALL
                                                               SELECT c.Id, c.Name,CONCAT(c.Title,' > ',p.Title),c.ParentId
                                                               FROM dbo.PbsProduct c
                                                               JOIN name_tree p on p.ParentId = c.ProductId)
                                                               select Title
                                                               from name_tree WHERE ParentId IS NULL";

                            pmolData1.ProductTaxonomy = dbconnection
                                .Query<string>(selectProduct, new { Id = pmol.ProductId }).FirstOrDefault();

                            if (pmol.LocationId != null && pmol.ExecutionStartTime != null)
                            {
                                var mapLocation = dbconnection
                                    .Query<Position>(
                                        "SELECT * FROM Position LEFT OUTER JOIN MapLocation ml ON Position.Id = ml.PositionId WHERE ml.Id = @Id",
                                        new { Id = pmol.LocationId }).FirstOrDefault();

                                if (mapLocation != null)
                                    if (mapLocation.Lat != "0" || mapLocation.Lon != "0")
                                    {
                                        var forecast = await VPParameter._iShiftRepository.GetWeatherForecast(
                                            mapLocation.Lat.ToDouble(), mapLocation.Lon.ToDouble(),
                                            pmol.ExecutionDate.GetValueOrDefault(), pmol.ExecutionStartTime,
                                            VPParameter.TenantProvider, VPParameter.Configuration);


                                        pmolData1.Forecast = forecast;
                                    }
                            }

                            var vehical =
                                @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id INNER JOIN dbo.CorporateProductCatalog ON PMolPlannedWorkTools.CoperateProductCatalogId = CorporateProductCatalog.Id WHERE CorporateProductCatalog.ResourceFamilyId = '0c355800-91fd-4d99-8010-921a42f0ba04' AND PMol.Id = @Id AND PMolPlannedWorkTools.IsDeleted = 0";

                            var tool =
                                @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber,PMolPlannedWorkTools.RequiredQuantity,PMolPlannedWorkTools.AllocatedQuantity FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id INNER JOIN dbo.CorporateProductCatalog ON PMolPlannedWorkTools.CoperateProductCatalogId = CorporateProductCatalog.Id WHERE PMol.Id = @Id AND PMolPlannedWorkTools.IsDeleted = 0 AND CorporateProductCatalog.ResourceFamilyId != '0c355800-91fd-4d99-8010-921a42f0ba04'";

                            {
                                vehicals = dbconnection.Query<PomlVehicle>(vehical, new { Id = r.PmolId }).ToList();
                                tools = dbconnection.Query<PomlVehicle>(tool, new { Id = r.PmolId }).ToList();
                            }
                            if (vehicals.Any()) pmolData1.PomlVehical = (List<PomlVehicle>)vehicals;

                            if (tools.Any()) pmolData1.PomlTool = (List<PomlVehicle>)tools;

                            pmolDatalist.Add(pmolData1);
                        }
                    }
                }

                if (ispmol)
                {
                    var teamquery = @"SELECT
                                              CabPerson.Id
                                             ,CabPerson.FullName AS Name
                                            FROM dbo.OrganizationTaxonomy
                                            LEFT OUTER JOIN dbo.CabPersonCompany
                                              ON OrganizationTaxonomy.PersonId = CabPersonCompany.Id
                                            INNER JOIN dbo.CabPerson
                                              ON CabPersonCompany.PersonId = CabPerson.Id
                                            WHERE OrganizationTaxonomy.ParentId = @Id ORDER BY CabPerson.FullName";
                    

                    team = connection.Query<PmolTeamMeber>(teamquery, new { Id = n.Key }).ToList();

                    if (team.Count != 0)
                    {
                        teamsWithPmolDto.TeamId = n.Key;
                        teamsWithPmolDto.TeamTitle = connection
                            .Query<string>("SELECT Title FROM dbo.OrganizationTaxonomy WHERE Id = @Id",
                                new { Id = n.Key }).FirstOrDefault();

                        var cu = @"with name_tree as
                                            (SELECT
                                              OrganizationTaxonomy.Id
                                             ,OrganizationTaxonomy.Title
                                             ,OrganizationTaxonomy.ParentId
                                             ,OrganizationTaxonomy.OrganizationTaxonomyLevelId
                                            FROM dbo.OrganizationTaxonomy
                                            WHERE OrganizationTaxonomy.Id = @Id
                                              UNION ALL
                                              SELECT c.Id, c.Title,c.ParentId,c.OrganizationTaxonomyLevelId
                                              FROM dbo.OrganizationTaxonomy c
                                              JOIN name_tree p on p.ParentId = c.Id)
                                              select OrganizationTaxonomyLevelId, Title, Id,ParentId
                                              from name_tree
                                              where OrganizationTaxonomyLevelId = '2210e768-3e06-po02-b337-ee367a82adjj'";
                        var cuId = connection.Query<OrganizationTaxonomy>(cu, new { Id = n.Key })
                            .FirstOrDefault();

                        if (pmolDatalist.Count != 0)
                        {
                            pmolDatalist = pmolDatalist.OrderBy(c => c.ExecutionStartTime).ToList();
                            teamsWithPmolDto.Pmol = pmolDatalist;
                            teamsWithPmolDto.ProjectSequenceCode =
                                teamsWithPmolDto.Pmol.FirstOrDefault().ProjectSequenceCode;
                        }

                        teamsWithPmolDto.ContractingUinit = cuId.Title;
                        teamsWithPmolDto.Team = team;
                        teamsWithPmol.Add(teamsWithPmolDto);
                    }
                }
            }
        }

        return teamsWithPmol;
    }

    public async Task<IEnumerable<TeamsWithPmolDto>> DayPlanningListDataProjectForPerson(VPParameter VPParameter)
    {
        var teamsWithPmol = new List<TeamsWithPmolDto>();

        using (var connection =
               new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
        {
            var teampmol =
                @"SELECT * FROM dbo.OrganizationTeamPmol WHERE ExecutionDate BETWEEN @Startdate AND @Enddate AND Project = @Project";

            IEnumerable<OrganizationTeamPmol> mOrganizationTeamPmol;

            mOrganizationTeamPmol = connection.Query<OrganizationTeamPmol>(teampmol,
                new
                {
                    Startdate = VPParameter.GetTeamDto.StartDate, Enddate = VPParameter.GetTeamDto.EndDate,
                    Project = VPParameter.ProjectSequenceId
                }).ToList();

            var teamgroup = mOrganizationTeamPmol.GroupBy(e => e.OrganizationTeamId);

            foreach (var n in teamgroup)
            {
                var teamsWithPmolDto = new TeamsWithPmolDto();
                var pmolDatalist = new List<PmolData>();
                var team = new List<PmolTeamMeber>();

                var ispmol = false;
                foreach (var r in n)
                {
                    IEnumerable<PomlVehicle> vehicals;
                    IEnumerable<PomlVehicle> tools;
                    var connectionString = ConnectionString.MapConnectionString(r.ContractingUnit,
                        r.Project, VPParameter.TenantProvider);

                    using (var dbconnection =
                           new SqlConnection(connectionString))
                    {
                        var pmolquery = @"SELECT
                                          PMol.ProjectMoleculeId
                                         ,PMol.Name
                                         ,PMol.Id
                                         ,PMol.ExecutionEndTime
                                         ,PMol.ExecutionStartTime
                                         ,PMol.ExecutionDate
                                         ,PMol.Title
                                         ,PMol.ProjectSequenceCode
                                         ,PMol.StatusId
                                         ,PMol.TypeId
                                         ,PMol.LocationId,PMol.ProductId
                                        FROM dbo.PMol
                                        LEFT OUTER JOIN PMolPlannedWorkLabour ppwl ON PMol.Id = ppwl.PmolId
                                        LEft OUTER JOIN PmolTeamRole ptr ON ppwl.Id = ptr.PmolLabourId
                                        WHERE PMol.Id = @Id AND ptr.CabPersonId = @CabPersonId";

                        var sb = new StringBuilder(pmolquery);
                        if (VPParameter.GetTeamDto.PmolStatus != null)
                            sb.Append(" AND PMol.StatusId = '" + VPParameter.GetTeamDto.PmolStatus + "'");

                        var pmolData1 = new PmolData
                        {
                            ProjectSequenceCode = r.Project,
                            ProjectTitle = connection
                                .Query<string>("SELECT Title FROM dbo.ProjectDefinition WHERE SequenceCode = @Project",
                                    new { r.Project }).FirstOrDefault()
                        };
                        var pmol = dbconnection.Query<Pmol>(sb.ToString(),
                            new { Id = r.PmolId, VPParameter.GetTeamDto.CabPersonId }).FirstOrDefault();
                        if (pmol != null)
                        {
                            ispmol = true;
                            pmolData1.Id = pmol.Id;
                            pmolData1.Name = pmol.Name;
                            pmolData1.ExecutionStartTime = pmol.ExecutionStartTime;
                            pmolData1.ExecutionEndTime = pmol.ExecutionEndTime;
                            pmolData1.ExecutionDate = pmol.ExecutionDate.ToString();
                            pmolData1.Title = pmol.Title;
                            pmolData1.ContractingUinit = r.ContractingUnit;
                            pmolData1.TeamId = r.OrganizationTeamId;
                            pmolData1.ProjectMoleculeId = pmol.ProjectMoleculeId;
                            pmolData1.StatusId = pmol.StatusId;
                            pmolData1.TypeId = pmol.TypeId;
                            pmolData1.IsRFQGenerated = connection
                                .Query<PmolRfq>("Select * from PmolRfq Where PmolId = @PmolId",
                                    new { PmolId = pmol.Id })
                                .Any();

                            var selectProduct = @"with name_tree as
                                                             (SELECT
                                                               PbsProduct.Id
                                                              ,PbsProduct.Name
                                                              ,PbsProduct.Title
                                                              ,PbsProduct.ParentId
                                                             FROM dbo.PbsProduct
                                                             WHERE PbsProduct.Id = @Id
                                                               UNION ALL
                                                               SELECT c.Id, c.Name,CONCAT(c.Title,' > ',p.Title),c.ParentId
                                                               FROM dbo.PbsProduct c
                                                               JOIN name_tree p on p.ParentId = c.ProductId)
                                                               select Title
                                                               from name_tree WHERE ParentId IS NULL";

                            pmolData1.ProductTaxonomy = dbconnection
                                .Query<string>(selectProduct, new { Id = pmol.ProductId }).FirstOrDefault();

                            if (pmol.LocationId != null && pmol.ExecutionStartTime != null)
                            {
                                var mapLocation = dbconnection
                                    .Query<Position>(
                                        "SELECT * FROM Position LEFT OUTER JOIN MapLocation ml ON Position.Id = ml.PositionId WHERE ml.Id = @Id",
                                        new { Id = pmol.LocationId }).FirstOrDefault();

                                if (mapLocation != null)
                                    if (mapLocation.Lat != "0" || mapLocation.Lon != "0")
                                    {
                                        var forecast = await VPParameter._iShiftRepository.GetWeatherForecast(
                                            mapLocation.Lat.ToDouble(), mapLocation.Lon.ToDouble(),
                                            pmol.ExecutionDate.GetValueOrDefault(), pmol.ExecutionStartTime,
                                            VPParameter.TenantProvider, VPParameter.Configuration);


                                        pmolData1.Forecast = forecast;
                                    }
                            }

                            var vehical =
                                @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id INNER JOIN dbo.CorporateProductCatalog ON PMolPlannedWorkTools.CoperateProductCatalogId = CorporateProductCatalog.Id WHERE CorporateProductCatalog.ResourceFamilyId = '0c355800-91fd-4d99-8010-921a42f0ba04' AND PMol.Id = @Id AND PMolPlannedWorkTools.IsDeleted = 0";

                            var tool =
                                @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber,PMolPlannedWorkTools.RequiredQuantity,PMolPlannedWorkTools.AllocatedQuantity FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id INNER JOIN dbo.CorporateProductCatalog ON PMolPlannedWorkTools.CoperateProductCatalogId = CorporateProductCatalog.Id WHERE PMol.Id = @Id AND PMolPlannedWorkTools.IsDeleted = 0 AND CorporateProductCatalog.ResourceFamilyId != '0c355800-91fd-4d99-8010-921a42f0ba04'";

                            {
                                vehicals = dbconnection.Query<PomlVehicle>(vehical, new { Id = r.PmolId }).ToList();
                                tools = dbconnection.Query<PomlVehicle>(tool, new { Id = r.PmolId }).ToList();
                            }
                            if (vehicals.Any()) pmolData1.PomlVehical = (List<PomlVehicle>)vehicals;

                            if (tools.Any()) pmolData1.PomlTool = (List<PomlVehicle>)tools;

                            pmolDatalist.Add(pmolData1);
                        }
                    }
                }

                if (ispmol)
                {
                    var teamquery = @"SELECT
                                              CabPerson.Id
                                             ,CabPerson.FullName AS Name
                                            FROM dbo.OrganizationTaxonomy
                                            LEFT OUTER JOIN dbo.CabPersonCompany
                                              ON OrganizationTaxonomy.PersonId = CabPersonCompany.Id
                                            INNER JOIN dbo.CabPerson
                                              ON CabPersonCompany.PersonId = CabPerson.Id
                                            WHERE OrganizationTaxonomy.ParentId = @Id ORDER BY CabPerson.FullName";

                    List<PmolTeamMeber> mPmolTeamMeber;

                    team = connection.Query<PmolTeamMeber>(teamquery, new { Id = n.Key }).ToList();

                    if (team.Count != 0)
                    {
                        teamsWithPmolDto.TeamId = n.Key;
                        teamsWithPmolDto.TeamTitle = connection
                            .Query<string>("SELECT Title FROM dbo.OrganizationTaxonomy WHERE Id = @Id",
                                new { Id = n.Key }).FirstOrDefault();

                        var cu = @"with name_tree as
                                            (SELECT
                                              OrganizationTaxonomy.Id
                                             ,OrganizationTaxonomy.Title
                                             ,OrganizationTaxonomy.ParentId
                                             ,OrganizationTaxonomy.OrganizationTaxonomyLevelId
                                            FROM dbo.OrganizationTaxonomy
                                            WHERE OrganizationTaxonomy.Id = @Id
                                              UNION ALL
                                              SELECT c.Id, c.Title,c.ParentId,c.OrganizationTaxonomyLevelId
                                              FROM dbo.OrganizationTaxonomy c
                                              JOIN name_tree p on p.ParentId = c.Id)
                                              select OrganizationTaxonomyLevelId, Title, Id,ParentId
                                              from name_tree
                                              where OrganizationTaxonomyLevelId = '2210e768-3e06-po02-b337-ee367a82adjj'";
                        var cuId = connection.Query<OrganizationTaxonomy>(cu, new { Id = n.Key })
                            .FirstOrDefault();

                        if (pmolDatalist.Count != 0)
                        {
                            pmolDatalist = pmolDatalist.OrderBy(c => c.ExecutionStartTime).ToList();
                            teamsWithPmolDto.Pmol = pmolDatalist;
                            teamsWithPmolDto.ProjectSequenceCode =
                                teamsWithPmolDto.Pmol.FirstOrDefault().ProjectSequenceCode;
                        }

                        teamsWithPmolDto.ContractingUinit = cuId.Title;
                        teamsWithPmolDto.Team = team;
                        teamsWithPmol.Add(teamsWithPmolDto);
                    }
                }
            }
        }

        return teamsWithPmol;
    }

    public async Task<List<TeamsWithPmolDto>> DayPlanningListDataPM(VPParameter VPParameter)
    {
        var db = new List<ProjectDefinition>();
        var teamsWithPmol = new List<TeamsWithPmolDto>();
        string env = null;

        var exceptionLst = new List<DatabasesException>();
        var selectProject =
            @"SELECT ProjectDefinition.Title,ProjectDefinition.SequenceCode,ProjectDefinition.ProjectConnectionString ,CabCompany.SequenceCode AS ContractingUnitId FROM dbo.ProjectDefinition LEFT OUTER JOIN CabCompany ON ProjectDefinition.ContractingUnitId = CabCompany.Id WHERE ProjectDefinition.IsDeleted = 0 AND ProjectManagerId = (SELECT PersonId FROM CabPersonCompany WHERE Oid = @Oid) ORDER BY ProjectDefinition.SequenceCode";
        using (var dbconnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
        {
            db = dbconnection
                .Query<ProjectDefinition>(
                    selectProject, new { Oid = VPParameter.UserId })
                .ToList();

            var memberselect = @"SELECT Id,FullName As Name FROM [dbo].[CabPerson]";
            IEnumerable<PmolTeamMeber> members;
            members = dbconnection.Query<PmolTeamMeber>(memberselect);

            var vehical =
                @"SELECT PMolPlannedWorkTools.CoperateProductCatalogId ,CorporateProductCatalog.Title ,CorporateProductCatalog.ResourceNumber,PMolPlannedWorkTools.PmolId FROM dbo.PMolPlannedWorkTools INNER JOIN dbo.PMol ON PMolPlannedWorkTools.PmolId = PMol.Id INNER JOIN dbo.CorporateProductCatalog ON PMolPlannedWorkTools.CoperateProductCatalogId = CorporateProductCatalog.Id WHERE CorporateProductCatalog.ResourceFamilyId = '0c355800-91fd-4d99-8010-921a42f0ba04' AND PMolPlannedWorkTools.IsDeleted = 0";

            if (db.Any())
                foreach (var project in db)
                    try
                    {
                        string query = null;

                        if (VPParameter.GetTeamDto.PmolStatus != null)
                            query = @"SELECT
                                  PMol.ProjectMoleculeId
                                 ,PmolTeamRole.CabPersonId
                                 ,PMol.Name
                                 ,PMol.Id
                                 ,PMol.ExecutionEndTime
                                 ,PMol.ExecutionStartTime
                                 ,PMol.ExecutionDate
                                 ,PMol.Title
                                 ,PMol.ProjectSequenceCode
                                 ,PMol.TypeId
                                FROM dbo.PMolPlannedWorkLabour
                                INNER JOIN dbo.PMol
                                  ON PMolPlannedWorkLabour.PmolId = PMol.Id
                                INNER JOIN dbo.PmolTeamRole
                                  ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id
                                WHERE PMolPlannedWorkLabour.IsDeleted = 0
                                AND PmolTeamRole.IsDeleted = 0
                                AND PmolTeamRole.CabPersonId IS NOT NULL
                                AND PMol.ExecutionDate BETWEEN @Startdate AND @Enddate
                                AND PMol.StatusId = @StatusId
                                GROUP BY PMol.ProjectMoleculeId
                                        ,PmolTeamRole.CabPersonId
                                        ,PMol.Name
                                        ,PMol.Id
                                        ,PMol.ExecutionEndTime
                                        ,PMol.ExecutionStartTime
                                        ,PMol.ExecutionDate
                                        ,PMol.Title
                                        ,PMol.ProjectSequenceCode
                                        ,PMol.TypeId
                                ORDER BY PMol.ProjectMoleculeId DESC";
                        else
                            query = @"SELECT
                                  PMol.ProjectMoleculeId
                                 ,PmolTeamRole.CabPersonId
                                 ,PMol.Name
                                 ,PMol.Id
                                 ,PMol.ExecutionEndTime
                                 ,PMol.ExecutionStartTime
                                 ,PMol.ExecutionDate
                                 ,PMol.Title
                                 ,PMol.ProjectSequenceCode
                                 ,PMol.TypeId
                                FROM dbo.PMolPlannedWorkLabour
                                INNER JOIN dbo.PMol
                                  ON PMolPlannedWorkLabour.PmolId = PMol.Id
                                INNER JOIN dbo.PmolTeamRole
                                  ON PmolTeamRole.PmolLabourId = PMolPlannedWorkLabour.Id
                                WHERE PMolPlannedWorkLabour.IsDeleted = 0
                                AND PmolTeamRole.IsDeleted = 0
                                AND PmolTeamRole.CabPersonId IS NOT NULL
                                AND PMol.ExecutionDate BETWEEN @Startdate AND @Enddate
                                GROUP BY PMol.ProjectMoleculeId
                                        ,PmolTeamRole.CabPersonId
                                        ,PMol.Name
                                        ,PMol.Id
                                        ,PMol.ExecutionEndTime
                                        ,PMol.ExecutionStartTime
                                        ,PMol.ExecutionDate
                                        ,PMol.Title
                                        ,PMol.ProjectSequenceCode
                                        ,PMol.TypeId
                                ORDER BY PMol.ProjectMoleculeId DESC";

                        IEnumerable<PmolTeam> pmol;
                        await using (var connection = new SqlConnection(project.ProjectConnectionString))
                        {
                            pmol = connection.Query<PmolTeam>(query,
                                new
                                {
                                    Enddate = VPParameter.GetTeamDto.EndDate,
                                    Startdate = VPParameter.GetTeamDto.StartDate,
                                    StatusId = VPParameter.GetTeamDto.PmolStatus
                                }).ToList();

                            var equallist = new List<string>();
                            var groupteams = pmol.GroupBy(r => r.ProjectMoleculeId);

                            IEnumerable<PomlVehicle> vehicals;
                            IEnumerable<PomlVehicle> vehicals1;
                            vehicals1 = connection.Query<PomlVehicle>(vehical)
                                .ToList();
                            foreach (var r in groupteams)
                            {
                                var list1 = new List<string>();
                                PomlList pomlList = null;
                                var teamsWithPmolDto = new TeamsWithPmolDto();
                                var pmolDatalist = new List<PmolData>();
                                var team = new List<PmolTeamMeber>();
                                var pmolData = new PmolData();
                                var equal = equallist.Any(item => item == r.Key);

                                if (equal == false)
                                {
                                    foreach (var a in r)
                                    {
                                        var member =
                                            members.Where(m => m.Id == a.CabPersonId).FirstOrDefault();


                                        var m = new PmolTeamMeber();
                                        m.Id = member.Id;
                                        m.Name = member.Name;
                                        team.Add(m);
                                        list1.Add(a.CabPersonId);
                                    }

                                    var first = r.First();
                                    foreach (var b in groupteams)
                                    {
                                        var pmolTeam = b.First();
                                        var pmolid2 = pmolTeam.ProjectMoleculeId;
                                        var list2 = new List<string>();
                                        if (b.Key != r.Key)
                                        {
                                            foreach (var c in b) list2.Add(c.CabPersonId);

                                            var result = list1.OrderBy(e => e).SequenceEqual(list2.OrderBy(e => e));

                                            if (result)
                                            {
                                                var pmolData1 = new PmolData();
                                                pmolData1.ProjectMoleculeId = b.Key;

                                                vehicals = vehicals1.Where(v => v.PmolId == b.Key).ToList();

                                                if (vehicals.Count() > 0)
                                                    pmolData1.PomlVehical = (List<PomlVehicle>)vehicals;

                                                pmolData1.Id = pmolTeam.Id;
                                                pmolData1.Name = pmolTeam.Name;
                                                pmolData1.ExecutionStartTime = pmolTeam.ExecutionStartTime;
                                                pmolData1.ExecutionEndTime = pmolTeam.ExecutionEndTime;
                                                pmolData1.ExecutionDate = pmolTeam.ExecutionDate;
                                                pmolData1.ProjectSequenceCode = project.SequenceCode;
                                                pmolData1.Title = pmolTeam.Title;
                                                pmolData1.ContractingUinit = project.ContractingUnitId;
                                                pmolData1.TypeId = pmolTeam.TypeId;
                                                pmolDatalist.Add(pmolData1);
                                                equallist.Add(pmolid2);
                                            }
                                        }
                                    }

                                    pmolData.ProjectMoleculeId = r.Key;
                                    vehicals = vehicals1.Where(v => v.PmolId == r.Key).ToList();
                                    if (vehicals.Count() > 0) pmolData.PomlVehical = (List<PomlVehicle>)vehicals;

                                    pmolData.Id = first.Id;
                                    pmolData.Name = first.Name;
                                    pmolData.ExecutionDate = first.ExecutionDate;
                                    pmolData.ExecutionStartTime = first.ExecutionStartTime;
                                    pmolData.ExecutionEndTime = first.ExecutionEndTime;
                                    pmolData.ProjectSequenceCode = project.SequenceCode;
                                    pmolData.ContractingUinit = project.ContractingUnitId;
                                    pmolData.Title = first.Title;
                                    pmolData.TypeId = first.TypeId;
                                    pmolDatalist.Add(pmolData);
                                    teamsWithPmolDto.Pmol = pmolDatalist;
                                    teamsWithPmolDto.Team = team;
                                    teamsWithPmolDto.ProjectSequenceCode = project.SequenceCode;
                                    teamsWithPmolDto.ContractingUinit = project.ContractingUnitId;
                                    teamsWithPmol.Add(teamsWithPmolDto);
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        var mDatabasesException = new DatabasesException();
                        mDatabasesException.DatabaseName = project.SequenceCode;
                        mDatabasesException.Exception = ex;
                        exceptionLst.Add(mDatabasesException);
                    }
        }

        return teamsWithPmol;
    }

    public async Task<string> CreateNewTeamProjectPlanning(VPParameter VPParameter)
    {
        var projectData =
            @"SELECT ProjectDefinition.Title, ProjectDefinition.ProjectConnectionString, CabCompany.SequenceCode AS ContractingUnitId FROM dbo.ProjectDefinition LEFT OUTER JOIN CabCompany ON ProjectDefinition.ContractingUnitId = CabCompany.Id WHERE ProjectDefinition.SequenceCode = @Project";

        var selectBu = @"SELECT
                                  ProjectClassification.ProjectClassificationBuisnessUnit
                                FROM dbo.ProjectDefinition
                                LEFT OUTER JOIN dbo.ProjectClassification
                                  ON ProjectDefinition.Id = ProjectClassification.ProjectId
                                WHERE ProjectDefinition.SequenceCode = @Project";

        using (var connection =
               new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString))
        {
            var cu = connection.Query<ProjectDefinition>(projectData,
                new { Project = VPParameter.PmolAssignDayPanningDto.ProjectSequenceCode }).FirstOrDefault();
            
            if (VPParameter.PmolAssignDayPanningDto.BuId == null)
                VPParameter.PmolAssignDayPanningDto.BuId = connection.Query<string>(selectBu,
                    new { Project = VPParameter.PmolAssignDayPanningDto.ProjectSequenceCode}).FirstOrDefault();

            var newTeam =
                @"INSERT INTO dbo.OrganizationTaxonomy (Id, Title, ParentId, OrganizationTaxonomyLevelId, PersonId, RoleId, ModifiedDate,StartDate,EndDate,TemporaryTeamNameId) VALUES (@Id, @Title, @ParentId, @OrganizationTaxonomyLevelId, @PersonId, @RoleId, @ModifiedDate,@StartDate,@EndDate,@TemporaryTeamNameId)";

            if (VPParameter.PmolAssignDayPanningDto.TeamId == null)
            {
                var existingTeam =
                    @"SELECT ParentId FROM OrganizationTaxonomy WHERE PersonId = @CabPersonCompanyId AND StartDate = @Startdate AND EndDate = @EndDate";

                var param3 = new
                {
                    VPParameter.PmolAssignDayPanningDto.CabPersonCompanyId,
                    StartDate = VPParameter.PmolAssignDayPanningDto.ExecutionDate
                        .AddDays(-(int)VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek).Date,
                    EndDate = VPParameter.PmolAssignDayPanningDto.ExecutionDate
                        .AddDays(-(int)VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek).AddDays(7).Date
                };
                var existingTeamList = connection.Query<string>(existingTeam, param3).ToList();

                var teamPersonId = @"SELECT PersonId FROM OrganizationTaxonomy WHERE ParentId = @Id";

                string teamId = null;

                foreach (var i in existingTeamList)
                {
                    var teamParentId = connection
                        .Query<string>("SELECT ParentId FROM OrganizationTaxonomy WHERE Id = @Id", new { Id = i })
                        .FirstOrDefault();
                    if (teamParentId == VPParameter.PmolAssignDayPanningDto.BuId)
                    {
                        var teamPersonIdList = connection.Query<string>(teamPersonId, new { Id = i }).ToList();

                        if (teamPersonIdList.Count == 1)
                        {
                            teamId = i;
                            break;
                        }
                    }
                }

                if (teamId != null)
                {
                    var connectionString = ConnectionString.MapConnectionString(
                        VPParameter.AddTeamMember.ContractingUnit,
                        VPParameter.AddTeamMember.ProjectSequenceCode, VPParameter.TenantProvider);

                    await using var pconnection = new SqlConnection(connectionString);

                    var pmol = pconnection
                        .Query<Pmol>(
                            "SELECT ExecutionDate,ExecutionStartTime,ExecutionEndTime FROM dbo.PMol WHERE Id = @Id",
                            new { Id = VPParameter.AddTeamMember.PmolId }).FirstOrDefault();

                    var insert =
                        @"INSERT INTO OrganizationTeamPmol ( Id ,OrganizationTeamId ,PmolId ,ExecutionDate ,StartTime ,EndTime ,ContractingUnit ,Project ) VALUES ( @Id ,@OrganizationTeamId ,@PmolId ,@ExecutionDate ,@StartTime ,@EndTime ,@ContractingUnit ,@Project)";

                    var param = new
                    {
                        Id = Guid.NewGuid(),
                        OrganizationTeamId = teamId,
                        VPParameter.AddTeamMember.PmolId,
                        pmol.ExecutionDate,
                        StartTime = pmol.ExecutionStartTime,
                        EndTime = pmol.ExecutionEndTime,
                        VPParameter.AddTeamMember.ContractingUnit,
                        Project = VPParameter.AddTeamMember.ProjectSequenceCode
                    };

                    var day = VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek.ToString();

                    await connection.ExecuteAsync(insert, param);

                    return VPParameter.PmolAssignDayPanningDto.TeamId;
                }

                else
                {
                    var parent = connection
                        .Query<OrganizationTaxonomy>(
                            "SELECT * FROM dbo.OrganizationTaxonomy WHERE Title = @Cu",
                            new {Cu = cu.ContractingUnitId})
                        .FirstOrDefault();

                    var parentId = VPParameter.PmolAssignDayPanningDto.BuId;

                    var param1 = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        parent?.Title,
                        ParentId = parentId,
                        OrganizationTaxonomyLevelId = "fg10e768-3e06-po02-b337-ee367a82adfg",
                        PersonId = "",
                        RoleId = "",
                        ModifiedDate = DateTime.UtcNow,
                        StartDate = VPParameter.PmolAssignDayPanningDto.ExecutionDate
                            .AddDays(-(int) VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek).Date,
                        EndDate = VPParameter.PmolAssignDayPanningDto.ExecutionDate
                            .AddDays(-(int) VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek).AddDays(7)
                            .Date,
                        TemporaryTeamNameId = "7bcb4e8d-8e8c-487d-team-6b91c89fAcce"
                    };
                    var param = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        Title = VPParameter.PmolAssignDayPanningDto.PersonName,
                        ParentId = param1.Id,
                        OrganizationTaxonomyLevelId = "we10e768-3e06-po02-b337-ee367a82adwe",
                        PersonId = VPParameter.PmolAssignDayPanningDto.CabPersonCompanyId,
                        RoleId = "2210e768-msms-Item-team2-ee367a82ad22",
                        ModifiedDate = DateTime.UtcNow,
                        StartDate = VPParameter.PmolAssignDayPanningDto.ExecutionDate
                            .AddDays(-(int) VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek).Date,
                        EndDate = VPParameter.PmolAssignDayPanningDto.ExecutionDate
                            .AddDays(-(int) VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek).AddDays(7)
                            .Date,
                        TemporaryTeamNameId = ""
                    };
                    await connection.ExecuteAsync(newTeam, param1);
                    await connection.ExecuteAsync(newTeam, param);

                    return param1.Id;
                }
            }
            
            else
            {
                var teamPmolCount =
                    connection.Query<int>(
                        @"SELECT COUNT(PmolId)FROM dbo.OrganizationTeamPmol WHERE OrganizationTeamId = @TeamId",
                        new {VPParameter.PmolAssignDayPanningDto.TeamId}).FirstOrDefault();

                if (teamPmolCount > 1)
                {
                    await connection.ExecuteAsync(@"DELETE FROM dbo.OrganizationTeamPmol WHERE PmolId = @PmolId",
                        new {VPParameter.AddTeamMember.PmolId});
                    
                    var parent = connection
                        .Query<OrganizationTaxonomy>(
                            "SELECT * FROM dbo.OrganizationTaxonomy WHERE Title = @Cu",
                            new { Cu = cu.ContractingUnitId })
                        .FirstOrDefault();

                    var parentId = VPParameter.PmolAssignDayPanningDto.BuId;

                    var param1 = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        parent?.Title,
                        ParentId = parentId,
                        OrganizationTaxonomyLevelId = "fg10e768-3e06-po02-b337-ee367a82adfg",
                        PersonId = "",
                        RoleId = "",
                        ModifiedDate = DateTime.UtcNow,
                        StartDate = VPParameter.PmolAssignDayPanningDto.ExecutionDate
                            .AddDays(-(int)VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek).Date,
                        EndDate = VPParameter.PmolAssignDayPanningDto.ExecutionDate
                            .AddDays(-(int)VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek).AddDays(7).Date,
                        TemporaryTeamNameId = "7bcb4e8d-8e8c-487d-team-6b91c89fAcce"
                    };
                    var param = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        Title = VPParameter.PmolAssignDayPanningDto.PersonName,
                        ParentId = param1.Id,
                        OrganizationTaxonomyLevelId = "we10e768-3e06-po02-b337-ee367a82adwe",
                        PersonId = VPParameter.PmolAssignDayPanningDto.CabPersonCompanyId,
                        RoleId = "2210e768-msms-Item-team2-ee367a82ad22",
                        ModifiedDate = DateTime.UtcNow,
                        StartDate = VPParameter.PmolAssignDayPanningDto.ExecutionDate
                            .AddDays(-(int)VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek).Date,
                        EndDate = VPParameter.PmolAssignDayPanningDto.ExecutionDate
                            .AddDays(-(int)VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek).AddDays(7).Date,
                        TemporaryTeamNameId = ""
                    };
                    await connection.ExecuteAsync(newTeam, param1);
                    await connection.ExecuteAsync(newTeam, param);

                    var connectionString = ConnectionString.MapConnectionString(
                        VPParameter.AddTeamMember.ContractingUnit,
                        VPParameter.AddTeamMember.ProjectSequenceCode, VPParameter.TenantProvider);

                    return param1.Id;
                }

                else
                {
                    var param = new
                    {
                        Id = Guid.NewGuid(),
                        Title = VPParameter.PmolAssignDayPanningDto.PersonName,
                        ParentId = VPParameter.PmolAssignDayPanningDto.TeamId,
                        OrganizationTaxonomyLevelId = "we10e768-3e06-po02-b337-ee367a82adwe",
                        PersonId = VPParameter.PmolAssignDayPanningDto.CabPersonCompanyId,
                        RoleId = "2210e768-msms-Item-team2-ee367a82ad22",
                        ModifiedDate = DateTime.UtcNow,
                        StartDate = VPParameter.PmolAssignDayPanningDto.ExecutionDate
                            .AddDays(-(int)VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek).Date,
                        EndDate = VPParameter.PmolAssignDayPanningDto.ExecutionDate
                            .AddDays(-(int)VPParameter.PmolAssignDayPanningDto.ExecutionDate.DayOfWeek).AddDays(7).Date,
                        TemporaryTeamNameId = ""
                    };
                    await connection.ExecuteAsync(newTeam, param);

                    return VPParameter.PmolAssignDayPanningDto.TeamId;
                }
            }
        }
    }

    private string GetSequenceNumber(ApplicationDbContext context)
    {
        var property = context.Properties.FirstOrDefault(p => p.Key == "ProjectSequenceCode");
        string last;
        if (property == null)
        {
            var p = new Properties { Key = "ProjectSequenceCode", Value = "P0000" };
            context.Properties.Add(p);
            context.SaveChanges();
            last = "P0000";
        }
        else
        {
            last = property.Value;
        }

        var len = last.Length;
        var prefix = last.Substring(0, 1);
        var numString = last.Substring(1, len - 1).TrimStart(new[] { '0' });
        var nextNum = int.Parse(numString) + 1;
        var numberLength = 0;
        if (nextNum == 0)
            numberLength = 1;
        else
            numberLength = (int)Math.Floor(Math.Log10(nextNum)) + 1;

        var numOfMissingZero = len - 1 - numberLength;
        var zeroString = "";
        for (var i = 1; i <= numOfMissingZero; i++) zeroString += "0";

        var sqNumber = prefix + zeroString + nextNum;

        if (property != null)
        {
            property.Value = sqNumber;
            context.Properties.Update(property);
        }

        context.SaveChanges();

        return sqNumber;
    }

    private string CreateDatabase(string SequenceCode, ApplicationDbContext context, ITenantProvider iTenantProvider)
    {
        var idGenerator = new IdGenerator();
        var newDbName = SequenceCode.Replace("-", "_");
        var connectionString = iTenantProvider.GetTenant().ConnectionString;
        var conn = new SqlConnectionStringBuilder(connectionString)
        {
            InitialCatalog = SequenceCode
        };

        connectionString = conn.ConnectionString;
        var builder = new StringBuilder(connectionString);
        builder.Replace("Multiple Active Result Sets", "MultipleActiveResultSets");
        builder.Replace("Trust Server Certificate", "TrustServerCertificate");


        var nextSqNumber = GetNextSequenceNumber(context);
        var nxtNo = new string(nextSqNumber);
        createNextDb(nxtNo, iTenantProvider);
        return builder.ToString();
    }

    private async void createNextDb(string SequenceCode, ITenantProvider iTenantProvider)
    {
        var projectTemplateDbName = "UPrinceV4ProjectTemplate";
        var copyQuery = "CREATE DATABASE " + SequenceCode + " AS COPY OF " + projectTemplateDbName;
        await using (var connection = new SqlConnection(iTenantProvider.GetTenant().ConnectionString))
        {
            connection.Open();
            var command = new SqlCommand(copyQuery, connection);
            //command.CommandTimeout = 600;
            await command.ExecuteNonQueryAsync();
        }
    }


    private string GetNextSequenceNumber(ApplicationDbContext context)
    {
        var property = context.Properties.FirstOrDefault(p => p.Key == "ProjectSequenceCode");
        string last;
        if (property == null)
        {
            var p = new Properties { Key = "ProjectSequenceCode", Value = "P0000" };
            context.Properties.Add(p);
            context.SaveChanges();
            last = "P0000";
        }
        else
        {
            last = property.Value;
        }

        var len = last.Length;
        var prefix = last.Substring(0, 1);
        var numString = last.Substring(1, len - 1).TrimStart(new[] { '0' });
        var nextNum = int.Parse(numString) + 5;
        var numberLength = 0;
        if (nextNum == 0)
            numberLength = 1;
        else
            numberLength = (int)Math.Floor(Math.Log10(nextNum)) + 1;

        var numOfMissingZero = len - 1 - numberLength;
        var zeroString = "";
        for (var i = 1; i <= numOfMissingZero; i++) zeroString += "0";

        var sqNumber = prefix + zeroString + nextNum;
        return sqNumber;
    }

    private async Task<string> CreatePbsBorPmol(VPParameter VPParameter, string connectionString, string sequenceId,
        string cu, ApplicationUser user)
    {
        await using var connection =
            new SqlConnection(connectionString);
        
        string cuConnectionString = ConnectionString.MapConnectionString(VPParameter.CreateProject.Cu,
            null, VPParameter.TenantProvider);
        
        await using (var cuConnection = new SqlConnection(cuConnectionString))
        {
            if (VPParameter.CreateProject.LabourResourceItem != null)
            {
                var cpc = cuConnection
                    .Query<CorporateProductCatalog>(@"SELECT * FROM dbo.CorporateProductCatalog WHERE Id = @LabourResourceItem",
                        new {VPParameter.CreateProject.LabourResourceItem}).FirstOrDefault();

                if (cpc != null)
                {
                    string insertCpc = @"MERGE
                                        INTO dbo.CorporateProductCatalog t1 USING (SELECT
                                            1 id) t2
                                        ON (t1.Id = @Id)
                                        WHEN NOT MATCHED
                                          THEN INSERT ( Id ,ResourceTitle ,ResourceTypeId ,ResourceFamilyId ,CpcBasicUnitOfMeasureId ,CpcMaterialId ,CpcPressureClassId ,InventoryPrice ,CpcUnitOfSizeMeasureId ,Size ,WallThickness ,MinOrderQuantity ,MaxOrderQuantity ,Weight ,Status ,ResourceNumber ,IsDeleted ,CpcBrandId ,Title ) 
                                            VALUES ( @Id ,@ResourceTitle ,@ResourceTypeId ,@ResourceFamilyId ,@CpcBasicUnitOfMeasureId ,@CpcMaterialId ,@CpcPressureClassId ,@InventoryPrice ,@CpcUnitOfSizeMeasureId ,@Size ,@WallThickness ,@MinOrderQuantity ,@MaxOrderQuantity ,@Weight ,@Status ,@ResourceNumber ,@IsDeleted ,@CpcBrandId ,@Title );";
                    await connection.ExecuteAsync(insertCpc, cpc);
                }
            }
        }
        
        if (VPParameter.CreateProject.PmolTitle != null)
        {
            VPParameter.CreateProject.Name = VPParameter.CreateProject.PmolTitle;
        }

        var pbsParameters = new PbsParameters
        {
            ProjectSequenceId = sequenceId,
            ContractingUnitSequenceId = cu,
            TenantProvider = VPParameter.TenantProvider,
            ChangedUser = user
        };

        var dtoNew = new PbsProductCreateDto
        {
            Id = Guid.NewGuid().ToString(),
            Name = VPParameter.CreateProject.Name,
            PbsType = "regular",
            PbsProductItemTypeId = "aa0c8e3c-f716-4f92-afee-851d485164da",
            Scope = "0",
            PbsProductStatusId = "d60aad0b-2e84-482b-ad25-618d80d49477",
            PbsToleranceStateId = "004eb795-8bba-47e8-9049-d14774ab0b18",
            StartDate = VPParameter.CreateProject.Date,
            EndDate = VPParameter.CreateProject.Date,
            Contract = "Yes"
        };
        pbsParameters.PbsDto = dtoNew;

        var pbs = await VPParameter._iPbsRepository.CreatePbs(pbsParameters).ConfigureAwait(false);

        string pbsLabour = @"INSERT INTO dbo.PbsLabour ( Id ,PbsProductId ,CoperateProductCatalogId ,Quantity ) VALUES ( @Id ,@PbsProductId ,@CoperateProductCatalogId ,@Quantity );";
        
        await connection.ExecuteAsync(pbsLabour, new{Id = Guid.NewGuid(),PbsProductId = pbs.Id,CoperateProductCatalogId = VPParameter.CreateProject.LabourResourceItem,Quantity = VPParameter.CreateProject.LabourResourceQuantity});
        
        var _borParameter = new BorParameter
        {
            ContractingUnitSequenceId = cu,
            ProjectSequenceId = sequenceId,
            Lang = VPParameter.Lang,
            ContextAccessor = VPParameter.ContextAccessor,
            TenantProvider = VPParameter.TenantProvider,
            IBorResourceRepository = VPParameter._iBorResourceRepositoryRepository,
            ICoporateProductCatalogRepository = VPParameter._iCoporateProductCatalogRepository,
            //_CpcParameters.Oid = userId;
            CpcParameters = new CpcParameters()
        };

        var borDto = new BorDto
        {
            Id = Guid.NewGuid().ToString(),
            BorStatusId = "d60aad0b-2e84-482b-ad25-618d80d49477",
            BorTypeId = "88282458-0b40-poa3-b0f9-c2e40344c888",
            Name = VPParameter.CreateProject.Name,
            StartDate = VPParameter.CreateProject.Date,
            EndDate = VPParameter.CreateProject.Date,
            BorResources = new BorResource(),
            IsTh = true,
            Product = new BorProductDto
            {
                Id = pbs.Id,
                ProductId = pbs.ProductId
            }
        };
        
        _borParameter.BorDto = borDto;

        var borItemId = await VPParameter.BorRepository.CreateBor(_borParameter);
        
        await using var dbconnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);

        var options1 = new DbContextOptions<ApplicationDbContext>();
        var applicationDbContext = new ApplicationDbContext(options1, VPParameter.TenantProvider);
        var idGenerator = new IdGenerator();
        
        var locationId = dbconnection
            .Query<string>("Select LocationId From ProjectDefinition Where SequenceCode = @SequenceCode",
                new { SequenceCode = sequenceId }).FirstOrDefault();
        
        var personId = dbconnection
            .Query<string>("SELECT PersonId FROM dbo.CabPersonCompany WHERE Oid = @UserId", new { VPParameter.UserId }).FirstOrDefault();
        
        var borId = connection.Query<string>("Select Id From Bor Where PbsProductId = @PbsProductId",
            new { PbsProductId = pbs.Id }).FirstOrDefault();
        
        // var borInsert =
        //     @"INSERT INTO dbo.BorLabour ( Id ,BorProductId ,Date, Required, Purchased, DeliveryRequested, Warf, Consumed, Invoiced ,CorporateProductCatalogId, ExpectedDeliveryDate) VALUES ( @Id ,@BorProductId ,@Date, @Required, @Purchased, @DeliveryRequested, @Warf, @Consumed, @Invoiced, @CorporateProductCatalogId, @ExpectedDeliveryDate );";
        //
        //
        // await connection.ExecuteAsync(borInsert, new
        // {
        //     Id = Guid.NewGuid().ToString(),
        //     BorProductId = borId,
        //     Date = DateTime.UtcNow,
        //     Required = VPParameter.CreateProject.LabourResourceQuantity,
        //     Purchased = 0,
        //     DeliveryRequested = 0,
        //     Warf = 0,
        //     Consumed = 0,
        //     Invoiced = 0,
        //     CorporateProductCatalogId = VPParameter.CreateProject.LabourResourceItem,
        //     ExpectedDeliveryDate = VPParameter.CreateProject.Date
        // });
        
        var pmolQuery =
            @"INSERT INTO PMol (Id, ProjectMoleculeId, Name, ExecutionDate, IsDeleted, TypeId, StatusId, Title, BorId, LocationId, IsFinished, IsBreak, PmolType, ProductId, ProjectSequenceCode, ExecutionEndTime, ExecutionStartTime) VALUES
                                (@Id, @ProjectMoleculeId, @Name, @ExecutionDate, @IsDeleted, @TypeId, @StatusId, @Title, @BorId, @LocationId, @IsFinished, @IsBreak, @PmolType, @ProductId, @ProjectSequenceCode, @ExecutionEndTime, @ExecutionStartTime)";
        
        var projectMoleculeId1 = idGenerator.GenerateId(applicationDbContext, "PMOL-", "PmolSequenceCode");
        var pmolParam1 = new
        {
            Id = Guid.NewGuid().ToString(),
            ProjectMoleculeId = projectMoleculeId1,
            Name = VPParameter.CreateProject.Name,
            ExecutionDate = VPParameter.CreateProject.Date,
            IsDeleted = false,
            TypeId = VPParameter.CreateProject.PmolType,
            StatusId = "d60aad0b-2e84-482b-ad25-618d80d49477",
            Title = projectMoleculeId1 + " - " + VPParameter.CreateProject.Name,
            BorId = borId,
            LocationId = locationId,
            IsFinished = false,
            IsBreak = false,
            PmolType = "regular",
            ProductId = pbs.Id,
            ProjectSequenceCode = sequenceId,
            ExecutionEndTime = "14:00",
            ExecutionStartTime = "05:00"
        };

        var createLabour = @"INSERT INTO dbo.PMolPlannedWorkLabour ( Id ,CoperateProductCatalogId ,RequiredQuantity,CpcBasicUnitofMeasureId ,PmolId ,Type ) 
                             VALUES ( @Id ,@CoperateProductCatalogId,@RequiredQuantity ,@CpcBasicUnitofMeasureId ,@PmolId ,@Type )";
        
        var param1 = new
        {
            Id = Guid.NewGuid(),
            CoperateProductCatalogId =  VPParameter.CreateProject.LabourResourceItem,
            PmolId = pmolParam1.Id,
            Type = "Planned",
            CpcBasicUnitofMeasureId = "cce5fd6a-91e1-4fc0-b3f6-2c462eaf2500",
            RequiredQuantity =  VPParameter.CreateProject.LabourResourceQuantity
        };
        
        await connection.ExecuteAsync(pmolQuery, pmolParam1);
        await connection.ExecuteAsync(createLabour, param1);

        if (VPParameter.CreateProject.IsMyCalender)
        {
            var addPerson =
                @"INSERT INTO dbo.PmolTeamRole (Id,CabPersonId,RoleId,RequiredQuantity,ConsumedQuantity,Type,PmolLabourId,IsDeleted) VALUES (@Id,@CabPersonId,@RoleId,@RequiredQuantity,@ConsumedQuantity,@Type,@PmolLabourId,@IsDeleted)";

            var param2 = new
            {
                Id = Guid.NewGuid().ToString(),
                PmolLabourId = param1.Id,
                CabPersonId = personId,
                RoleId = "4837043c-119c-47e1-bbf2-1f32557fdf30", 
                RequiredQuantity = 1, 
                ConsumedQuantity = 0,
                Type = "Planned", IsDeleted = false
            };
        
            await connection.ExecuteAsync(addPerson, param2);

        }
        return sequenceId;
    }

    public async Task<string> PbsDisplayOrder(VPParameter VPParameter)
    {
        await using var dbconnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);

        await dbconnection.ExecuteAsync("Delete From PbsDisplayOrder");

        var insertQuery =
            "INSERT INTO dbo.PbsDisplayOrder ( Id ,SequenceId ,DisplayOrder ) VALUES ( @Id ,@SequenceId ,@DisplayOrder )";

        foreach (var item in VPParameter.PbsDisplayOrder)
        {
            item.Id = Guid.NewGuid().ToString();

            await dbconnection.ExecuteAsync(insertQuery, item);
        }

        return "ok";
    }
    
    public async Task<string> PbsAssign(VPParameter VPParameter)
    {
        var connectionString = ConnectionString.MapConnectionString(VPParameter.PbsAssignDto.ContractingUnit,
            VPParameter.PbsAssignDto.ProjectSequenceCode, VPParameter.TenantProvider);
        
        var cuConnectionString = ConnectionString.MapConnectionString(VPParameter.PbsAssignDto.ContractingUnit,
            null, VPParameter.TenantProvider);
        
        await using var connection = new SqlConnection(connectionString);
        await using var cuConnection = new SqlConnection(cuConnectionString);


        var pbs = connection
            .Query<PbsProduct>(@"SELECT * FROM PbsProduct WHERE Id = @Id", new { Id = VPParameter.PbsAssignDto.Id })
            .FirstOrDefault();

        var _borParameter = new BorParameter
        {
            ContractingUnitSequenceId = VPParameter.PbsAssignDto.ContractingUnit,
            ProjectSequenceId = VPParameter.PbsAssignDto.ProjectSequenceCode,
            Lang = VPParameter.Lang,
            ContextAccessor = VPParameter.ContextAccessor,
            TenantProvider = VPParameter.TenantProvider,
            IBorResourceRepository = VPParameter._iBorResourceRepositoryRepository,
            ICoporateProductCatalogRepository = VPParameter._iCoporateProductCatalogRepository,
            //_CpcParameters.Oid = userId;
            CpcParameters = new CpcParameters()
        };

        var borDto = new BorDto
        {
            Id = Guid.NewGuid().ToString(),
            BorStatusId = "d60aad0b-2e84-482b-ad25-618d80d49477",
            BorTypeId = "88282458-0b40-poa3-b0f9-c2e40344c888",
            Name = pbs.Title,
            StartDate = pbs.StartDate,
            EndDate = pbs.EndDate,
            BorResources = new BorResource(),
            IsTh = false,
            Product = new BorProductDto
            {
                Id = pbs.Id,
                ProductId = pbs.ProductId
            }
        };
        
        _borParameter.BorDto = borDto;

        var borItemId = await VPParameter.BorRepository.CreateBor(_borParameter);
        
        await using var dbconnection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);

        var options1 = new DbContextOptions<ApplicationDbContext>();
        var applicationDbContext = new ApplicationDbContext(options1, VPParameter.TenantProvider);
        var idGenerator = new IdGenerator();
        
        var locationId = dbconnection
            .Query<string>("Select LocationId From ProjectDefinition Where SequenceCode = @SequenceCode",
                new { SequenceCode = VPParameter.PbsAssignDto.ProjectSequenceCode }).FirstOrDefault();
        
        var borId = connection.Query<string>("Select Id From Bor Where ItemId = @borItemId",
            new { borItemId }).FirstOrDefault();
        
         var pmolQuery =
            @"INSERT INTO PMol (Id, ProjectMoleculeId, Name, ExecutionDate, IsDeleted, TypeId, StatusId, Title, BorId, LocationId, IsFinished, IsBreak, PmolType, ProductId, ProjectSequenceCode, ExecutionEndTime, ExecutionStartTime) VALUES
                                (@Id, @ProjectMoleculeId, @Name, @ExecutionDate, @IsDeleted, @TypeId, @StatusId, @Title, @BorId, @LocationId, @IsFinished, @IsBreak, @PmolType, @ProductId, @ProjectSequenceCode, @ExecutionEndTime, @ExecutionStartTime)";
        
         var day = VPParameter.PbsAssignDto.ExecutionDate.DayOfWeek.ToString();
         string corporateSheduleTime = @"SELECT CorporateSheduleTime.* FROM dbo.CorporateShedule INNER JOIN dbo.CorporateSheduleTime ON CorporateShedule.Id = CorporateSheduleTime.CorporateSheduleId WHERE CorporateShedule.IsDefault = 1 AND CorporateSheduleTime.Day = @day"; 
         var corporateShedule = dbconnection.Query<CorporateSheduleTime>(corporateSheduleTime, new { day }).FirstOrDefault();
        
        var projectMoleculeId1 = idGenerator.GenerateId(applicationDbContext, "PMOL-", "PmolSequenceCode");
        var pmolParam1 = new
        {
            Id = Guid.NewGuid().ToString(),
            ProjectMoleculeId = projectMoleculeId1,
            Name = pbs.Title,
            ExecutionDate = VPParameter.PbsAssignDto.ExecutionDate,
            IsDeleted = false,
            TypeId = "5bb656-f708-4a0d-9973-3d834ffe757d01",
            StatusId = "d60aad0b-2e84-482b-ad25-618d80d49477",
            Title = projectMoleculeId1 + " - " + pbs.Title,
            BorId = borId,
            LocationId = locationId,
            IsFinished = false,
            IsBreak = false,
            PmolType = "regular",
            ProductId = pbs.Id,
            ProjectSequenceCode = VPParameter.PbsAssignDto.ProjectSequenceCode,
            ExecutionEndTime = corporateShedule?.EndTime,
            ExecutionStartTime = corporateShedule?.StartTime
        };

        await connection.ExecuteAsync(pmolQuery, pmolParam1);
        
        await CopyResourcesFromBorToPmol(VPParameter, pmolParam1.Id, borId);
        
        var pmolLabour = connection
            .Query<PmolPlannedWorkLabour>(@"SELECT * FROM dbo.PMolPlannedWorkLabour WHERE PmolId = @Id",
                new { Id = pmolParam1.Id }).FirstOrDefault();

        if (pmolLabour == null)
        {
            const string PMolPlannedWorkLabourSql =
                "INSERT INTO dbo.PMolPlannedWorkLabour ( Id ,CoperateProductCatalogId ,RequiredQuantity ,ConsumedQuantity ,CpcBasicUnitofMeasureId ,PmolId ,Type ,IsDeleted ) VALUES ( @Id ,@CoperateProductCatalogId ,0.0 ,0.0 ,@CpcBasicUnitofMeasureId ,@PmolId ,@Type ,0 )";

            var param = new
            {
                Id = Guid.NewGuid().ToString(),
                CoperateProductCatalogId = "05bc929c-e07a-46a9-844a-fd5d3b488f7b",
                CpcBasicUnitofMeasureId = "cce5fd6a-91e1-4fc0-b3f6-2c462eaf2500",
                PmolId = pmolParam1.Id,
                Type = "Planned"
            };
            
            await connection.ExecuteAsync(PMolPlannedWorkLabourSql,param);
            
            pmolLabour = connection
                .Query<PmolPlannedWorkLabour>(@"SELECT * FROM dbo.PMolPlannedWorkLabour WHERE PmolId = @Id",
                    new { Id = pmolParam1.Id }).FirstOrDefault();
        }

        await connection.ExecuteAsync(
            @"UPDATE dbo.PMolPlannedWorkLabour SET RequiredQuantity = 0 WHERE Id = @Id",
            new {pmolLabour.Id});
        
        if (VPParameter.PbsAssignDto.TeamId != null)
        {
            if (pmolLabour != null)
            {
                var selectTaxonmy =
                    @"SELECT CabPersonCompany.PersonId ,OrganizationTaxonomy.RoleId FROM dbo.OrganizationTaxonomy LEFT OUTER JOIN dbo.CabPersonCompany ON OrganizationTaxonomy.PersonId = CabPersonCompany.Id WHERE OrganizationTaxonomy.ParentId = @ParentId";

                var mOrganizationTaxonomy = dbconnection
                    .Query<OrganizationTaxonomy>(selectTaxonmy,
                        new { ParentId = VPParameter.PbsAssignDto.TeamId })
                    .ToList();

                var foreman = mOrganizationTaxonomy
                    .FirstOrDefault(e => e.RoleId == "2210e768-msms-Item-team1-ee367a82ad22");

                if (foreman == null)
                {
                    mOrganizationTaxonomy[0].RoleId = "2210e768-msms-Item-team1-ee367a82ad22";
                }
                var addTeamMember =
                    @"INSERT INTO dbo.PmolTeamRole ( Id ,CabPersonId ,RoleId ,Type ,PmolLabourId ) VALUES ( @Id ,@CabPersonId ,@RoleId ,@Type ,@PmolLabourId );";

                foreach (var i in mOrganizationTaxonomy)
                {
                    if (i.RoleId == "2210e768-msms-Item-team1-ee367a82ad22")
                    {
                        var param2 = new
                        {
                            Id = Guid.NewGuid(),
                            CabPersonId = i.PersonId,
                            RoleId = "Foreman",
                            Type = "Planned",
                            PmolLabourId = pmolLabour.Id
                        };
                        await connection.ExecuteAsync(addTeamMember, param2);
                        await connection.ExecuteAsync("UPDATE dbo.PMol SET ForemanId = @ForemanId WHERE Id = @Id",
                            new { ForemanId = i.PersonId, pmolParam1.Id });
                    }

                    else
                    {
                        var param2 = new
                        {
                            Id = Guid.NewGuid(),
                            CabPersonId = i.PersonId,
                            RoleId = "5e622d-4783-95e6-4092004eb5e-aff848e",
                            Type = "Planned",
                            PmolLabourId = pmolLabour.Id
                        };
                        await connection.ExecuteAsync(addTeamMember, param2);
                    }
                    
                    var item = connection
                        .Query<Pmol>("Select * from Pmol Where Id = @Id", new { Id = pmolParam1.Id })
                        .FirstOrDefault();
            

                    var startTime = item?.ExecutionStartTime;
                    var endTime = item?.ExecutionEndTime;

                    double pmolTime;
                    if (startTime != null && endTime != null)
                    {
                        var d1 = DateTime.Parse(endTime) - DateTime.Parse(startTime);

                        pmolTime = d1.TotalHours;
                    }
                    else
                    {
                        pmolTime = 0;
                    }

                    var pmolTimeInsert =
                        @"INSERT INTO dbo.PmolAssignTime ( Id ,CabPersonId ,PmolId ,ExecutionDate ,ProjectSequenceId ,AssignTime ) VALUES ( @Id ,@CabPersonId ,@PmolId ,@ExecutionDate ,@ProjectSequenceId ,@AssignTime )";


                    var timeParam = new
                    {
                        Id = Guid.NewGuid().ToString(),
                        CabPersonId = i.PersonId,
                        PmolId = pmolParam1.Id,
                        pmolParam1?.ExecutionDate,
                        ProjectSequenceId = VPParameter.PbsAssignDto.ProjectSequenceCode,
                        AssignTime = pmolTime.ToString()
                    };

                    await cuConnection.ExecuteAsync(pmolTimeInsert, timeParam);

                    await AddPersonToProject(VPParameter,VPParameter.PbsAssignDto.ProjectSequenceCode,i.PersonId);
                }

                var insert =
                    @"INSERT INTO OrganizationTeamPmol ( Id ,OrganizationTeamId ,PmolId ,ExecutionDate ,StartTime ,EndTime ,ContractingUnit ,Project ) VALUES ( @Id ,@OrganizationTeamId ,@PmolId ,@ExecutionDate ,@StartTime ,@EndTime ,@ContractingUnit ,@Project)";

                var param = new
                {
                    Id = Guid.NewGuid(),
                    OrganizationTeamId = VPParameter.PbsAssignDto.TeamId,
                    PmolId = pmolParam1.Id,
                    VPParameter.PbsAssignDto.ExecutionDate,
                    StartTime = pmolParam1.ExecutionStartTime,
                    EndTime = pmolParam1.ExecutionEndTime,
                    VPParameter.PbsAssignDto.ContractingUnit,
                    Project = VPParameter.PbsAssignDto.ProjectSequenceCode
                };

                await dbconnection.ExecuteAsync(insert, param);
                
                await UpdateLabourRequiredTime(VPParameter,VPParameter.PbsAssignDto.TeamId,pmolLabour.Id,connectionString,VPParameter.PbsAssignDto.ExecutionDate,true);

            }
        }
        
        return pbs.ProductId;
    }

    public async Task<string> ProjectAssign(VPParameter VPParameter)
    {
        var selectProject =
            @"SELECT ProjectDefinition.Title, ProjectDefinition.ProjectConnectionString,ProjectDefinition.SequenceCode,ProjectDefinition.Name, CabCompany.SequenceCode AS ContractingUnitId FROM dbo.ProjectDefinition LEFT OUTER JOIN CabCompany ON ProjectDefinition.ContractingUnitId = CabCompany.Id WHERE ProjectDefinition.IsDeleted = 0 AND ProjectDefinition.SequenceCode = @Id";

        await using var connection = new SqlConnection(VPParameter.TenantProvider.GetTenant().ConnectionString);
        
        var mProjectDefinition = connection.Query<ProjectDefinition>(selectProject,
                new { Id = VPParameter.ProjectAssignDto.ProjectSequenceCode }).FirstOrDefault();

        if (mProjectDefinition != null)
        {
            await using var pConnection = new SqlConnection(mProjectDefinition.ProjectConnectionString);

            var selectPbs = @"SELECT pp.Id FROM PbsProduct pp WHERE pp.StartDate <= @WeekEndDate AND pp.EndDate >= @WeekStartDate AND pp.ProductId NOT IN (SELECT p.ParentId FROM PbsProduct p WHERE  p.ParentId IS NOT NULL) AND pp.IsDeleted = 0 AND pp.Id IN (SELECT PbsLabour.PbsProductId FROM dbo.PbsLabour)";
            var pbsList = pConnection.Query<string>(selectPbs,new{VPParameter.ProjectAssignDto.WeekEndDate,VPParameter.ProjectAssignDto.WeekStartDate}).ToList();

            if (!pbsList.Any())
            {
                var user = connection
                    .Query<ApplicationUser>("Select * from ApplicationUser Where Oid = @Oid", new { Oid = VPParameter.UserId })
                    .FirstOrDefault();
                var pbsParameters = new PbsParameters
                {
                    ProjectSequenceId = VPParameter.ProjectAssignDto.ProjectSequenceCode,
                    ContractingUnitSequenceId = VPParameter.ProjectAssignDto.ContractingUnit,
                    TenantProvider = VPParameter.TenantProvider,
                    ChangedUser = user
                };

                var dtoNew = new PbsProductCreateDto
                {
                    Id = Guid.NewGuid().ToString(),
                    Name = mProjectDefinition.Title,
                    PbsType = "regular",
                    PbsProductItemTypeId = "aa0c8e3c-f716-4f92-afee-851d485164da",
                    Scope = "0",
                    PbsProductStatusId = "d60aad0b-2e84-482b-ad25-618d80d49477",
                    PbsToleranceStateId = "004eb795-8bba-47e8-9049-d14774ab0b18",
                    StartDate = VPParameter.ProjectAssignDto.ExecutionDate,
                    EndDate = VPParameter.ProjectAssignDto.ExecutionDate,
                    Contract = "Yes"
                };
                pbsParameters.PbsDto = dtoNew;

                var pbs = await VPParameter._iPbsRepository.CreatePbs(pbsParameters).ConfigureAwait(false);

                string pbsLabour = @"INSERT INTO dbo.PbsLabour ( Id ,PbsProductId ,CoperateProductCatalogId ,Quantity ) VALUES ( @Id ,@PbsProductId ,@CoperateProductCatalogId ,@Quantity );";
        
                await pConnection.ExecuteAsync(pbsLabour, new{Id = Guid.NewGuid(),PbsProductId = pbs.Id,CoperateProductCatalogId = VPParameter.Configuration.GetValue<string>("DefaultCpc"),Quantity = "0"});
                
                pbsList.Add(pbs.Id);

            }

            foreach (var i in pbsList)
            {
                var pbsAssignDto = new PbsAssignDto()
                {
                    Id = i,
                    ExecutionDate = VPParameter.ProjectAssignDto.ExecutionDate,
                    ProjectSequenceCode = mProjectDefinition.SequenceCode,
                    ContractingUnit = mProjectDefinition.ContractingUnitId,
                    TeamId = VPParameter.ProjectAssignDto.TeamId
                };

                VPParameter.PbsAssignDto = pbsAssignDto;

                await PbsAssign(VPParameter);
            }
        }
        
        return VPParameter.ProjectAssignDto.ProjectSequenceCode;
    }

    public async Task<List<ProjectDefinition>> ProjectSearchForVp(VPParameter vPParameter)
    {
        try
        {
            await using var connection = new SqlConnection(vPParameter.TenantProvider.GetTenant().ConnectionString);

            string query = @"SELECT
                              ProjectDefinition.Id,ProjectDefinition.SequenceCode,ProjectDefinition.Title
                            FROM dbo.ProjectDefinition
                            LEFT OUTER JOIN CabCompany
                              ON ProjectDefinition.ContractingUnitId = CabCompany.Id
                            LEFT OUTER JOIN dbo.ProjectClassification
                              ON ProjectDefinition.Id = ProjectClassification.ProjectId
                            WHERE ProjectDefinition.IsDeleted = 0 ";

            var sb = new StringBuilder(query);
            if (vPParameter.ProjectSearchForVpDto.BuId != null)
            {
                sb.Append(
                    "AND ProjectClassification.ProjectClassificationBuisnessUnit IN (SELECT Id FROM dbo.OrganizationTaxonomy WHERE BuSequenceId = '" +
                    vPParameter.ProjectSearchForVpDto.BuId + "') ");
            }
        
            if (vPParameter.ProjectSearchForVpDto.Title != null)
            {
                vPParameter.ProjectSearchForVpDto.Title =
                    vPParameter.ProjectSearchForVpDto.Title.Replace("'", "''");
                sb.Append(" AND ProjectDefinition.Title LIKE '%" +
                          vPParameter.ProjectSearchForVpDto.Title + "%'");
            }
        
            var project = connection.Query<ProjectDefinition>(sb.ToString()).ToList();

            return project;
        }
        catch (Exception e)
        {
            //Console.WriteLine(e);
            throw;
        }

    }

    public async Task<string> CopyResourcesFromBorToPmol(VPParameter VPParameter, string pmolId,string borId)
    {
        string connectionString = ConnectionString.MapConnectionString(VPParameter.PbsAssignDto.ContractingUnit,
            VPParameter.PbsAssignDto.ProjectSequenceCode, VPParameter.TenantProvider);
        var param = new { pmolId, borId};

        var consumableSql = @"insert into PMolPlannedWorkConsumable
                                         select  NEWID(), CorporateProductCatalogId, SUM(Required) AS Required,0, CpcBasicUnitOfMeasureLocalizedData.Id , @pmolId, 'Planned',0
                                         from BorConsumable 
                                         LEFT OUTER JOIN CorporateProductCatalog ON CorporateProductCatalog.Id = BorConsumable.CorporateProductCatalogId
                                         LEFT OUTER JOIN CpcBasicUnitOfMeasureLocalizedData on CorporateProductCatalog.CpcBasicUnitOfMeasureId = CpcBasicUnitOfMeasureLocalizedData.CpcBasicUnitOfMeasureId
                                         where BorProductId = @borId
                                         AND ( CpcBasicUnitOfMeasureLocalizedData.LanguageCode='en' OR  CorporateProductCatalog.CpcBasicUnitOfMeasureId is null)
                                         group by CorporateProductCatalogId,CorporateProductCatalog.ResourceNumber, CorporateProductCatalog.ResourceTitle,  CpcBasicUnitOfMeasureLocalizedData.Label, CpcBasicUnitOfMeasureLocalizedData.Id";

        var labourSql = @"insert into PMolPlannedWorkLabour
                                    select  NEWID(), CorporateProductCatalogId, SUM(Required) AS Required,0, CpcBasicUnitOfMeasureLocalizedData.Id , @pmolId, 'Planned',0
                                    from BorLabour 
                                    LEFT OUTER JOIN CorporateProductCatalog ON CorporateProductCatalog.Id = BorLabour.CorporateProductCatalogId
                                    LEFT OUTER JOIN CpcBasicUnitOfMeasureLocalizedData on CorporateProductCatalog.CpcBasicUnitOfMeasureId = CpcBasicUnitOfMeasureLocalizedData.CpcBasicUnitOfMeasureId
                                    where BorProductId = @borId
                                    AND ( CpcBasicUnitOfMeasureLocalizedData.LanguageCode='en' OR  CorporateProductCatalog.CpcBasicUnitOfMeasureId is null)
                                    group by CorporateProductCatalogId,CorporateProductCatalog.ResourceNumber, CorporateProductCatalog.ResourceTitle,  CpcBasicUnitOfMeasureLocalizedData.Label, CpcBasicUnitOfMeasureLocalizedData.Id";

        var materialSql = @"insert into PMolPlannedWorkMaterial
                                    select  NEWID(), CorporateProductCatalogId, SUM(Required) AS Required,0, CpcBasicUnitOfMeasureLocalizedData.Id , @pmolId, 'Planned',0
                                    from BorMaterial 
                                    LEFT OUTER JOIN CorporateProductCatalog ON CorporateProductCatalog.Id = BorMaterial.CorporateProductCatalogId
                                    LEFT OUTER JOIN CpcBasicUnitOfMeasureLocalizedData on CorporateProductCatalog.CpcBasicUnitOfMeasureId = CpcBasicUnitOfMeasureLocalizedData.CpcBasicUnitOfMeasureId
                                    where BorProductId = @borId
                                    AND ( CpcBasicUnitOfMeasureLocalizedData.LanguageCode='en' OR  CorporateProductCatalog.CpcBasicUnitOfMeasureId is null)
                                    group by CorporateProductCatalogId,CorporateProductCatalog.ResourceNumber, CorporateProductCatalog.ResourceTitle,  CpcBasicUnitOfMeasureLocalizedData.Label, CpcBasicUnitOfMeasureLocalizedData.Id";

        var toolSql = @"insert into PMolPlannedWorkTools
                                    select  NEWID(), CorporateProductCatalogId, SUM(Required) AS Required,0, CpcBasicUnitOfMeasureLocalizedData.Id , @pmolId, 'Planned',0,'0'
                                    from BorTools 
                                    LEFT OUTER JOIN CorporateProductCatalog ON CorporateProductCatalog.Id = BorTools.CorporateProductCatalogId
                                    LEFT OUTER JOIN CpcBasicUnitOfMeasureLocalizedData on CorporateProductCatalog.CpcBasicUnitOfMeasureId = CpcBasicUnitOfMeasureLocalizedData.CpcBasicUnitOfMeasureId
                                    where BorProductId = @borId
                                    AND ( CpcBasicUnitOfMeasureLocalizedData.LanguageCode='en' OR  CorporateProductCatalog.CpcBasicUnitOfMeasureId is null)
                                    group by CorporateProductCatalogId,CorporateProductCatalog.ResourceNumber, CorporateProductCatalog.ResourceTitle,  CpcBasicUnitOfMeasureLocalizedData.Label, CpcBasicUnitOfMeasureLocalizedData.Id";

        using (var connection = new SqlConnection(connectionString))
        {
            var affectedRows1 = connection.Execute(consumableSql, param);
            var affectedRows2 = connection.Execute(labourSql, param);
            var affectedRows3 = connection.Execute(materialSql, param);
            var affectedRows4 = connection.Execute(toolSql, param);
            connection.Close();
        }

        return pmolId;
    }

    public async Task<string> UpdateLabourRequiredTime(VPParameter vpParameter,string teamId,string labourId, string connectionString, DateTime executionDate,bool IsCorporateShedule)
    {
        await using var pConnection = new SqlConnection(connectionString);

        string totalPmolPlannedQuantity = @"SELECT COALESCE(SUM(PMolPlannedWorkLabour.RequiredQuantity),0) AS RequiredQuantity FROM dbo.Pmol LEFT OUTER JOIN PMolPlannedWorkLabour ON PMol.Id = PMolPlannedWorkLabour.PmolId WHERE PMol.ProductId = (SELECT PMol.ProductId FROM dbo.Pmol LEFT OUTER JOIN PMolPlannedWorkLabour ON PMol.Id = PMolPlannedWorkLabour.PmolId WHERE PMolPlannedWorkLabour.Id = @labourId) AND PMolPlannedWorkLabour.IsDeleted = 0";
       
        var mTotalPmolPlannedQuantity =
            pConnection.Query<int>(totalPmolPlannedQuantity, new { labourId }).FirstOrDefault();

        string pbsPlannedQuantity = @"SELECT Quantity FROM dbo.PbsLabour WHERE PbsProductId = (SELECT PMol.ProductId FROM dbo.Pmol LEFT OUTER JOIN PMolPlannedWorkLabour ON PMol.Id = PMolPlannedWorkLabour.PmolId WHERE PMolPlannedWorkLabour.Id = @labourId)";
        var mPbsPlannedQuantity = pConnection.Query<int>(pbsPlannedQuantity,new { labourId }).FirstOrDefault();

        var remainingQuantity = mPbsPlannedQuantity - mTotalPmolPlannedQuantity; 
        
        await using var connection = new SqlConnection(vpParameter.TenantProvider.GetTenant().ConnectionString);

        var day = executionDate.DayOfWeek.ToString();
        string corporateSheduleTime = @"SELECT CorporateSheduleTime.* FROM dbo.CorporateShedule INNER JOIN dbo.CorporateSheduleTime ON CorporateShedule.Id = CorporateSheduleTime.CorporateSheduleId WHERE CorporateShedule.IsDefault = 1 AND CorporateSheduleTime.Day = @day"; 
        var corporateShedule = connection.Query<CorporateSheduleTime>(corporateSheduleTime, new { day }).FirstOrDefault();
        
        var teamCount = connection
            .Query<string>(@"SELECT COUNT(Id) FROM dbo.OrganizationTaxonomy WHERE ParentId = @teamId", new { teamId })
            .FirstOrDefault().ToInt();
        
        var pmolSTime = DateTime.ParseExact(corporateShedule?.StartTime,"HH:mm", CultureInfo.InvariantCulture);
        var pmolETime = DateTime.ParseExact(corporateShedule?.EndTime,"HH:mm", CultureInfo.InvariantCulture);

        if (!IsCorporateShedule)
        {
            pmolSTime = DateTime.ParseExact(vpParameter.PmolDrag.ExecutionStartTime,"HH:mm", CultureInfo.InvariantCulture);
            pmolETime = DateTime.ParseExact(vpParameter.PmolDrag.ExecutionEndTime,"HH:mm", CultureInfo.InvariantCulture);
        }
        
        var executionSTime = executionDate.AddHours(pmolSTime.Hour).AddMinutes(pmolSTime.Minute);
        var executionETime = executionDate.AddHours(pmolETime.Hour).AddMinutes(pmolETime.Minute);

        var pmolTime = (executionETime - executionSTime);
        
        var requiredQuantity = (teamCount * pmolTime).TotalHours;

        if (requiredQuantity > remainingQuantity && remainingQuantity > 0 && vpParameter.PbsAssignDto != null)
        {
            await pConnection.ExecuteAsync(
                @"UPDATE dbo.PMolPlannedWorkLabour SET RequiredQuantity = @remainingQuantity WHERE Id = @labourId",
                new {remainingQuantity,labourId});

            var pmolHours = remainingQuantity / teamCount;
            var rounded = (int)Math.Floor((decimal)pmolHours);
            var endTime = pmolSTime.AddHours(rounded).ToString("HH:mm");
            var startTime = pmolSTime.ToString("HH:mm");

            string updatePmol = @"UPDATE dbo.PMol SET ExecutionEndTime = @endTime,ExecutionStartTime = @startTime WHERE Id = (SELECT PmolId FROM PMolPlannedWorkLabour WHERE Id = @labourId)";

            await pConnection.ExecuteAsync(updatePmol, new { labourId, endTime, startTime });
        }
        else
        {
            await pConnection.ExecuteAsync(
                @"UPDATE dbo.PMolPlannedWorkLabour SET RequiredQuantity = @requiredQuantity WHERE Id = @labourId",
                new {requiredQuantity,labourId});
        }
        return teamId;
    }
}